/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.9.6
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

export class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

/**
* Initializer describes the name and the failure policy of an initializer, and what resources it applies to.
*/
export class IoK8sApiAdmissionregistrationV1alpha1Initializer {
    /**
    * Name is the identifier of the initializer. It will be added to the object that needs to be initialized. Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where \"alwayspullimages\" is the name of the webhook, and kubernetes.io is the name of the organization. Required
    */
    'name': string;

    /**
    * Rules describes what resources/subresources the initializer cares about. The initializer cares about an operation if it matches _any_ Rule. Rule.Resources must not include subresources.
    */
    'rules'?: Array<IoK8sApiAdmissionregistrationV1alpha1Rule>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiAdmissionregistrationV1alpha1Rule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1alpha1Initializer.attributeTypeMap;
    }
}

/**
* InitializerConfiguration describes the configuration of initializers.
*/
export class IoK8sApiAdmissionregistrationV1alpha1InitializerConfiguration {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Initializers is a list of resources and their default initializers Order-sensitive. When merging multiple InitializerConfigurations, we sort the initializers from different InitializerConfigurations by the name of the InitializerConfigurations; the order of the initializers from the same InitializerConfiguration is preserved.
    */
    'initializers'?: Array<IoK8sApiAdmissionregistrationV1alpha1Initializer>;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "initializers",
            "baseName": "initializers",
            "type": "Array<IoK8sApiAdmissionregistrationV1alpha1Initializer>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1alpha1InitializerConfiguration.attributeTypeMap;
    }
}

/**
* InitializerConfigurationList is a list of InitializerConfiguration.
*/
export class IoK8sApiAdmissionregistrationV1alpha1InitializerConfigurationList {
    /**
    * List of InitializerConfiguration.
    */
    'items': Array<IoK8sApiAdmissionregistrationV1alpha1InitializerConfiguration>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAdmissionregistrationV1alpha1InitializerConfiguration>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1alpha1InitializerConfigurationList.attributeTypeMap;
    }
}

/**
* Rule is a tuple of APIGroups, APIVersion, and Resources.It is recommended to make sure that all the tuple expansions are valid.
*/
export class IoK8sApiAdmissionregistrationV1alpha1Rule {

    /**
    * APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
    */
    'apiGroups'?: Array<string>;
    /**
    * APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
    */
    'apiVersions'?: Array<string>;
    /**
    * Resources is a list of resources this rule applies to.  For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/_*' means all subresources of pods. '*_/scale' means all scale subresources. '*_/_*' means all resources and their subresources.  If wildcard is present, the validation rule will ensure resources do not overlap with each other.  Depending on the enclosing object, subresources might not be allowed. Required.
    */
    'resources'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroups",
            "baseName": "apiGroups",
            "type": "Array<string>"
        },
        {
            "name": "apiVersions",
            "baseName": "apiVersions",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1alpha1Rule.attributeTypeMap;
    }
}

/**
* MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
*/
export class IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Webhooks is a list of webhooks and the affected resources and operations.
    */
    'webhooks'?: Array<IoK8sApiAdmissionregistrationV1beta1Webhook>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "webhooks",
            "baseName": "webhooks",
            "type": "Array<IoK8sApiAdmissionregistrationV1beta1Webhook>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration.attributeTypeMap;
    }
}

/**
* MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
*/
export class IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationList {
    /**
    * List of MutatingWebhookConfiguration.
    */
    'items': Array<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationList.attributeTypeMap;
    }
}

/**
* RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
*/
export class IoK8sApiAdmissionregistrationV1beta1RuleWithOperations {

    /**
    * APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
    */
    'apiGroups'?: Array<string>;
    /**
    * APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
    */
    'apiVersions'?: Array<string>;
    /**
    * Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If '*' is present, the length of the slice must be one. Required.
    */
    'operations'?: Array<string>;
    /**
    * Resources is a list of resources this rule applies to.  For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/_*' means all subresources of pods. '*_/scale' means all scale subresources. '*_/_*' means all resources and their subresources.  If wildcard is present, the validation rule will ensure resources do not overlap with each other.  Depending on the enclosing object, subresources might not be allowed. Required.
    */
    'resources'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroups",
            "baseName": "apiGroups",
            "type": "Array<string>"
        },
        {
            "name": "apiVersions",
            "baseName": "apiVersions",
            "type": "Array<string>"
        },
        {
            "name": "operations",
            "baseName": "operations",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1RuleWithOperations.attributeTypeMap;
    }
}

/**
* ServiceReference holds a reference to Service.legacy.k8s.io
*/
export class IoK8sApiAdmissionregistrationV1beta1ServiceReference {
    /**
    * `name` is the name of the service. Required
    */
    'name': string;
    /**
    * `namespace` is the namespace of the service. Required
    */
    'namespace': string;

    /**
    * `path` is an optional URL path which will be sent in any request to this service.
    */
    'path'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1ServiceReference.attributeTypeMap;
    }
}

/**
* ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
*/
export class IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Webhooks is a list of webhooks and the affected resources and operations.
    */
    'webhooks'?: Array<IoK8sApiAdmissionregistrationV1beta1Webhook>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "webhooks",
            "baseName": "webhooks",
            "type": "Array<IoK8sApiAdmissionregistrationV1beta1Webhook>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration.attributeTypeMap;
    }
}

/**
* ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
*/
export class IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationList {
    /**
    * List of ValidatingWebhookConfiguration.
    */
    'items': Array<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationList.attributeTypeMap;
    }
}

/**
* Webhook describes an admission webhook and the resources and operations it applies to.
*/
export class IoK8sApiAdmissionregistrationV1beta1Webhook {
    /**
    * ClientConfig defines how to communicate with the hook. Required
    */
    'clientConfig': IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig;
    /**
    * The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
    */
    'name': string;

    /**
    * FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.
    */
    'failurePolicy'?: string;
    /**
    * NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.  For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"runlevel\",       \"operator\": \"NotIn\",       \"values\": [         \"0\",         \"1\"       ]     }   ] }  If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"environment\",       \"operator\": \"In\",       \"values\": [         \"prod\",         \"staging\"       ]     }   ] }  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.  Default to the empty LabelSelector, which matches everything.
    */
    'namespaceSelector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule.
    */
    'rules'?: Array<IoK8sApiAdmissionregistrationV1beta1RuleWithOperations>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clientConfig",
            "baseName": "clientConfig",
            "type": "IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig"
        },
        {
            "name": "failurePolicy",
            "baseName": "failurePolicy",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespaceSelector",
            "baseName": "namespaceSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiAdmissionregistrationV1beta1RuleWithOperations>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1Webhook.attributeTypeMap;
    }
}

/**
* WebhookClientConfig contains the information to make a TLS connection with the webhook
*/
export class IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig {
    /**
    * `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. Required.
    */
    'caBundle': string;

    /**
    * `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.  If the webhook is running within the cluster, then you should use `service`.  If there is only one port open for the service, that port will be used. If there are multiple ports open, port 443 will be used if it is open, otherwise it is an error.
    */
    'service'?: IoK8sApiAdmissionregistrationV1beta1ServiceReference;
    /**
    * `url` gives the location of the webhook, in standard URL form (`[scheme://]host:port/path`). Exactly one of `url` or `service` must be specified.  The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.  Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.  The scheme must be \"https\"; the URL must begin with \"https://\".  A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.  Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.
    */
    'url'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "caBundle",
            "baseName": "caBundle",
            "type": "string"
        },
        {
            "name": "service",
            "baseName": "service",
            "type": "IoK8sApiAdmissionregistrationV1beta1ServiceReference"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig.attributeTypeMap;
    }
}

/**
* ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
*/
export class IoK8sApiAppsV1ControllerRevision {
    /**
    * Revision indicates the revision of the state represented by Data.
    */
    'revision': number;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Data is the serialized representation of the state.
    */
    'data'?: IoK8sApimachineryPkgRuntimeRawExtension;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "IoK8sApimachineryPkgRuntimeRawExtension"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "revision",
            "baseName": "revision",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1ControllerRevision.attributeTypeMap;
    }
}

/**
* ControllerRevisionList is a resource containing a list of ControllerRevision objects.
*/
export class IoK8sApiAppsV1ControllerRevisionList {
    /**
    * Items is the list of ControllerRevisions
    */
    'items': Array<IoK8sApiAppsV1ControllerRevision>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1ControllerRevision>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1ControllerRevisionList.attributeTypeMap;
    }
}

/**
* DaemonSet represents the configuration of a daemon set.
*/
export class IoK8sApiAppsV1DaemonSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiAppsV1DaemonSetSpec;
    /**
    * The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiAppsV1DaemonSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1DaemonSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1DaemonSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DaemonSet.attributeTypeMap;
    }
}

/**
* DaemonSetCondition describes the state of a DaemonSet at a certain point.
*/
export class IoK8sApiAppsV1DaemonSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of DaemonSet condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DaemonSetCondition.attributeTypeMap;
    }
}

/**
* DaemonSetList is a collection of daemon sets.
*/
export class IoK8sApiAppsV1DaemonSetList {
    /**
    * A list of daemon sets.
    */
    'items': Array<IoK8sApiAppsV1DaemonSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1DaemonSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DaemonSetList.attributeTypeMap;
    }
}

/**
* DaemonSetSpec is the specification of a daemon set.
*/
export class IoK8sApiAppsV1DaemonSetSpec {
    /**
    * A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
    */
    'minReadySeconds'?: number;
    /**
    * The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * An update strategy to replace existing DaemonSet pods with new pods.
    */
    'updateStrategy'?: IoK8sApiAppsV1DaemonSetUpdateStrategy;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        },
        {
            "name": "updateStrategy",
            "baseName": "updateStrategy",
            "type": "IoK8sApiAppsV1DaemonSetUpdateStrategy"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DaemonSetSpec.attributeTypeMap;
    }
}

/**
* DaemonSetStatus represents the current status of a daemon set.
*/
export class IoK8sApiAppsV1DaemonSetStatus {
    /**
    * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'currentNumberScheduled': number;
    /**
    * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'desiredNumberScheduled': number;
    /**
    * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'numberMisscheduled': number;
    /**
    * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
    */
    'numberReady': number;

    /**
    * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a DaemonSet's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1DaemonSetCondition>;
    /**
    * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
    */
    'numberAvailable'?: number;
    /**
    * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
    */
    'numberUnavailable'?: number;
    /**
    * The most recent generation observed by the daemon set controller.
    */
    'observedGeneration'?: number;
    /**
    * The total number of nodes that are running updated daemon pod
    */
    'updatedNumberScheduled'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1DaemonSetCondition>"
        },
        {
            "name": "currentNumberScheduled",
            "baseName": "currentNumberScheduled",
            "type": "number"
        },
        {
            "name": "desiredNumberScheduled",
            "baseName": "desiredNumberScheduled",
            "type": "number"
        },
        {
            "name": "numberAvailable",
            "baseName": "numberAvailable",
            "type": "number"
        },
        {
            "name": "numberMisscheduled",
            "baseName": "numberMisscheduled",
            "type": "number"
        },
        {
            "name": "numberReady",
            "baseName": "numberReady",
            "type": "number"
        },
        {
            "name": "numberUnavailable",
            "baseName": "numberUnavailable",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "updatedNumberScheduled",
            "baseName": "updatedNumberScheduled",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DaemonSetStatus.attributeTypeMap;
    }
}

/**
* DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
*/
export class IoK8sApiAppsV1DaemonSetUpdateStrategy {

    /**
    * Rolling update config params. Present only if type = \"RollingUpdate\".
    */
    'rollingUpdate'?: IoK8sApiAppsV1RollingUpdateDaemonSet;
    /**
    * Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1RollingUpdateDaemonSet"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DaemonSetUpdateStrategy.attributeTypeMap;
    }
}

/**
* Deployment enables declarative updates for Pods and ReplicaSets.
*/
export class IoK8sApiAppsV1Deployment {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the Deployment.
    */
    'spec'?: IoK8sApiAppsV1DeploymentSpec;
    /**
    * Most recently observed status of the Deployment.
    */
    'status'?: IoK8sApiAppsV1DeploymentStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1DeploymentSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1DeploymentStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1Deployment.attributeTypeMap;
    }
}

/**
* DeploymentCondition describes the state of a deployment at a certain point.
*/
export class IoK8sApiAppsV1DeploymentCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of deployment condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * The last time this condition was updated.
    */
    'lastUpdateTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "lastUpdateTime",
            "baseName": "lastUpdateTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DeploymentCondition.attributeTypeMap;
    }
}

/**
* DeploymentList is a list of Deployments.
*/
export class IoK8sApiAppsV1DeploymentList {
    /**
    * Items is the list of Deployments.
    */
    'items': Array<IoK8sApiAppsV1Deployment>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1Deployment>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DeploymentList.attributeTypeMap;
    }
}

/**
* DeploymentSpec is the specification of the desired behavior of the Deployment.
*/
export class IoK8sApiAppsV1DeploymentSpec {
    /**
    * Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * Template describes the pods that will be created.
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Indicates that the deployment is paused.
    */
    'paused'?: boolean;
    /**
    * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
    */
    'progressDeadlineSeconds'?: number;
    /**
    * Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    */
    'replicas'?: number;
    /**
    * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * The deployment strategy to use to replace existing pods with new ones.
    */
    'strategy'?: IoK8sApiAppsV1DeploymentStrategy;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "paused",
            "baseName": "paused",
            "type": "boolean"
        },
        {
            "name": "progressDeadlineSeconds",
            "baseName": "progressDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "strategy",
            "baseName": "strategy",
            "type": "IoK8sApiAppsV1DeploymentStrategy"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DeploymentSpec.attributeTypeMap;
    }
}

/**
* DeploymentStatus is the most recently observed status of the Deployment.
*/
export class IoK8sApiAppsV1DeploymentStatus {

    /**
    * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    */
    'availableReplicas'?: number;
    /**
    * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a deployment's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1DeploymentCondition>;
    /**
    * The generation observed by the deployment controller.
    */
    'observedGeneration'?: number;
    /**
    * Total number of ready pods targeted by this deployment.
    */
    'readyReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    */
    'replicas'?: number;
    /**
    * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    */
    'unavailableReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    */
    'updatedReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1DeploymentCondition>"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "unavailableReplicas",
            "baseName": "unavailableReplicas",
            "type": "number"
        },
        {
            "name": "updatedReplicas",
            "baseName": "updatedReplicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DeploymentStatus.attributeTypeMap;
    }
}

/**
* DeploymentStrategy describes how to replace existing pods with new ones.
*/
export class IoK8sApiAppsV1DeploymentStrategy {

    /**
    * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    */
    'rollingUpdate'?: IoK8sApiAppsV1RollingUpdateDeployment;
    /**
    * Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1RollingUpdateDeployment"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1DeploymentStrategy.attributeTypeMap;
    }
}

/**
* ReplicaSet ensures that a specified number of pod replicas are running at any given time.
*/
export class IoK8sApiAppsV1ReplicaSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiAppsV1ReplicaSetSpec;
    /**
    * Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiAppsV1ReplicaSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1ReplicaSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1ReplicaSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1ReplicaSet.attributeTypeMap;
    }
}

/**
* ReplicaSetCondition describes the state of a replica set at a certain point.
*/
export class IoK8sApiAppsV1ReplicaSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of replica set condition.
    */
    'type': string;

    /**
    * The last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1ReplicaSetCondition.attributeTypeMap;
    }
}

/**
* ReplicaSetList is a collection of ReplicaSets.
*/
export class IoK8sApiAppsV1ReplicaSetList {
    /**
    * List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    */
    'items': Array<IoK8sApiAppsV1ReplicaSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1ReplicaSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1ReplicaSetList.attributeTypeMap;
    }
}

/**
* ReplicaSetSpec is the specification of a ReplicaSet.
*/
export class IoK8sApiAppsV1ReplicaSetSpec {
    /**
    * Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    */
    'replicas'?: number;
    /**
    * Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    */
    'template'?: IoK8sApiCoreV1PodTemplateSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1ReplicaSetSpec.attributeTypeMap;
    }
}

/**
* ReplicaSetStatus represents the current status of a ReplicaSet.
*/
export class IoK8sApiAppsV1ReplicaSetStatus {
    /**
    * Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    */
    'replicas': number;

    /**
    * The number of available replicas (ready for at least minReadySeconds) for this replica set.
    */
    'availableReplicas'?: number;
    /**
    * Represents the latest available observations of a replica set's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1ReplicaSetCondition>;
    /**
    * The number of pods that have labels matching the labels of the pod template of the replicaset.
    */
    'fullyLabeledReplicas'?: number;
    /**
    * ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
    */
    'observedGeneration'?: number;
    /**
    * The number of ready replicas for this replica set.
    */
    'readyReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1ReplicaSetCondition>"
        },
        {
            "name": "fullyLabeledReplicas",
            "baseName": "fullyLabeledReplicas",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1ReplicaSetStatus.attributeTypeMap;
    }
}

/**
* Spec to control the desired behavior of daemon set rolling update.
*/
export class IoK8sApiAppsV1RollingUpdateDaemonSet {

    /**
    * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
    */
    'maxUnavailable'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1RollingUpdateDaemonSet.attributeTypeMap;
    }
}

/**
* Spec to control the desired behavior of rolling update.
*/
export class IoK8sApiAppsV1RollingUpdateDeployment {

    /**
    * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
    */
    'maxSurge'?: string | number;
    /**
    * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    */
    'maxUnavailable'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxSurge",
            "baseName": "maxSurge",
            "type": "string | number"
        },
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1RollingUpdateDeployment.attributeTypeMap;
    }
}

/**
* RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
*/
export class IoK8sApiAppsV1RollingUpdateStatefulSetStrategy {

    /**
    * Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
    */
    'partition'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "partition",
            "baseName": "partition",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1RollingUpdateStatefulSetStrategy.attributeTypeMap;
    }
}

/**
* StatefulSet represents a set of pods with consistent identities. Identities are defined as:  - Network: A single stable DNS and hostname.  - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity.
*/
export class IoK8sApiAppsV1StatefulSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the desired identities of pods in this set.
    */
    'spec'?: IoK8sApiAppsV1StatefulSetSpec;
    /**
    * Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
    */
    'status'?: IoK8sApiAppsV1StatefulSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1StatefulSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1StatefulSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1StatefulSet.attributeTypeMap;
    }
}

/**
* StatefulSetCondition describes the state of a statefulset at a certain point.
*/
export class IoK8sApiAppsV1StatefulSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of statefulset condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1StatefulSetCondition.attributeTypeMap;
    }
}

/**
* StatefulSetList is a collection of StatefulSets.
*/
export class IoK8sApiAppsV1StatefulSetList {
    'items': Array<IoK8sApiAppsV1StatefulSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1StatefulSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1StatefulSetList.attributeTypeMap;
    }
}

/**
* A StatefulSetSpec is the specification of a StatefulSet.
*/
export class IoK8sApiAppsV1StatefulSetSpec {
    /**
    * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.
    */
    'serviceName': string;
    /**
    * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    */
    'podManagementPolicy'?: string;
    /**
    * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    */
    'replicas'?: number;
    /**
    * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
    */
    'updateStrategy'?: IoK8sApiAppsV1StatefulSetUpdateStrategy;
    /**
    * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    */
    'volumeClaimTemplates'?: Array<IoK8sApiCoreV1PersistentVolumeClaim>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "podManagementPolicy",
            "baseName": "podManagementPolicy",
            "type": "string"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "serviceName",
            "baseName": "serviceName",
            "type": "string"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        },
        {
            "name": "updateStrategy",
            "baseName": "updateStrategy",
            "type": "IoK8sApiAppsV1StatefulSetUpdateStrategy"
        },
        {
            "name": "volumeClaimTemplates",
            "baseName": "volumeClaimTemplates",
            "type": "Array<IoK8sApiCoreV1PersistentVolumeClaim>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1StatefulSetSpec.attributeTypeMap;
    }
}

/**
* StatefulSetStatus represents the current state of a StatefulSet.
*/
export class IoK8sApiAppsV1StatefulSetStatus {
    /**
    * replicas is the number of Pods created by the StatefulSet controller.
    */
    'replicas': number;

    /**
    * collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a statefulset's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1StatefulSetCondition>;
    /**
    * currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    */
    'currentReplicas'?: number;
    /**
    * currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    */
    'currentRevision'?: string;
    /**
    * observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    */
    'observedGeneration'?: number;
    /**
    * readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
    */
    'readyReplicas'?: number;
    /**
    * updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    */
    'updateRevision'?: string;
    /**
    * updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    */
    'updatedReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1StatefulSetCondition>"
        },
        {
            "name": "currentReplicas",
            "baseName": "currentReplicas",
            "type": "number"
        },
        {
            "name": "currentRevision",
            "baseName": "currentRevision",
            "type": "string"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "updateRevision",
            "baseName": "updateRevision",
            "type": "string"
        },
        {
            "name": "updatedReplicas",
            "baseName": "updatedReplicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1StatefulSetStatus.attributeTypeMap;
    }
}

/**
* StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
*/
export class IoK8sApiAppsV1StatefulSetUpdateStrategy {

    /**
    * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    */
    'rollingUpdate'?: IoK8sApiAppsV1RollingUpdateStatefulSetStrategy;
    /**
    * Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1RollingUpdateStatefulSetStrategy"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1StatefulSetUpdateStrategy.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1beta2/ControllerRevision. See the release notes for more information. ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
*/
export class IoK8sApiAppsV1beta1ControllerRevision {
    /**
    * Revision indicates the revision of the state represented by Data.
    */
    'revision': number;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Data is the serialized representation of the state.
    */
    'data'?: IoK8sApimachineryPkgRuntimeRawExtension;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "IoK8sApimachineryPkgRuntimeRawExtension"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "revision",
            "baseName": "revision",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1ControllerRevision.attributeTypeMap;
    }
}

/**
* ControllerRevisionList is a resource containing a list of ControllerRevision objects.
*/
export class IoK8sApiAppsV1beta1ControllerRevisionList {
    /**
    * Items is the list of ControllerRevisions
    */
    'items': Array<IoK8sApiAppsV1beta1ControllerRevision>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta1ControllerRevision>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1ControllerRevisionList.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.
*/
export class IoK8sApiAppsV1beta1Deployment {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the Deployment.
    */
    'spec'?: IoK8sApiAppsV1beta1DeploymentSpec;
    /**
    * Most recently observed status of the Deployment.
    */
    'status'?: IoK8sApiAppsV1beta1DeploymentStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta1DeploymentSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta1DeploymentStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1Deployment.attributeTypeMap;
    }
}

/**
* DeploymentCondition describes the state of a deployment at a certain point.
*/
export class IoK8sApiAppsV1beta1DeploymentCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of deployment condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * The last time this condition was updated.
    */
    'lastUpdateTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "lastUpdateTime",
            "baseName": "lastUpdateTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1DeploymentCondition.attributeTypeMap;
    }
}

/**
* DeploymentList is a list of Deployments.
*/
export class IoK8sApiAppsV1beta1DeploymentList {
    /**
    * Items is the list of Deployments.
    */
    'items': Array<IoK8sApiAppsV1beta1Deployment>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta1Deployment>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1DeploymentList.attributeTypeMap;
    }
}

/**
* DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
*/
export class IoK8sApiAppsV1beta1DeploymentRollback {
    /**
    * Required: This must match the Name of a deployment.
    */
    'name': string;
    /**
    * The config of this deployment rollback.
    */
    'rollbackTo': IoK8sApiAppsV1beta1RollbackConfig;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * The annotations to be updated to a deployment
    */
    'updatedAnnotations'?: { [key: string]: string; };

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "rollbackTo",
            "baseName": "rollbackTo",
            "type": "IoK8sApiAppsV1beta1RollbackConfig"
        },
        {
            "name": "updatedAnnotations",
            "baseName": "updatedAnnotations",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1DeploymentRollback.attributeTypeMap;
    }
}

/**
* DeploymentSpec is the specification of the desired behavior of the Deployment.
*/
export class IoK8sApiAppsV1beta1DeploymentSpec {
    /**
    * Template describes the pods that will be created.
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Indicates that the deployment is paused.
    */
    'paused'?: boolean;
    /**
    * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
    */
    'progressDeadlineSeconds'?: number;
    /**
    * Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    */
    'replicas'?: number;
    /**
    * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
    */
    'revisionHistoryLimit'?: number;
    /**
    * DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
    */
    'rollbackTo'?: IoK8sApiAppsV1beta1RollbackConfig;
    /**
    * Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * The deployment strategy to use to replace existing pods with new ones.
    */
    'strategy'?: IoK8sApiAppsV1beta1DeploymentStrategy;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "paused",
            "baseName": "paused",
            "type": "boolean"
        },
        {
            "name": "progressDeadlineSeconds",
            "baseName": "progressDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "rollbackTo",
            "baseName": "rollbackTo",
            "type": "IoK8sApiAppsV1beta1RollbackConfig"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "strategy",
            "baseName": "strategy",
            "type": "IoK8sApiAppsV1beta1DeploymentStrategy"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1DeploymentSpec.attributeTypeMap;
    }
}

/**
* DeploymentStatus is the most recently observed status of the Deployment.
*/
export class IoK8sApiAppsV1beta1DeploymentStatus {

    /**
    * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    */
    'availableReplicas'?: number;
    /**
    * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a deployment's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1beta1DeploymentCondition>;
    /**
    * The generation observed by the deployment controller.
    */
    'observedGeneration'?: number;
    /**
    * Total number of ready pods targeted by this deployment.
    */
    'readyReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    */
    'replicas'?: number;
    /**
    * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    */
    'unavailableReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    */
    'updatedReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1beta1DeploymentCondition>"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "unavailableReplicas",
            "baseName": "unavailableReplicas",
            "type": "number"
        },
        {
            "name": "updatedReplicas",
            "baseName": "updatedReplicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1DeploymentStatus.attributeTypeMap;
    }
}

/**
* DeploymentStrategy describes how to replace existing pods with new ones.
*/
export class IoK8sApiAppsV1beta1DeploymentStrategy {

    /**
    * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    */
    'rollingUpdate'?: IoK8sApiAppsV1beta1RollingUpdateDeployment;
    /**
    * Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1beta1RollingUpdateDeployment"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1DeploymentStrategy.attributeTypeMap;
    }
}

/**
* DEPRECATED.
*/
export class IoK8sApiAppsV1beta1RollbackConfig {

    /**
    * The revision to rollback to. If set to 0, rollback to the last revision.
    */
    'revision'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "revision",
            "baseName": "revision",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1RollbackConfig.attributeTypeMap;
    }
}

/**
* Spec to control the desired behavior of rolling update.
*/
export class IoK8sApiAppsV1beta1RollingUpdateDeployment {

    /**
    * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
    */
    'maxSurge'?: string | number;
    /**
    * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    */
    'maxUnavailable'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxSurge",
            "baseName": "maxSurge",
            "type": "string | number"
        },
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1RollingUpdateDeployment.attributeTypeMap;
    }
}

/**
* RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
*/
export class IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy {

    /**
    * Partition indicates the ordinal at which the StatefulSet should be partitioned.
    */
    'partition'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "partition",
            "baseName": "partition",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy.attributeTypeMap;
    }
}

/**
* Scale represents a scaling request for a resource.
*/
export class IoK8sApiAppsV1beta1Scale {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    */
    'spec'?: IoK8sApiAppsV1beta1ScaleSpec;
    /**
    * current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    */
    'status'?: IoK8sApiAppsV1beta1ScaleStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta1ScaleSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta1ScaleStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1Scale.attributeTypeMap;
    }
}

/**
* ScaleSpec describes the attributes of a scale subresource
*/
export class IoK8sApiAppsV1beta1ScaleSpec {

    /**
    * desired number of instances for the scaled object.
    */
    'replicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1ScaleSpec.attributeTypeMap;
    }
}

/**
* ScaleStatus represents the current status of a scale subresource.
*/
export class IoK8sApiAppsV1beta1ScaleStatus {
    /**
    * actual number of observed instances of the scaled object.
    */
    'replicas': number;

    /**
    * label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
    */
    'selector'?: { [key: string]: string; };
    /**
    * label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'targetSelector'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "targetSelector",
            "baseName": "targetSelector",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1ScaleStatus.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of StatefulSet is deprecated by apps/v1beta2/StatefulSet. See the release notes for more information. StatefulSet represents a set of pods with consistent identities. Identities are defined as:  - Network: A single stable DNS and hostname.  - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity.
*/
export class IoK8sApiAppsV1beta1StatefulSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the desired identities of pods in this set.
    */
    'spec'?: IoK8sApiAppsV1beta1StatefulSetSpec;
    /**
    * Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
    */
    'status'?: IoK8sApiAppsV1beta1StatefulSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta1StatefulSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta1StatefulSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1StatefulSet.attributeTypeMap;
    }
}

/**
* StatefulSetCondition describes the state of a statefulset at a certain point.
*/
export class IoK8sApiAppsV1beta1StatefulSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of statefulset condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1StatefulSetCondition.attributeTypeMap;
    }
}

/**
* StatefulSetList is a collection of StatefulSets.
*/
export class IoK8sApiAppsV1beta1StatefulSetList {
    'items': Array<IoK8sApiAppsV1beta1StatefulSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta1StatefulSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1StatefulSetList.attributeTypeMap;
    }
}

/**
* A StatefulSetSpec is the specification of a StatefulSet.
*/
export class IoK8sApiAppsV1beta1StatefulSetSpec {
    /**
    * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.
    */
    'serviceName': string;
    /**
    * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    */
    'podManagementPolicy'?: string;
    /**
    * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    */
    'replicas'?: number;
    /**
    * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
    */
    'updateStrategy'?: IoK8sApiAppsV1beta1StatefulSetUpdateStrategy;
    /**
    * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    */
    'volumeClaimTemplates'?: Array<IoK8sApiCoreV1PersistentVolumeClaim>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "podManagementPolicy",
            "baseName": "podManagementPolicy",
            "type": "string"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "serviceName",
            "baseName": "serviceName",
            "type": "string"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        },
        {
            "name": "updateStrategy",
            "baseName": "updateStrategy",
            "type": "IoK8sApiAppsV1beta1StatefulSetUpdateStrategy"
        },
        {
            "name": "volumeClaimTemplates",
            "baseName": "volumeClaimTemplates",
            "type": "Array<IoK8sApiCoreV1PersistentVolumeClaim>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1StatefulSetSpec.attributeTypeMap;
    }
}

/**
* StatefulSetStatus represents the current state of a StatefulSet.
*/
export class IoK8sApiAppsV1beta1StatefulSetStatus {
    /**
    * replicas is the number of Pods created by the StatefulSet controller.
    */
    'replicas': number;

    /**
    * collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a statefulset's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1beta1StatefulSetCondition>;
    /**
    * currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    */
    'currentReplicas'?: number;
    /**
    * currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    */
    'currentRevision'?: string;
    /**
    * observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    */
    'observedGeneration'?: number;
    /**
    * readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
    */
    'readyReplicas'?: number;
    /**
    * updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    */
    'updateRevision'?: string;
    /**
    * updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    */
    'updatedReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1beta1StatefulSetCondition>"
        },
        {
            "name": "currentReplicas",
            "baseName": "currentReplicas",
            "type": "number"
        },
        {
            "name": "currentRevision",
            "baseName": "currentRevision",
            "type": "string"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "updateRevision",
            "baseName": "updateRevision",
            "type": "string"
        },
        {
            "name": "updatedReplicas",
            "baseName": "updatedReplicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1StatefulSetStatus.attributeTypeMap;
    }
}

/**
* StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
*/
export class IoK8sApiAppsV1beta1StatefulSetUpdateStrategy {

    /**
    * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    */
    'rollingUpdate'?: IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy;
    /**
    * Type indicates the type of the StatefulSetUpdateStrategy.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta1StatefulSetUpdateStrategy.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1/ControllerRevision. See the release notes for more information. ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
*/
export class IoK8sApiAppsV1beta2ControllerRevision {
    /**
    * Revision indicates the revision of the state represented by Data.
    */
    'revision': number;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Data is the serialized representation of the state.
    */
    'data'?: IoK8sApimachineryPkgRuntimeRawExtension;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "IoK8sApimachineryPkgRuntimeRawExtension"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "revision",
            "baseName": "revision",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ControllerRevision.attributeTypeMap;
    }
}

/**
* ControllerRevisionList is a resource containing a list of ControllerRevision objects.
*/
export class IoK8sApiAppsV1beta2ControllerRevisionList {
    /**
    * Items is the list of ControllerRevisions
    */
    'items': Array<IoK8sApiAppsV1beta2ControllerRevision>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta2ControllerRevision>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ControllerRevisionList.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of DaemonSet is deprecated by apps/v1/DaemonSet. See the release notes for more information. DaemonSet represents the configuration of a daemon set.
*/
export class IoK8sApiAppsV1beta2DaemonSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiAppsV1beta2DaemonSetSpec;
    /**
    * The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiAppsV1beta2DaemonSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta2DaemonSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta2DaemonSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DaemonSet.attributeTypeMap;
    }
}

/**
* DaemonSetCondition describes the state of a DaemonSet at a certain point.
*/
export class IoK8sApiAppsV1beta2DaemonSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of DaemonSet condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DaemonSetCondition.attributeTypeMap;
    }
}

/**
* DaemonSetList is a collection of daemon sets.
*/
export class IoK8sApiAppsV1beta2DaemonSetList {
    /**
    * A list of daemon sets.
    */
    'items': Array<IoK8sApiAppsV1beta2DaemonSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta2DaemonSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DaemonSetList.attributeTypeMap;
    }
}

/**
* DaemonSetSpec is the specification of a daemon set.
*/
export class IoK8sApiAppsV1beta2DaemonSetSpec {
    /**
    * A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
    */
    'minReadySeconds'?: number;
    /**
    * The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * An update strategy to replace existing DaemonSet pods with new pods.
    */
    'updateStrategy'?: IoK8sApiAppsV1beta2DaemonSetUpdateStrategy;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        },
        {
            "name": "updateStrategy",
            "baseName": "updateStrategy",
            "type": "IoK8sApiAppsV1beta2DaemonSetUpdateStrategy"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DaemonSetSpec.attributeTypeMap;
    }
}

/**
* DaemonSetStatus represents the current status of a daemon set.
*/
export class IoK8sApiAppsV1beta2DaemonSetStatus {
    /**
    * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'currentNumberScheduled': number;
    /**
    * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'desiredNumberScheduled': number;
    /**
    * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'numberMisscheduled': number;
    /**
    * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
    */
    'numberReady': number;

    /**
    * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a DaemonSet's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1beta2DaemonSetCondition>;
    /**
    * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
    */
    'numberAvailable'?: number;
    /**
    * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
    */
    'numberUnavailable'?: number;
    /**
    * The most recent generation observed by the daemon set controller.
    */
    'observedGeneration'?: number;
    /**
    * The total number of nodes that are running updated daemon pod
    */
    'updatedNumberScheduled'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1beta2DaemonSetCondition>"
        },
        {
            "name": "currentNumberScheduled",
            "baseName": "currentNumberScheduled",
            "type": "number"
        },
        {
            "name": "desiredNumberScheduled",
            "baseName": "desiredNumberScheduled",
            "type": "number"
        },
        {
            "name": "numberAvailable",
            "baseName": "numberAvailable",
            "type": "number"
        },
        {
            "name": "numberMisscheduled",
            "baseName": "numberMisscheduled",
            "type": "number"
        },
        {
            "name": "numberReady",
            "baseName": "numberReady",
            "type": "number"
        },
        {
            "name": "numberUnavailable",
            "baseName": "numberUnavailable",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "updatedNumberScheduled",
            "baseName": "updatedNumberScheduled",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DaemonSetStatus.attributeTypeMap;
    }
}

/**
* DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
*/
export class IoK8sApiAppsV1beta2DaemonSetUpdateStrategy {

    /**
    * Rolling update config params. Present only if type = \"RollingUpdate\".
    */
    'rollingUpdate'?: IoK8sApiAppsV1beta2RollingUpdateDaemonSet;
    /**
    * Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1beta2RollingUpdateDaemonSet"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DaemonSetUpdateStrategy.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of Deployment is deprecated by apps/v1/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.
*/
export class IoK8sApiAppsV1beta2Deployment {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the Deployment.
    */
    'spec'?: IoK8sApiAppsV1beta2DeploymentSpec;
    /**
    * Most recently observed status of the Deployment.
    */
    'status'?: IoK8sApiAppsV1beta2DeploymentStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta2DeploymentSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta2DeploymentStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2Deployment.attributeTypeMap;
    }
}

/**
* DeploymentCondition describes the state of a deployment at a certain point.
*/
export class IoK8sApiAppsV1beta2DeploymentCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of deployment condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * The last time this condition was updated.
    */
    'lastUpdateTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "lastUpdateTime",
            "baseName": "lastUpdateTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DeploymentCondition.attributeTypeMap;
    }
}

/**
* DeploymentList is a list of Deployments.
*/
export class IoK8sApiAppsV1beta2DeploymentList {
    /**
    * Items is the list of Deployments.
    */
    'items': Array<IoK8sApiAppsV1beta2Deployment>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta2Deployment>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DeploymentList.attributeTypeMap;
    }
}

/**
* DeploymentSpec is the specification of the desired behavior of the Deployment.
*/
export class IoK8sApiAppsV1beta2DeploymentSpec {
    /**
    * Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * Template describes the pods that will be created.
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Indicates that the deployment is paused.
    */
    'paused'?: boolean;
    /**
    * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
    */
    'progressDeadlineSeconds'?: number;
    /**
    * Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    */
    'replicas'?: number;
    /**
    * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * The deployment strategy to use to replace existing pods with new ones.
    */
    'strategy'?: IoK8sApiAppsV1beta2DeploymentStrategy;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "paused",
            "baseName": "paused",
            "type": "boolean"
        },
        {
            "name": "progressDeadlineSeconds",
            "baseName": "progressDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "strategy",
            "baseName": "strategy",
            "type": "IoK8sApiAppsV1beta2DeploymentStrategy"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DeploymentSpec.attributeTypeMap;
    }
}

/**
* DeploymentStatus is the most recently observed status of the Deployment.
*/
export class IoK8sApiAppsV1beta2DeploymentStatus {

    /**
    * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    */
    'availableReplicas'?: number;
    /**
    * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a deployment's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1beta2DeploymentCondition>;
    /**
    * The generation observed by the deployment controller.
    */
    'observedGeneration'?: number;
    /**
    * Total number of ready pods targeted by this deployment.
    */
    'readyReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    */
    'replicas'?: number;
    /**
    * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    */
    'unavailableReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    */
    'updatedReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1beta2DeploymentCondition>"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "unavailableReplicas",
            "baseName": "unavailableReplicas",
            "type": "number"
        },
        {
            "name": "updatedReplicas",
            "baseName": "updatedReplicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DeploymentStatus.attributeTypeMap;
    }
}

/**
* DeploymentStrategy describes how to replace existing pods with new ones.
*/
export class IoK8sApiAppsV1beta2DeploymentStrategy {

    /**
    * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    */
    'rollingUpdate'?: IoK8sApiAppsV1beta2RollingUpdateDeployment;
    /**
    * Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1beta2RollingUpdateDeployment"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2DeploymentStrategy.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1/ReplicaSet. See the release notes for more information. ReplicaSet ensures that a specified number of pod replicas are running at any given time.
*/
export class IoK8sApiAppsV1beta2ReplicaSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiAppsV1beta2ReplicaSetSpec;
    /**
    * Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiAppsV1beta2ReplicaSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta2ReplicaSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta2ReplicaSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ReplicaSet.attributeTypeMap;
    }
}

/**
* ReplicaSetCondition describes the state of a replica set at a certain point.
*/
export class IoK8sApiAppsV1beta2ReplicaSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of replica set condition.
    */
    'type': string;

    /**
    * The last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ReplicaSetCondition.attributeTypeMap;
    }
}

/**
* ReplicaSetList is a collection of ReplicaSets.
*/
export class IoK8sApiAppsV1beta2ReplicaSetList {
    /**
    * List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    */
    'items': Array<IoK8sApiAppsV1beta2ReplicaSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta2ReplicaSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ReplicaSetList.attributeTypeMap;
    }
}

/**
* ReplicaSetSpec is the specification of a ReplicaSet.
*/
export class IoK8sApiAppsV1beta2ReplicaSetSpec {
    /**
    * Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    */
    'replicas'?: number;
    /**
    * Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    */
    'template'?: IoK8sApiCoreV1PodTemplateSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ReplicaSetSpec.attributeTypeMap;
    }
}

/**
* ReplicaSetStatus represents the current status of a ReplicaSet.
*/
export class IoK8sApiAppsV1beta2ReplicaSetStatus {
    /**
    * Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    */
    'replicas': number;

    /**
    * The number of available replicas (ready for at least minReadySeconds) for this replica set.
    */
    'availableReplicas'?: number;
    /**
    * Represents the latest available observations of a replica set's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1beta2ReplicaSetCondition>;
    /**
    * The number of pods that have labels matching the labels of the pod template of the replicaset.
    */
    'fullyLabeledReplicas'?: number;
    /**
    * ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
    */
    'observedGeneration'?: number;
    /**
    * The number of ready replicas for this replica set.
    */
    'readyReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1beta2ReplicaSetCondition>"
        },
        {
            "name": "fullyLabeledReplicas",
            "baseName": "fullyLabeledReplicas",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ReplicaSetStatus.attributeTypeMap;
    }
}

/**
* Spec to control the desired behavior of daemon set rolling update.
*/
export class IoK8sApiAppsV1beta2RollingUpdateDaemonSet {

    /**
    * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
    */
    'maxUnavailable'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2RollingUpdateDaemonSet.attributeTypeMap;
    }
}

/**
* Spec to control the desired behavior of rolling update.
*/
export class IoK8sApiAppsV1beta2RollingUpdateDeployment {

    /**
    * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
    */
    'maxSurge'?: string | number;
    /**
    * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    */
    'maxUnavailable'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxSurge",
            "baseName": "maxSurge",
            "type": "string | number"
        },
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2RollingUpdateDeployment.attributeTypeMap;
    }
}

/**
* RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
*/
export class IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy {

    /**
    * Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
    */
    'partition'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "partition",
            "baseName": "partition",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy.attributeTypeMap;
    }
}

/**
* Scale represents a scaling request for a resource.
*/
export class IoK8sApiAppsV1beta2Scale {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    */
    'spec'?: IoK8sApiAppsV1beta2ScaleSpec;
    /**
    * current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    */
    'status'?: IoK8sApiAppsV1beta2ScaleStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta2ScaleSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta2ScaleStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2Scale.attributeTypeMap;
    }
}

/**
* ScaleSpec describes the attributes of a scale subresource
*/
export class IoK8sApiAppsV1beta2ScaleSpec {

    /**
    * desired number of instances for the scaled object.
    */
    'replicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ScaleSpec.attributeTypeMap;
    }
}

/**
* ScaleStatus represents the current status of a scale subresource.
*/
export class IoK8sApiAppsV1beta2ScaleStatus {
    /**
    * actual number of observed instances of the scaled object.
    */
    'replicas': number;

    /**
    * label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
    */
    'selector'?: { [key: string]: string; };
    /**
    * label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'targetSelector'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "targetSelector",
            "baseName": "targetSelector",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2ScaleStatus.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of StatefulSet is deprecated by apps/v1/StatefulSet. See the release notes for more information. StatefulSet represents a set of pods with consistent identities. Identities are defined as:  - Network: A single stable DNS and hostname.  - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity.
*/
export class IoK8sApiAppsV1beta2StatefulSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the desired identities of pods in this set.
    */
    'spec'?: IoK8sApiAppsV1beta2StatefulSetSpec;
    /**
    * Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
    */
    'status'?: IoK8sApiAppsV1beta2StatefulSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAppsV1beta2StatefulSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAppsV1beta2StatefulSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2StatefulSet.attributeTypeMap;
    }
}

/**
* StatefulSetCondition describes the state of a statefulset at a certain point.
*/
export class IoK8sApiAppsV1beta2StatefulSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of statefulset condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2StatefulSetCondition.attributeTypeMap;
    }
}

/**
* StatefulSetList is a collection of StatefulSets.
*/
export class IoK8sApiAppsV1beta2StatefulSetList {
    'items': Array<IoK8sApiAppsV1beta2StatefulSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAppsV1beta2StatefulSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2StatefulSetList.attributeTypeMap;
    }
}

/**
* A StatefulSetSpec is the specification of a StatefulSet.
*/
export class IoK8sApiAppsV1beta2StatefulSetSpec {
    /**
    * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.
    */
    'serviceName': string;
    /**
    * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    */
    'podManagementPolicy'?: string;
    /**
    * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    */
    'replicas'?: number;
    /**
    * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
    */
    'updateStrategy'?: IoK8sApiAppsV1beta2StatefulSetUpdateStrategy;
    /**
    * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    */
    'volumeClaimTemplates'?: Array<IoK8sApiCoreV1PersistentVolumeClaim>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "podManagementPolicy",
            "baseName": "podManagementPolicy",
            "type": "string"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "serviceName",
            "baseName": "serviceName",
            "type": "string"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        },
        {
            "name": "updateStrategy",
            "baseName": "updateStrategy",
            "type": "IoK8sApiAppsV1beta2StatefulSetUpdateStrategy"
        },
        {
            "name": "volumeClaimTemplates",
            "baseName": "volumeClaimTemplates",
            "type": "Array<IoK8sApiCoreV1PersistentVolumeClaim>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2StatefulSetSpec.attributeTypeMap;
    }
}

/**
* StatefulSetStatus represents the current state of a StatefulSet.
*/
export class IoK8sApiAppsV1beta2StatefulSetStatus {
    /**
    * replicas is the number of Pods created by the StatefulSet controller.
    */
    'replicas': number;

    /**
    * collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a statefulset's current state.
    */
    'conditions'?: Array<IoK8sApiAppsV1beta2StatefulSetCondition>;
    /**
    * currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    */
    'currentReplicas'?: number;
    /**
    * currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    */
    'currentRevision'?: string;
    /**
    * observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    */
    'observedGeneration'?: number;
    /**
    * readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
    */
    'readyReplicas'?: number;
    /**
    * updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    */
    'updateRevision'?: string;
    /**
    * updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    */
    'updatedReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAppsV1beta2StatefulSetCondition>"
        },
        {
            "name": "currentReplicas",
            "baseName": "currentReplicas",
            "type": "number"
        },
        {
            "name": "currentRevision",
            "baseName": "currentRevision",
            "type": "string"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "updateRevision",
            "baseName": "updateRevision",
            "type": "string"
        },
        {
            "name": "updatedReplicas",
            "baseName": "updatedReplicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2StatefulSetStatus.attributeTypeMap;
    }
}

/**
* StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
*/
export class IoK8sApiAppsV1beta2StatefulSetUpdateStrategy {

    /**
    * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    */
    'rollingUpdate'?: IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy;
    /**
    * Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAppsV1beta2StatefulSetUpdateStrategy.attributeTypeMap;
    }
}

/**
* TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
*/
export class IoK8sApiAuthenticationV1TokenReview {
    /**
    * Spec holds information about the request being evaluated
    */
    'spec': IoK8sApiAuthenticationV1TokenReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request can be authenticated.
    */
    'status'?: IoK8sApiAuthenticationV1TokenReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthenticationV1TokenReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthenticationV1TokenReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1TokenReview.attributeTypeMap;
    }
}

/**
* TokenReviewSpec is a description of the token authentication request.
*/
export class IoK8sApiAuthenticationV1TokenReviewSpec {

    /**
    * Token is the opaque bearer token.
    */
    'token'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "token",
            "baseName": "token",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1TokenReviewSpec.attributeTypeMap;
    }
}

/**
* TokenReviewStatus is the result of the token authentication request.
*/
export class IoK8sApiAuthenticationV1TokenReviewStatus {

    /**
    * Authenticated indicates that the token was associated with a known user.
    */
    'authenticated'?: boolean;
    /**
    * Error indicates that the token couldn't be checked
    */
    'error'?: string;
    /**
    * User is the UserInfo associated with the provided token.
    */
    'user'?: IoK8sApiAuthenticationV1UserInfo;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authenticated",
            "baseName": "authenticated",
            "type": "boolean"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "IoK8sApiAuthenticationV1UserInfo"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1TokenReviewStatus.attributeTypeMap;
    }
}

/**
* UserInfo holds the information about the user needed to implement the user.Info interface.
*/
export class IoK8sApiAuthenticationV1UserInfo {

    /**
    * Any additional information provided by the authenticator.
    */
    'extra'?: { [key: string]: Array<string>; };
    /**
    * The names of groups this user is a part of.
    */
    'groups'?: Array<string>;
    /**
    * A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
    */
    'uid'?: string;
    /**
    * The name that uniquely identifies this user among all active users.
    */
    'username'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "extra",
            "baseName": "extra",
            "type": "{ [key: string]: Array<string>; }"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<string>"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1UserInfo.attributeTypeMap;
    }
}

/**
* TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
*/
export class IoK8sApiAuthenticationV1beta1TokenReview {
    /**
    * Spec holds information about the request being evaluated
    */
    'spec': IoK8sApiAuthenticationV1beta1TokenReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request can be authenticated.
    */
    'status'?: IoK8sApiAuthenticationV1beta1TokenReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthenticationV1beta1TokenReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthenticationV1beta1TokenReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1beta1TokenReview.attributeTypeMap;
    }
}

/**
* TokenReviewSpec is a description of the token authentication request.
*/
export class IoK8sApiAuthenticationV1beta1TokenReviewSpec {

    /**
    * Token is the opaque bearer token.
    */
    'token'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "token",
            "baseName": "token",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1beta1TokenReviewSpec.attributeTypeMap;
    }
}

/**
* TokenReviewStatus is the result of the token authentication request.
*/
export class IoK8sApiAuthenticationV1beta1TokenReviewStatus {

    /**
    * Authenticated indicates that the token was associated with a known user.
    */
    'authenticated'?: boolean;
    /**
    * Error indicates that the token couldn't be checked
    */
    'error'?: string;
    /**
    * User is the UserInfo associated with the provided token.
    */
    'user'?: IoK8sApiAuthenticationV1beta1UserInfo;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authenticated",
            "baseName": "authenticated",
            "type": "boolean"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "IoK8sApiAuthenticationV1beta1UserInfo"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1beta1TokenReviewStatus.attributeTypeMap;
    }
}

/**
* UserInfo holds the information about the user needed to implement the user.Info interface.
*/
export class IoK8sApiAuthenticationV1beta1UserInfo {

    /**
    * Any additional information provided by the authenticator.
    */
    'extra'?: { [key: string]: Array<string>; };
    /**
    * The names of groups this user is a part of.
    */
    'groups'?: Array<string>;
    /**
    * A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
    */
    'uid'?: string;
    /**
    * The name that uniquely identifies this user among all active users.
    */
    'username'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "extra",
            "baseName": "extra",
            "type": "{ [key: string]: Array<string>; }"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<string>"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthenticationV1beta1UserInfo.attributeTypeMap;
    }
}

/**
* LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
*/
export class IoK8sApiAuthorizationV1LocalSubjectAccessReview {
    /**
    * Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
    */
    'spec': IoK8sApiAuthorizationV1SubjectAccessReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request is allowed or not
    */
    'status'?: IoK8sApiAuthorizationV1SubjectAccessReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1SubjectAccessReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1SubjectAccessReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1LocalSubjectAccessReview.attributeTypeMap;
    }
}

/**
* NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
*/
export class IoK8sApiAuthorizationV1NonResourceAttributes {

    /**
    * Path is the URL path of the request
    */
    'path'?: string;
    /**
    * Verb is the standard HTTP verb
    */
    'verb'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "verb",
            "baseName": "verb",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1NonResourceAttributes.attributeTypeMap;
    }
}

/**
* NonResourceRule holds information that describes a rule for the non-resource
*/
export class IoK8sApiAuthorizationV1NonResourceRule {
    /**
    * Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.
    */
    'verbs': Array<string>;

    /**
    * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.
    */
    'nonResourceURLs'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nonResourceURLs",
            "baseName": "nonResourceURLs",
            "type": "Array<string>"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1NonResourceRule.attributeTypeMap;
    }
}

/**
* ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
*/
export class IoK8sApiAuthorizationV1ResourceAttributes {

    /**
    * Group is the API Group of the Resource.  \"*\" means all.
    */
    'group'?: string;
    /**
    * Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.
    */
    'name'?: string;
    /**
    * Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
    */
    'namespace'?: string;
    /**
    * Resource is one of the existing resource types.  \"*\" means all.
    */
    'resource'?: string;
    /**
    * Subresource is one of the existing resource types.  \"\" means none.
    */
    'subresource'?: string;
    /**
    * Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.
    */
    'verb'?: string;
    /**
    * Version is the API Version of the Resource.  \"*\" means all.
    */
    'version'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        },
        {
            "name": "resource",
            "baseName": "resource",
            "type": "string"
        },
        {
            "name": "subresource",
            "baseName": "subresource",
            "type": "string"
        },
        {
            "name": "verb",
            "baseName": "verb",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1ResourceAttributes.attributeTypeMap;
    }
}

/**
* ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
*/
export class IoK8sApiAuthorizationV1ResourceRule {
    /**
    * Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.
    */
    'verbs': Array<string>;

    /**
    * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.
    */
    'apiGroups'?: Array<string>;
    /**
    * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.
    */
    'resourceNames'?: Array<string>;
    /**
    * Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.  \"*_/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.
    */
    'resources'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroups",
            "baseName": "apiGroups",
            "type": "Array<string>"
        },
        {
            "name": "resourceNames",
            "baseName": "resourceNames",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<string>"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1ResourceRule.attributeTypeMap;
    }
}

/**
* SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action
*/
export class IoK8sApiAuthorizationV1SelfSubjectAccessReview {
    /**
    * Spec holds information about the request being evaluated.  user and groups must be empty
    */
    'spec': IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request is allowed or not
    */
    'status'?: IoK8sApiAuthorizationV1SubjectAccessReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1SubjectAccessReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SelfSubjectAccessReview.attributeTypeMap;
    }
}

/**
* SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
*/
export class IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec {

    /**
    * NonResourceAttributes describes information for a non-resource access request
    */
    'nonResourceAttributes'?: IoK8sApiAuthorizationV1NonResourceAttributes;
    /**
    * ResourceAuthorizationAttributes describes information for a resource access request
    */
    'resourceAttributes'?: IoK8sApiAuthorizationV1ResourceAttributes;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nonResourceAttributes",
            "baseName": "nonResourceAttributes",
            "type": "IoK8sApiAuthorizationV1NonResourceAttributes"
        },
        {
            "name": "resourceAttributes",
            "baseName": "resourceAttributes",
            "type": "IoK8sApiAuthorizationV1ResourceAttributes"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec.attributeTypeMap;
    }
}

/**
* SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
*/
export class IoK8sApiAuthorizationV1SelfSubjectRulesReview {
    /**
    * Spec holds information about the request being evaluated.
    */
    'spec': IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates the set of actions a user can perform.
    */
    'status'?: IoK8sApiAuthorizationV1SubjectRulesReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1SubjectRulesReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SelfSubjectRulesReview.attributeTypeMap;
    }
}

export class IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec {

    /**
    * Namespace to evaluate rules for. Required.
    */
    'namespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec.attributeTypeMap;
    }
}

/**
* SubjectAccessReview checks whether or not a user or group can perform an action.
*/
export class IoK8sApiAuthorizationV1SubjectAccessReview {
    /**
    * Spec holds information about the request being evaluated
    */
    'spec': IoK8sApiAuthorizationV1SubjectAccessReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request is allowed or not
    */
    'status'?: IoK8sApiAuthorizationV1SubjectAccessReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1SubjectAccessReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1SubjectAccessReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SubjectAccessReview.attributeTypeMap;
    }
}

/**
* SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
*/
export class IoK8sApiAuthorizationV1SubjectAccessReviewSpec {

    /**
    * Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
    */
    'extra'?: { [key: string]: Array<string>; };
    /**
    * Groups is the groups you're testing for.
    */
    'groups'?: Array<string>;
    /**
    * NonResourceAttributes describes information for a non-resource access request
    */
    'nonResourceAttributes'?: IoK8sApiAuthorizationV1NonResourceAttributes;
    /**
    * ResourceAuthorizationAttributes describes information for a resource access request
    */
    'resourceAttributes'?: IoK8sApiAuthorizationV1ResourceAttributes;
    /**
    * UID information about the requesting user.
    */
    'uid'?: string;
    /**
    * User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "extra",
            "baseName": "extra",
            "type": "{ [key: string]: Array<string>; }"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<string>"
        },
        {
            "name": "nonResourceAttributes",
            "baseName": "nonResourceAttributes",
            "type": "IoK8sApiAuthorizationV1NonResourceAttributes"
        },
        {
            "name": "resourceAttributes",
            "baseName": "resourceAttributes",
            "type": "IoK8sApiAuthorizationV1ResourceAttributes"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SubjectAccessReviewSpec.attributeTypeMap;
    }
}

/**
* SubjectAccessReviewStatus
*/
export class IoK8sApiAuthorizationV1SubjectAccessReviewStatus {
    /**
    * Allowed is required. True if the action would be allowed, false otherwise.
    */
    'allowed': boolean;

    /**
    * Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
    */
    'denied'?: boolean;
    /**
    * EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
    */
    'evaluationError'?: string;
    /**
    * Reason is optional.  It indicates why a request was allowed or denied.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowed",
            "baseName": "allowed",
            "type": "boolean"
        },
        {
            "name": "denied",
            "baseName": "denied",
            "type": "boolean"
        },
        {
            "name": "evaluationError",
            "baseName": "evaluationError",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SubjectAccessReviewStatus.attributeTypeMap;
    }
}

/**
* SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
*/
export class IoK8sApiAuthorizationV1SubjectRulesReviewStatus {
    /**
    * Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
    */
    'incomplete': boolean;
    /**
    * NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    */
    'nonResourceRules': Array<IoK8sApiAuthorizationV1NonResourceRule>;
    /**
    * ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    */
    'resourceRules': Array<IoK8sApiAuthorizationV1ResourceRule>;

    /**
    * EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
    */
    'evaluationError'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "evaluationError",
            "baseName": "evaluationError",
            "type": "string"
        },
        {
            "name": "incomplete",
            "baseName": "incomplete",
            "type": "boolean"
        },
        {
            "name": "nonResourceRules",
            "baseName": "nonResourceRules",
            "type": "Array<IoK8sApiAuthorizationV1NonResourceRule>"
        },
        {
            "name": "resourceRules",
            "baseName": "resourceRules",
            "type": "Array<IoK8sApiAuthorizationV1ResourceRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1SubjectRulesReviewStatus.attributeTypeMap;
    }
}

/**
* LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
*/
export class IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview {
    /**
    * Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
    */
    'spec': IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request is allowed or not
    */
    'status'?: IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview.attributeTypeMap;
    }
}

/**
* NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
*/
export class IoK8sApiAuthorizationV1beta1NonResourceAttributes {

    /**
    * Path is the URL path of the request
    */
    'path'?: string;
    /**
    * Verb is the standard HTTP verb
    */
    'verb'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "verb",
            "baseName": "verb",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1NonResourceAttributes.attributeTypeMap;
    }
}

/**
* NonResourceRule holds information that describes a rule for the non-resource
*/
export class IoK8sApiAuthorizationV1beta1NonResourceRule {
    /**
    * Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.
    */
    'verbs': Array<string>;

    /**
    * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.
    */
    'nonResourceURLs'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nonResourceURLs",
            "baseName": "nonResourceURLs",
            "type": "Array<string>"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1NonResourceRule.attributeTypeMap;
    }
}

/**
* ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
*/
export class IoK8sApiAuthorizationV1beta1ResourceAttributes {

    /**
    * Group is the API Group of the Resource.  \"*\" means all.
    */
    'group'?: string;
    /**
    * Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.
    */
    'name'?: string;
    /**
    * Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
    */
    'namespace'?: string;
    /**
    * Resource is one of the existing resource types.  \"*\" means all.
    */
    'resource'?: string;
    /**
    * Subresource is one of the existing resource types.  \"\" means none.
    */
    'subresource'?: string;
    /**
    * Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.
    */
    'verb'?: string;
    /**
    * Version is the API Version of the Resource.  \"*\" means all.
    */
    'version'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        },
        {
            "name": "resource",
            "baseName": "resource",
            "type": "string"
        },
        {
            "name": "subresource",
            "baseName": "subresource",
            "type": "string"
        },
        {
            "name": "verb",
            "baseName": "verb",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1ResourceAttributes.attributeTypeMap;
    }
}

/**
* ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
*/
export class IoK8sApiAuthorizationV1beta1ResourceRule {
    /**
    * Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.
    */
    'verbs': Array<string>;

    /**
    * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.
    */
    'apiGroups'?: Array<string>;
    /**
    * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.
    */
    'resourceNames'?: Array<string>;
    /**
    * Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.  \"*_/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.
    */
    'resources'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroups",
            "baseName": "apiGroups",
            "type": "Array<string>"
        },
        {
            "name": "resourceNames",
            "baseName": "resourceNames",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<string>"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1ResourceRule.attributeTypeMap;
    }
}

/**
* SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action
*/
export class IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview {
    /**
    * Spec holds information about the request being evaluated.  user and groups must be empty
    */
    'spec': IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request is allowed or not
    */
    'status'?: IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview.attributeTypeMap;
    }
}

/**
* SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
*/
export class IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec {

    /**
    * NonResourceAttributes describes information for a non-resource access request
    */
    'nonResourceAttributes'?: IoK8sApiAuthorizationV1beta1NonResourceAttributes;
    /**
    * ResourceAuthorizationAttributes describes information for a resource access request
    */
    'resourceAttributes'?: IoK8sApiAuthorizationV1beta1ResourceAttributes;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nonResourceAttributes",
            "baseName": "nonResourceAttributes",
            "type": "IoK8sApiAuthorizationV1beta1NonResourceAttributes"
        },
        {
            "name": "resourceAttributes",
            "baseName": "resourceAttributes",
            "type": "IoK8sApiAuthorizationV1beta1ResourceAttributes"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec.attributeTypeMap;
    }
}

/**
* SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
*/
export class IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview {
    /**
    * Spec holds information about the request being evaluated.
    */
    'spec': IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates the set of actions a user can perform.
    */
    'status'?: IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview.attributeTypeMap;
    }
}

export class IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec {

    /**
    * Namespace to evaluate rules for. Required.
    */
    'namespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec.attributeTypeMap;
    }
}

/**
* SubjectAccessReview checks whether or not a user or group can perform an action.
*/
export class IoK8sApiAuthorizationV1beta1SubjectAccessReview {
    /**
    * Spec holds information about the request being evaluated
    */
    'spec': IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status is filled in by the server and indicates whether the request is allowed or not
    */
    'status'?: IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SubjectAccessReview.attributeTypeMap;
    }
}

/**
* SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
*/
export class IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec {

    /**
    * Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
    */
    'extra'?: { [key: string]: Array<string>; };
    /**
    * Groups is the groups you're testing for.
    */
    'group'?: Array<string>;
    /**
    * NonResourceAttributes describes information for a non-resource access request
    */
    'nonResourceAttributes'?: IoK8sApiAuthorizationV1beta1NonResourceAttributes;
    /**
    * ResourceAuthorizationAttributes describes information for a resource access request
    */
    'resourceAttributes'?: IoK8sApiAuthorizationV1beta1ResourceAttributes;
    /**
    * UID information about the requesting user.
    */
    'uid'?: string;
    /**
    * User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "extra",
            "baseName": "extra",
            "type": "{ [key: string]: Array<string>; }"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "Array<string>"
        },
        {
            "name": "nonResourceAttributes",
            "baseName": "nonResourceAttributes",
            "type": "IoK8sApiAuthorizationV1beta1NonResourceAttributes"
        },
        {
            "name": "resourceAttributes",
            "baseName": "resourceAttributes",
            "type": "IoK8sApiAuthorizationV1beta1ResourceAttributes"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec.attributeTypeMap;
    }
}

/**
* SubjectAccessReviewStatus
*/
export class IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus {
    /**
    * Allowed is required. True if the action would be allowed, false otherwise.
    */
    'allowed': boolean;

    /**
    * Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
    */
    'denied'?: boolean;
    /**
    * EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
    */
    'evaluationError'?: string;
    /**
    * Reason is optional.  It indicates why a request was allowed or denied.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowed",
            "baseName": "allowed",
            "type": "boolean"
        },
        {
            "name": "denied",
            "baseName": "denied",
            "type": "boolean"
        },
        {
            "name": "evaluationError",
            "baseName": "evaluationError",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus.attributeTypeMap;
    }
}

/**
* SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
*/
export class IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus {
    /**
    * Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
    */
    'incomplete': boolean;
    /**
    * NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    */
    'nonResourceRules': Array<IoK8sApiAuthorizationV1beta1NonResourceRule>;
    /**
    * ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    */
    'resourceRules': Array<IoK8sApiAuthorizationV1beta1ResourceRule>;

    /**
    * EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
    */
    'evaluationError'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "evaluationError",
            "baseName": "evaluationError",
            "type": "string"
        },
        {
            "name": "incomplete",
            "baseName": "incomplete",
            "type": "boolean"
        },
        {
            "name": "nonResourceRules",
            "baseName": "nonResourceRules",
            "type": "Array<IoK8sApiAuthorizationV1beta1NonResourceRule>"
        },
        {
            "name": "resourceRules",
            "baseName": "resourceRules",
            "type": "Array<IoK8sApiAuthorizationV1beta1ResourceRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus.attributeTypeMap;
    }
}

/**
* CrossVersionObjectReference contains enough information to let you identify the referred resource.
*/
export class IoK8sApiAutoscalingV1CrossVersionObjectReference {
    /**
    * Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\"
    */
    'kind': string;
    /**
    * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    */
    'name': string;

    /**
    * API version of the referent
    */
    'apiVersion'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1CrossVersionObjectReference.attributeTypeMap;
    }
}

/**
* configuration of a horizontal pod autoscaler.
*/
export class IoK8sApiAutoscalingV1HorizontalPodAutoscaler {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    */
    'spec'?: IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec;
    /**
    * current information about the autoscaler.
    */
    'status'?: IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1HorizontalPodAutoscaler.attributeTypeMap;
    }
}

/**
* list of horizontal pod autoscaler objects.
*/
export class IoK8sApiAutoscalingV1HorizontalPodAutoscalerList {
    /**
    * list of horizontal pod autoscaler objects.
    */
    'items': Array<IoK8sApiAutoscalingV1HorizontalPodAutoscaler>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAutoscalingV1HorizontalPodAutoscaler>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1HorizontalPodAutoscalerList.attributeTypeMap;
    }
}

/**
* specification of a horizontal pod autoscaler.
*/
export class IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec {
    /**
    * upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
    */
    'maxReplicas': number;
    /**
    * reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
    */
    'scaleTargetRef': IoK8sApiAutoscalingV1CrossVersionObjectReference;

    /**
    * lower limit for the number of pods that can be set by the autoscaler, default 1.
    */
    'minReplicas'?: number;
    /**
    * target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
    */
    'targetCPUUtilizationPercentage'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxReplicas",
            "baseName": "maxReplicas",
            "type": "number"
        },
        {
            "name": "minReplicas",
            "baseName": "minReplicas",
            "type": "number"
        },
        {
            "name": "scaleTargetRef",
            "baseName": "scaleTargetRef",
            "type": "IoK8sApiAutoscalingV1CrossVersionObjectReference"
        },
        {
            "name": "targetCPUUtilizationPercentage",
            "baseName": "targetCPUUtilizationPercentage",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.attributeTypeMap;
    }
}

/**
* current status of a horizontal pod autoscaler
*/
export class IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus {
    /**
    * current number of replicas of pods managed by this autoscaler.
    */
    'currentReplicas': number;
    /**
    * desired number of replicas of pods managed by this autoscaler.
    */
    'desiredReplicas': number;

    /**
    * current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
    */
    'currentCPUUtilizationPercentage'?: number;
    /**
    * last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
    */
    'lastScaleTime'?: string;
    /**
    * most recent generation observed by this autoscaler.
    */
    'observedGeneration'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currentCPUUtilizationPercentage",
            "baseName": "currentCPUUtilizationPercentage",
            "type": "number"
        },
        {
            "name": "currentReplicas",
            "baseName": "currentReplicas",
            "type": "number"
        },
        {
            "name": "desiredReplicas",
            "baseName": "desiredReplicas",
            "type": "number"
        },
        {
            "name": "lastScaleTime",
            "baseName": "lastScaleTime",
            "type": "string"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus.attributeTypeMap;
    }
}

/**
* Scale represents a scaling request for a resource.
*/
export class IoK8sApiAutoscalingV1Scale {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    */
    'spec'?: IoK8sApiAutoscalingV1ScaleSpec;
    /**
    * current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    */
    'status'?: IoK8sApiAutoscalingV1ScaleStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAutoscalingV1ScaleSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAutoscalingV1ScaleStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1Scale.attributeTypeMap;
    }
}

/**
* ScaleSpec describes the attributes of a scale subresource.
*/
export class IoK8sApiAutoscalingV1ScaleSpec {

    /**
    * desired number of instances for the scaled object.
    */
    'replicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1ScaleSpec.attributeTypeMap;
    }
}

/**
* ScaleStatus represents the current status of a scale subresource.
*/
export class IoK8sApiAutoscalingV1ScaleStatus {
    /**
    * actual number of observed instances of the scaled object.
    */
    'replicas': number;

    /**
    * label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
    */
    'selector'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV1ScaleStatus.attributeTypeMap;
    }
}

/**
* CrossVersionObjectReference contains enough information to let you identify the referred resource.
*/
export class IoK8sApiAutoscalingV2beta1CrossVersionObjectReference {
    /**
    * Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\"
    */
    'kind': string;
    /**
    * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    */
    'name': string;

    /**
    * API version of the referent
    */
    'apiVersion'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1CrossVersionObjectReference.attributeTypeMap;
    }
}

/**
* HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
*/
export class IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    */
    'spec'?: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec;
    /**
    * status is the current information about the autoscaler.
    */
    'status'?: IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler.attributeTypeMap;
    }
}

/**
* HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
*/
export class IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition {
    /**
    * status is the status of the condition (True, False, Unknown)
    */
    'status': string;
    /**
    * type describes the current condition
    */
    'type': string;

    /**
    * lastTransitionTime is the last time the condition transitioned from one status to another
    */
    'lastTransitionTime'?: string;
    /**
    * message is a human-readable explanation containing details about the transition
    */
    'message'?: string;
    /**
    * reason is the reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition.attributeTypeMap;
    }
}

/**
* HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
*/
export class IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList {
    /**
    * items is the list of horizontal pod autoscaler objects.
    */
    'items': Array<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * metadata is the standard list metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList.attributeTypeMap;
    }
}

/**
* HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
*/
export class IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec {
    /**
    * maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
    */
    'maxReplicas': number;
    /**
    * scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
    */
    'scaleTargetRef': IoK8sApiAutoscalingV2beta1CrossVersionObjectReference;

    /**
    * metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
    */
    'metrics'?: Array<IoK8sApiAutoscalingV2beta1MetricSpec>;
    /**
    * minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.
    */
    'minReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxReplicas",
            "baseName": "maxReplicas",
            "type": "number"
        },
        {
            "name": "metrics",
            "baseName": "metrics",
            "type": "Array<IoK8sApiAutoscalingV2beta1MetricSpec>"
        },
        {
            "name": "minReplicas",
            "baseName": "minReplicas",
            "type": "number"
        },
        {
            "name": "scaleTargetRef",
            "baseName": "scaleTargetRef",
            "type": "IoK8sApiAutoscalingV2beta1CrossVersionObjectReference"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec.attributeTypeMap;
    }
}

/**
* HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
*/
export class IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus {
    /**
    * conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
    */
    'conditions': Array<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition>;
    /**
    * currentMetrics is the last read state of the metrics used by this autoscaler.
    */
    'currentMetrics': Array<IoK8sApiAutoscalingV2beta1MetricStatus>;
    /**
    * currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
    */
    'currentReplicas': number;
    /**
    * desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
    */
    'desiredReplicas': number;

    /**
    * lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
    */
    'lastScaleTime'?: string;
    /**
    * observedGeneration is the most recent generation observed by this autoscaler.
    */
    'observedGeneration'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition>"
        },
        {
            "name": "currentMetrics",
            "baseName": "currentMetrics",
            "type": "Array<IoK8sApiAutoscalingV2beta1MetricStatus>"
        },
        {
            "name": "currentReplicas",
            "baseName": "currentReplicas",
            "type": "number"
        },
        {
            "name": "desiredReplicas",
            "baseName": "desiredReplicas",
            "type": "number"
        },
        {
            "name": "lastScaleTime",
            "baseName": "lastScaleTime",
            "type": "string"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus.attributeTypeMap;
    }
}

/**
* MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
*/
export class IoK8sApiAutoscalingV2beta1MetricSpec {
    /**
    * type is the type of metric source.  It should match one of the fields below.
    */
    'type': string;

    /**
    * object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
    */
    'object'?: IoK8sApiAutoscalingV2beta1ObjectMetricSource;
    /**
    * pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
    */
    'pods'?: IoK8sApiAutoscalingV2beta1PodsMetricSource;
    /**
    * resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.
    */
    'resource'?: IoK8sApiAutoscalingV2beta1ResourceMetricSource;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "object",
            "baseName": "object",
            "type": "IoK8sApiAutoscalingV2beta1ObjectMetricSource"
        },
        {
            "name": "pods",
            "baseName": "pods",
            "type": "IoK8sApiAutoscalingV2beta1PodsMetricSource"
        },
        {
            "name": "resource",
            "baseName": "resource",
            "type": "IoK8sApiAutoscalingV2beta1ResourceMetricSource"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1MetricSpec.attributeTypeMap;
    }
}

/**
* MetricStatus describes the last-read state of a single metric.
*/
export class IoK8sApiAutoscalingV2beta1MetricStatus {
    /**
    * type is the type of metric source.  It will match one of the fields below.
    */
    'type': string;

    /**
    * object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
    */
    'object'?: IoK8sApiAutoscalingV2beta1ObjectMetricStatus;
    /**
    * pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
    */
    'pods'?: IoK8sApiAutoscalingV2beta1PodsMetricStatus;
    /**
    * resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.
    */
    'resource'?: IoK8sApiAutoscalingV2beta1ResourceMetricStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "object",
            "baseName": "object",
            "type": "IoK8sApiAutoscalingV2beta1ObjectMetricStatus"
        },
        {
            "name": "pods",
            "baseName": "pods",
            "type": "IoK8sApiAutoscalingV2beta1PodsMetricStatus"
        },
        {
            "name": "resource",
            "baseName": "resource",
            "type": "IoK8sApiAutoscalingV2beta1ResourceMetricStatus"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1MetricStatus.attributeTypeMap;
    }
}

/**
* ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
*/
export class IoK8sApiAutoscalingV2beta1ObjectMetricSource {
    /**
    * metricName is the name of the metric in question.
    */
    'metricName': string;
    /**
    * target is the described Kubernetes object.
    */
    'target': IoK8sApiAutoscalingV2beta1CrossVersionObjectReference;
    /**
    * targetValue is the target value of the metric (as a quantity).
    */
    'targetValue': IoK8sApimachineryPkgApiResourceQuantity;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string"
        },
        {
            "name": "target",
            "baseName": "target",
            "type": "IoK8sApiAutoscalingV2beta1CrossVersionObjectReference"
        },
        {
            "name": "targetValue",
            "baseName": "targetValue",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1ObjectMetricSource.attributeTypeMap;
    }
}

/**
* ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
*/
export class IoK8sApiAutoscalingV2beta1ObjectMetricStatus {
    /**
    * currentValue is the current value of the metric (as a quantity).
    */
    'currentValue': IoK8sApimachineryPkgApiResourceQuantity;
    /**
    * metricName is the name of the metric in question.
    */
    'metricName': string;
    /**
    * target is the described Kubernetes object.
    */
    'target': IoK8sApiAutoscalingV2beta1CrossVersionObjectReference;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string"
        },
        {
            "name": "target",
            "baseName": "target",
            "type": "IoK8sApiAutoscalingV2beta1CrossVersionObjectReference"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1ObjectMetricStatus.attributeTypeMap;
    }
}

/**
* PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
*/
export class IoK8sApiAutoscalingV2beta1PodsMetricSource {
    /**
    * metricName is the name of the metric in question
    */
    'metricName': string;
    /**
    * targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
    */
    'targetAverageValue': IoK8sApimachineryPkgApiResourceQuantity;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string"
        },
        {
            "name": "targetAverageValue",
            "baseName": "targetAverageValue",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1PodsMetricSource.attributeTypeMap;
    }
}

/**
* PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
*/
export class IoK8sApiAutoscalingV2beta1PodsMetricStatus {
    /**
    * currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
    */
    'currentAverageValue': IoK8sApimachineryPkgApiResourceQuantity;
    /**
    * metricName is the name of the metric in question
    */
    'metricName': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currentAverageValue",
            "baseName": "currentAverageValue",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1PodsMetricStatus.attributeTypeMap;
    }
}

/**
* ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.
*/
export class IoK8sApiAutoscalingV2beta1ResourceMetricSource {
    /**
    * name is the name of the resource in question.
    */
    'name': string;

    /**
    * targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
    */
    'targetAverageUtilization'?: number;
    /**
    * targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.
    */
    'targetAverageValue'?: IoK8sApimachineryPkgApiResourceQuantity;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "targetAverageUtilization",
            "baseName": "targetAverageUtilization",
            "type": "number"
        },
        {
            "name": "targetAverageValue",
            "baseName": "targetAverageValue",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1ResourceMetricSource.attributeTypeMap;
    }
}

/**
* ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.
*/
export class IoK8sApiAutoscalingV2beta1ResourceMetricStatus {
    /**
    * currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.
    */
    'currentAverageValue': IoK8sApimachineryPkgApiResourceQuantity;
    /**
    * name is the name of the resource in question.
    */
    'name': string;

    /**
    * currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
    */
    'currentAverageUtilization'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currentAverageUtilization",
            "baseName": "currentAverageUtilization",
            "type": "number"
        },
        {
            "name": "currentAverageValue",
            "baseName": "currentAverageValue",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiAutoscalingV2beta1ResourceMetricStatus.attributeTypeMap;
    }
}

/**
* Job represents the configuration of a single job.
*/
export class IoK8sApiBatchV1Job {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiBatchV1JobSpec;
    /**
    * Current status of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiBatchV1JobStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiBatchV1JobSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiBatchV1JobStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1Job.attributeTypeMap;
    }
}

/**
* JobCondition describes current state of a job.
*/
export class IoK8sApiBatchV1JobCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of job condition, Complete or Failed.
    */
    'type': string;

    /**
    * Last time the condition was checked.
    */
    'lastProbeTime'?: string;
    /**
    * Last time the condition transit from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * Human readable message indicating details about last transition.
    */
    'message'?: string;
    /**
    * (brief) reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastProbeTime",
            "baseName": "lastProbeTime",
            "type": "string"
        },
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1JobCondition.attributeTypeMap;
    }
}

/**
* JobList is a collection of jobs.
*/
export class IoK8sApiBatchV1JobList {
    /**
    * items is the list of Jobs.
    */
    'items': Array<IoK8sApiBatchV1Job>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiBatchV1Job>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1JobList.attributeTypeMap;
    }
}

/**
* JobSpec describes how the job execution will look like.
*/
export class IoK8sApiBatchV1JobSpec {
    /**
    * Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
    */
    'activeDeadlineSeconds'?: number;
    /**
    * Specifies the number of retries before marking this job failed. Defaults to 6
    */
    'backoffLimit'?: number;
    /**
    * Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    */
    'completions'?: number;
    /**
    * manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
    */
    'manualSelector'?: boolean;
    /**
    * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    */
    'parallelism'?: number;
    /**
    * A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "activeDeadlineSeconds",
            "baseName": "activeDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "backoffLimit",
            "baseName": "backoffLimit",
            "type": "number"
        },
        {
            "name": "completions",
            "baseName": "completions",
            "type": "number"
        },
        {
            "name": "manualSelector",
            "baseName": "manualSelector",
            "type": "boolean"
        },
        {
            "name": "parallelism",
            "baseName": "parallelism",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1JobSpec.attributeTypeMap;
    }
}

/**
* JobStatus represents the current state of a Job.
*/
export class IoK8sApiBatchV1JobStatus {

    /**
    * The number of actively running pods.
    */
    'active'?: number;
    /**
    * Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
    */
    'completionTime'?: string;
    /**
    * The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    */
    'conditions'?: Array<IoK8sApiBatchV1JobCondition>;
    /**
    * The number of pods which reached phase Failed.
    */
    'failed'?: number;
    /**
    * Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
    */
    'startTime'?: string;
    /**
    * The number of pods which reached phase Succeeded.
    */
    'succeeded'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "number"
        },
        {
            "name": "completionTime",
            "baseName": "completionTime",
            "type": "string"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiBatchV1JobCondition>"
        },
        {
            "name": "failed",
            "baseName": "failed",
            "type": "number"
        },
        {
            "name": "startTime",
            "baseName": "startTime",
            "type": "string"
        },
        {
            "name": "succeeded",
            "baseName": "succeeded",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1JobStatus.attributeTypeMap;
    }
}

/**
* CronJob represents the configuration of a single cron job.
*/
export class IoK8sApiBatchV1beta1CronJob {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiBatchV1beta1CronJobSpec;
    /**
    * Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiBatchV1beta1CronJobStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiBatchV1beta1CronJobSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiBatchV1beta1CronJobStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1beta1CronJob.attributeTypeMap;
    }
}

/**
* CronJobList is a collection of cron jobs.
*/
export class IoK8sApiBatchV1beta1CronJobList {
    /**
    * items is the list of CronJobs.
    */
    'items': Array<IoK8sApiBatchV1beta1CronJob>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiBatchV1beta1CronJob>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1beta1CronJobList.attributeTypeMap;
    }
}

/**
* CronJobSpec describes how the job execution will look like and when it will actually run.
*/
export class IoK8sApiBatchV1beta1CronJobSpec {
    /**
    * Specifies the job that will be created when executing a CronJob.
    */
    'jobTemplate': IoK8sApiBatchV1beta1JobTemplateSpec;
    /**
    * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    */
    'schedule': string;

    /**
    * Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one
    */
    'concurrencyPolicy'?: string;
    /**
    * The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    */
    'failedJobsHistoryLimit'?: number;
    /**
    * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    */
    'startingDeadlineSeconds'?: number;
    /**
    * The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.
    */
    'successfulJobsHistoryLimit'?: number;
    /**
    * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
    */
    'suspend'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "concurrencyPolicy",
            "baseName": "concurrencyPolicy",
            "type": "string"
        },
        {
            "name": "failedJobsHistoryLimit",
            "baseName": "failedJobsHistoryLimit",
            "type": "number"
        },
        {
            "name": "jobTemplate",
            "baseName": "jobTemplate",
            "type": "IoK8sApiBatchV1beta1JobTemplateSpec"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "string"
        },
        {
            "name": "startingDeadlineSeconds",
            "baseName": "startingDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "successfulJobsHistoryLimit",
            "baseName": "successfulJobsHistoryLimit",
            "type": "number"
        },
        {
            "name": "suspend",
            "baseName": "suspend",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1beta1CronJobSpec.attributeTypeMap;
    }
}

/**
* CronJobStatus represents the current state of a cron job.
*/
export class IoK8sApiBatchV1beta1CronJobStatus {

    /**
    * A list of pointers to currently running jobs.
    */
    'active'?: Array<IoK8sApiCoreV1ObjectReference>;
    /**
    * Information when was the last time the job was successfully scheduled.
    */
    'lastScheduleTime'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "Array<IoK8sApiCoreV1ObjectReference>"
        },
        {
            "name": "lastScheduleTime",
            "baseName": "lastScheduleTime",
            "type": "string"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1beta1CronJobStatus.attributeTypeMap;
    }
}

/**
* JobTemplateSpec describes the data a Job should have when created from a template
*/
export class IoK8sApiBatchV1beta1JobTemplateSpec {

    /**
    * Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiBatchV1JobSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiBatchV1JobSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV1beta1JobTemplateSpec.attributeTypeMap;
    }
}

/**
* CronJob represents the configuration of a single cron job.
*/
export class IoK8sApiBatchV2alpha1CronJob {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiBatchV2alpha1CronJobSpec;
    /**
    * Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiBatchV2alpha1CronJobStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiBatchV2alpha1CronJobSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiBatchV2alpha1CronJobStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV2alpha1CronJob.attributeTypeMap;
    }
}

/**
* CronJobList is a collection of cron jobs.
*/
export class IoK8sApiBatchV2alpha1CronJobList {
    /**
    * items is the list of CronJobs.
    */
    'items': Array<IoK8sApiBatchV2alpha1CronJob>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiBatchV2alpha1CronJob>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV2alpha1CronJobList.attributeTypeMap;
    }
}

/**
* CronJobSpec describes how the job execution will look like and when it will actually run.
*/
export class IoK8sApiBatchV2alpha1CronJobSpec {
    /**
    * Specifies the job that will be created when executing a CronJob.
    */
    'jobTemplate': IoK8sApiBatchV2alpha1JobTemplateSpec;
    /**
    * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    */
    'schedule': string;

    /**
    * Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one
    */
    'concurrencyPolicy'?: string;
    /**
    * The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    */
    'failedJobsHistoryLimit'?: number;
    /**
    * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    */
    'startingDeadlineSeconds'?: number;
    /**
    * The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    */
    'successfulJobsHistoryLimit'?: number;
    /**
    * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
    */
    'suspend'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "concurrencyPolicy",
            "baseName": "concurrencyPolicy",
            "type": "string"
        },
        {
            "name": "failedJobsHistoryLimit",
            "baseName": "failedJobsHistoryLimit",
            "type": "number"
        },
        {
            "name": "jobTemplate",
            "baseName": "jobTemplate",
            "type": "IoK8sApiBatchV2alpha1JobTemplateSpec"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "string"
        },
        {
            "name": "startingDeadlineSeconds",
            "baseName": "startingDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "successfulJobsHistoryLimit",
            "baseName": "successfulJobsHistoryLimit",
            "type": "number"
        },
        {
            "name": "suspend",
            "baseName": "suspend",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV2alpha1CronJobSpec.attributeTypeMap;
    }
}

/**
* CronJobStatus represents the current state of a cron job.
*/
export class IoK8sApiBatchV2alpha1CronJobStatus {

    /**
    * A list of pointers to currently running jobs.
    */
    'active'?: Array<IoK8sApiCoreV1ObjectReference>;
    /**
    * Information when was the last time the job was successfully scheduled.
    */
    'lastScheduleTime'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "Array<IoK8sApiCoreV1ObjectReference>"
        },
        {
            "name": "lastScheduleTime",
            "baseName": "lastScheduleTime",
            "type": "string"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV2alpha1CronJobStatus.attributeTypeMap;
    }
}

/**
* JobTemplateSpec describes the data a Job should have when created from a template
*/
export class IoK8sApiBatchV2alpha1JobTemplateSpec {

    /**
    * Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiBatchV1JobSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiBatchV1JobSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiBatchV2alpha1JobTemplateSpec.attributeTypeMap;
    }
}

/**
* Describes a certificate signing request
*/
export class IoK8sApiCertificatesV1beta1CertificateSigningRequest {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * The certificate request itself and any additional information.
    */
    'spec'?: IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec;
    /**
    * Derived information about the request.
    */
    'status'?: IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCertificatesV1beta1CertificateSigningRequest.attributeTypeMap;
    }
}

export class IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition {
    /**
    * request approval state, currently Approved or Denied.
    */
    'type': string;

    /**
    * timestamp for the last update to this condition
    */
    'lastUpdateTime'?: string;
    /**
    * human readable message with details about the request state
    */
    'message'?: string;
    /**
    * brief reason for the request state
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastUpdateTime",
            "baseName": "lastUpdateTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition.attributeTypeMap;
    }
}

export class IoK8sApiCertificatesV1beta1CertificateSigningRequestList {
    'items': Array<IoK8sApiCertificatesV1beta1CertificateSigningRequest>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCertificatesV1beta1CertificateSigningRequest>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCertificatesV1beta1CertificateSigningRequestList.attributeTypeMap;
    }
}

/**
* This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
*/
export class IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec {
    /**
    * Base64-encoded PKCS#10 CSR data
    */
    'request': string;

    /**
    * Extra information about the requesting user. See user.Info interface for details.
    */
    'extra'?: { [key: string]: Array<string>; };
    /**
    * Group information about the requesting user. See user.Info interface for details.
    */
    'groups'?: Array<string>;
    /**
    * UID information about the requesting user. See user.Info interface for details.
    */
    'uid'?: string;
    /**
    * allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
    */
    'usages'?: Array<string>;
    /**
    * Information about the requesting user. See user.Info interface for details.
    */
    'username'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "extra",
            "baseName": "extra",
            "type": "{ [key: string]: Array<string>; }"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<string>"
        },
        {
            "name": "request",
            "baseName": "request",
            "type": "string"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        },
        {
            "name": "usages",
            "baseName": "usages",
            "type": "Array<string>"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec.attributeTypeMap;
    }
}

export class IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus {

    /**
    * If request was approved, the controller will place the issued certificate here.
    */
    'certificate'?: string;
    /**
    * Conditions applied to the request, such as approval or denial.
    */
    'conditions'?: Array<IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "certificate",
            "baseName": "certificate",
            "type": "string"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.attributeTypeMap;
    }
}

/**
* Represents a Persistent Disk resource in AWS.  An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource {
    /**
    * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    */
    'volumeID': string;

    /**
    * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    */
    'fsType'?: string;
    /**
    * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).
    */
    'partition'?: number;
    /**
    * Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "partition",
            "baseName": "partition",
            "type": "number"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "volumeID",
            "baseName": "volumeID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource.attributeTypeMap;
    }
}

/**
* Affinity is a group of affinity scheduling rules.
*/
export class IoK8sApiCoreV1Affinity {

    /**
    * Describes node affinity scheduling rules for the pod.
    */
    'nodeAffinity'?: IoK8sApiCoreV1NodeAffinity;
    /**
    * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    */
    'podAffinity'?: IoK8sApiCoreV1PodAffinity;
    /**
    * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    */
    'podAntiAffinity'?: IoK8sApiCoreV1PodAntiAffinity;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nodeAffinity",
            "baseName": "nodeAffinity",
            "type": "IoK8sApiCoreV1NodeAffinity"
        },
        {
            "name": "podAffinity",
            "baseName": "podAffinity",
            "type": "IoK8sApiCoreV1PodAffinity"
        },
        {
            "name": "podAntiAffinity",
            "baseName": "podAntiAffinity",
            "type": "IoK8sApiCoreV1PodAntiAffinity"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Affinity.attributeTypeMap;
    }
}

/**
* AttachedVolume describes a volume attached to a node
*/
export class IoK8sApiCoreV1AttachedVolume {
    /**
    * DevicePath represents the device path where the volume should be available
    */
    'devicePath': string;
    /**
    * Name of the attached volume
    */
    'name': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "devicePath",
            "baseName": "devicePath",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1AttachedVolume.attributeTypeMap;
    }
}

/**
* AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
*/
export class IoK8sApiCoreV1AzureDiskVolumeSource {
    /**
    * The Name of the data disk in the blob storage
    */
    'diskName': string;
    /**
    * The URI the data disk in the blob storage
    */
    'diskURI': string;

    /**
    * Host Caching mode: None, Read Only, Read Write.
    */
    'cachingMode'?: string;
    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    */
    'kind'?: string;
    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "cachingMode",
            "baseName": "cachingMode",
            "type": "string"
        },
        {
            "name": "diskName",
            "baseName": "diskName",
            "type": "string"
        },
        {
            "name": "diskURI",
            "baseName": "diskURI",
            "type": "string"
        },
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1AzureDiskVolumeSource.attributeTypeMap;
    }
}

/**
* AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
*/
export class IoK8sApiCoreV1AzureFilePersistentVolumeSource {
    /**
    * the name of secret that contains Azure Storage Account Name and Key
    */
    'secretName': string;
    /**
    * Share Name
    */
    'shareName': string;

    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;
    /**
    * the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
    */
    'secretNamespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretName",
            "baseName": "secretName",
            "type": "string"
        },
        {
            "name": "secretNamespace",
            "baseName": "secretNamespace",
            "type": "string"
        },
        {
            "name": "shareName",
            "baseName": "shareName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1AzureFilePersistentVolumeSource.attributeTypeMap;
    }
}

/**
* AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
*/
export class IoK8sApiCoreV1AzureFileVolumeSource {
    /**
    * the name of secret that contains Azure Storage Account Name and Key
    */
    'secretName': string;
    /**
    * Share Name
    */
    'shareName': string;

    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretName",
            "baseName": "secretName",
            "type": "string"
        },
        {
            "name": "shareName",
            "baseName": "shareName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1AzureFileVolumeSource.attributeTypeMap;
    }
}

/**
* Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
*/
export class IoK8sApiCoreV1Binding {
    /**
    * The target object that you want to bind to the standard object.
    */
    'target': IoK8sApiCoreV1ObjectReference;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "target",
            "baseName": "target",
            "type": "IoK8sApiCoreV1ObjectReference"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Binding.attributeTypeMap;
    }
}

/**
* Represents storage that is managed by an external CSI volume driver
*/
export class IoK8sApiCoreV1CSIPersistentVolumeSource {
    /**
    * Driver is the name of the driver to use for this volume. Required.
    */
    'driver': string;
    /**
    * VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
    */
    'volumeHandle': string;

    /**
    * Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "driver",
            "baseName": "driver",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "volumeHandle",
            "baseName": "volumeHandle",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1CSIPersistentVolumeSource.attributeTypeMap;
    }
}

/**
* Adds and removes POSIX capabilities from running containers.
*/
export class IoK8sApiCoreV1Capabilities {

    /**
    * Added capabilities
    */
    'add'?: Array<string>;
    /**
    * Removed capabilities
    */
    'drop'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "add",
            "baseName": "add",
            "type": "Array<string>"
        },
        {
            "name": "drop",
            "baseName": "drop",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Capabilities.attributeTypeMap;
    }
}

/**
* Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
*/
export class IoK8sApiCoreV1CephFSPersistentVolumeSource {
    /**
    * Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'monitors': Array<string>;

    /**
    * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    */
    'path'?: string;
    /**
    * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'readOnly'?: boolean;
    /**
    * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'secretFile'?: string;
    /**
    * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'secretRef'?: IoK8sApiCoreV1SecretReference;
    /**
    * Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "monitors",
            "baseName": "monitors",
            "type": "Array<string>"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretFile",
            "baseName": "secretFile",
            "type": "string"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1SecretReference"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1CephFSPersistentVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
*/
export class IoK8sApiCoreV1CephFSVolumeSource {
    /**
    * Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'monitors': Array<string>;

    /**
    * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    */
    'path'?: string;
    /**
    * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'readOnly'?: boolean;
    /**
    * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'secretFile'?: string;
    /**
    * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'secretRef'?: IoK8sApiCoreV1LocalObjectReference;
    /**
    * Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "monitors",
            "baseName": "monitors",
            "type": "Array<string>"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretFile",
            "baseName": "secretFile",
            "type": "string"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1LocalObjectReference"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1CephFSVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1CinderVolumeSource {
    /**
    * volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    */
    'volumeID': string;

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    */
    'fsType'?: string;
    /**
    * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "volumeID",
            "baseName": "volumeID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1CinderVolumeSource.attributeTypeMap;
    }
}

/**
* ClientIPConfig represents the configurations of Client IP based session affinity.
*/
export class IoK8sApiCoreV1ClientIPConfig {

    /**
    * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).
    */
    'timeoutSeconds'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timeoutSeconds",
            "baseName": "timeoutSeconds",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ClientIPConfig.attributeTypeMap;
    }
}

/**
* Information about the condition of a component.
*/
export class IoK8sApiCoreV1ComponentCondition {
    /**
    * Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".
    */
    'status': string;
    /**
    * Type of condition for a component. Valid value: \"Healthy\"
    */
    'type': string;

    /**
    * Condition error code for a component. For example, a health check error code.
    */
    'error'?: string;
    /**
    * Message about the condition for a component. For example, information about a health check.
    */
    'message'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ComponentCondition.attributeTypeMap;
    }
}

/**
* ComponentStatus (and ComponentStatusList) holds the cluster validation info.
*/
export class IoK8sApiCoreV1ComponentStatus {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * List of component conditions observed
    */
    'conditions'?: Array<IoK8sApiCoreV1ComponentCondition>;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiCoreV1ComponentCondition>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ComponentStatus.attributeTypeMap;
    }
}

/**
* Status of all the conditions for the component as a list of ComponentStatus objects.
*/
export class IoK8sApiCoreV1ComponentStatusList {
    /**
    * List of ComponentStatus objects.
    */
    'items': Array<IoK8sApiCoreV1ComponentStatus>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1ComponentStatus>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ComponentStatusList.attributeTypeMap;
    }
}

/**
* ConfigMap holds configuration data for pods to consume.
*/
export class IoK8sApiCoreV1ConfigMap {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'.
    */
    'data'?: { [key: string]: string; };
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ConfigMap.attributeTypeMap;
    }
}

/**
* ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.  The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
*/
export class IoK8sApiCoreV1ConfigMapEnvSource {

    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Specify whether the ConfigMap must be defined
    */
    'optional'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ConfigMapEnvSource.attributeTypeMap;
    }
}

/**
* Selects a key from a ConfigMap.
*/
export class IoK8sApiCoreV1ConfigMapKeySelector {
    /**
    * The key to select.
    */
    'key': string;

    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Specify whether the ConfigMap or it's key must be defined
    */
    'optional'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ConfigMapKeySelector.attributeTypeMap;
    }
}

/**
* ConfigMapList is a resource containing a list of ConfigMap objects.
*/
export class IoK8sApiCoreV1ConfigMapList {
    /**
    * Items is the list of ConfigMaps.
    */
    'items': Array<IoK8sApiCoreV1ConfigMap>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1ConfigMap>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ConfigMapList.attributeTypeMap;
    }
}

/**
* Adapts a ConfigMap into a projected volume.  The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
*/
export class IoK8sApiCoreV1ConfigMapProjection {

    /**
    * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    */
    'items'?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Specify whether the ConfigMap or it's keys must be defined
    */
    'optional'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1KeyToPath>"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ConfigMapProjection.attributeTypeMap;
    }
}

/**
* Adapts a ConfigMap into a volume.  The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1ConfigMapVolumeSource {

    /**
    * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    */
    'defaultMode'?: number;
    /**
    * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    */
    'items'?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Specify whether the ConfigMap or it's keys must be defined
    */
    'optional'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "defaultMode",
            "baseName": "defaultMode",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1KeyToPath>"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ConfigMapVolumeSource.attributeTypeMap;
    }
}

/**
* A single application container that you want to run within a pod.
*/
export class IoK8sApiCoreV1Container {
    /**
    * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    */
    'name': string;

    /**
    * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    */
    'args'?: Array<string>;
    /**
    * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    */
    'command'?: Array<string>;
    /**
    * List of environment variables to set in the container. Cannot be updated.
    */
    'env'?: Array<IoK8sApiCoreV1EnvVar>;
    /**
    * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    */
    'envFrom'?: Array<IoK8sApiCoreV1EnvFromSource>;
    /**
    * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    */
    'image'?: string;
    /**
    * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    */
    'imagePullPolicy'?: string;
    /**
    * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
    */
    'lifecycle'?: IoK8sApiCoreV1Lifecycle;
    /**
    * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    */
    'livenessProbe'?: IoK8sApiCoreV1Probe;
    /**
    * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.
    */
    'ports'?: Array<IoK8sApiCoreV1ContainerPort>;
    /**
    * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    */
    'readinessProbe'?: IoK8sApiCoreV1Probe;
    /**
    * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    */
    'resources'?: IoK8sApiCoreV1ResourceRequirements;
    /**
    * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    */
    'securityContext'?: IoK8sApiCoreV1SecurityContext;
    /**
    * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    */
    'stdin'?: boolean;
    /**
    * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    */
    'stdinOnce'?: boolean;
    /**
    * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    */
    'terminationMessagePath'?: string;
    /**
    * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    */
    'terminationMessagePolicy'?: string;
    /**
    * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    */
    'tty'?: boolean;
    /**
    * volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.
    */
    'volumeDevices'?: Array<IoK8sApiCoreV1VolumeDevice>;
    /**
    * Pod volumes to mount into the container's filesystem. Cannot be updated.
    */
    'volumeMounts'?: Array<IoK8sApiCoreV1VolumeMount>;
    /**
    * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    */
    'workingDir'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "args",
            "baseName": "args",
            "type": "Array<string>"
        },
        {
            "name": "command",
            "baseName": "command",
            "type": "Array<string>"
        },
        {
            "name": "env",
            "baseName": "env",
            "type": "Array<IoK8sApiCoreV1EnvVar>"
        },
        {
            "name": "envFrom",
            "baseName": "envFrom",
            "type": "Array<IoK8sApiCoreV1EnvFromSource>"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "imagePullPolicy",
            "baseName": "imagePullPolicy",
            "type": "string"
        },
        {
            "name": "lifecycle",
            "baseName": "lifecycle",
            "type": "IoK8sApiCoreV1Lifecycle"
        },
        {
            "name": "livenessProbe",
            "baseName": "livenessProbe",
            "type": "IoK8sApiCoreV1Probe"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<IoK8sApiCoreV1ContainerPort>"
        },
        {
            "name": "readinessProbe",
            "baseName": "readinessProbe",
            "type": "IoK8sApiCoreV1Probe"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "IoK8sApiCoreV1ResourceRequirements"
        },
        {
            "name": "securityContext",
            "baseName": "securityContext",
            "type": "IoK8sApiCoreV1SecurityContext"
        },
        {
            "name": "stdin",
            "baseName": "stdin",
            "type": "boolean"
        },
        {
            "name": "stdinOnce",
            "baseName": "stdinOnce",
            "type": "boolean"
        },
        {
            "name": "terminationMessagePath",
            "baseName": "terminationMessagePath",
            "type": "string"
        },
        {
            "name": "terminationMessagePolicy",
            "baseName": "terminationMessagePolicy",
            "type": "string"
        },
        {
            "name": "tty",
            "baseName": "tty",
            "type": "boolean"
        },
        {
            "name": "volumeDevices",
            "baseName": "volumeDevices",
            "type": "Array<IoK8sApiCoreV1VolumeDevice>"
        },
        {
            "name": "volumeMounts",
            "baseName": "volumeMounts",
            "type": "Array<IoK8sApiCoreV1VolumeMount>"
        },
        {
            "name": "workingDir",
            "baseName": "workingDir",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Container.attributeTypeMap;
    }
}

/**
* Describe a container image
*/
export class IoK8sApiCoreV1ContainerImage {
    /**
    * Names by which this image is known. e.g. [\"gcr.io/google_containers/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]
    */
    'names': Array<string>;

    /**
    * The size of the image in bytes.
    */
    'sizeBytes'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "names",
            "baseName": "names",
            "type": "Array<string>"
        },
        {
            "name": "sizeBytes",
            "baseName": "sizeBytes",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ContainerImage.attributeTypeMap;
    }
}

/**
* ContainerPort represents a network port in a single container.
*/
export class IoK8sApiCoreV1ContainerPort {
    /**
    * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    */
    'containerPort': number;

    /**
    * What host IP to bind the external port to.
    */
    'hostIP'?: string;
    /**
    * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    */
    'hostPort'?: number;
    /**
    * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    */
    'name'?: string;
    /**
    * Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".
    */
    'protocol'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "containerPort",
            "baseName": "containerPort",
            "type": "number"
        },
        {
            "name": "hostIP",
            "baseName": "hostIP",
            "type": "string"
        },
        {
            "name": "hostPort",
            "baseName": "hostPort",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ContainerPort.attributeTypeMap;
    }
}

/**
* ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
*/
export class IoK8sApiCoreV1ContainerState {

    /**
    * Details about a running container
    */
    'running'?: IoK8sApiCoreV1ContainerStateRunning;
    /**
    * Details about a terminated container
    */
    'terminated'?: IoK8sApiCoreV1ContainerStateTerminated;
    /**
    * Details about a waiting container
    */
    'waiting'?: IoK8sApiCoreV1ContainerStateWaiting;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "running",
            "baseName": "running",
            "type": "IoK8sApiCoreV1ContainerStateRunning"
        },
        {
            "name": "terminated",
            "baseName": "terminated",
            "type": "IoK8sApiCoreV1ContainerStateTerminated"
        },
        {
            "name": "waiting",
            "baseName": "waiting",
            "type": "IoK8sApiCoreV1ContainerStateWaiting"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ContainerState.attributeTypeMap;
    }
}

/**
* ContainerStateRunning is a running state of a container.
*/
export class IoK8sApiCoreV1ContainerStateRunning {

    /**
    * Time at which the container was last (re-)started
    */
    'startedAt'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "startedAt",
            "baseName": "startedAt",
            "type": "string"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ContainerStateRunning.attributeTypeMap;
    }
}

/**
* ContainerStateTerminated is a terminated state of a container.
*/
export class IoK8sApiCoreV1ContainerStateTerminated {
    /**
    * Exit status from the last termination of the container
    */
    'exitCode': number;

    /**
    * Container's ID in the format 'docker://<container_id>'
    */
    'containerID'?: string;
    /**
    * Time at which the container last terminated
    */
    'finishedAt'?: string;
    /**
    * Message regarding the last termination of the container
    */
    'message'?: string;
    /**
    * (brief) reason from the last termination of the container
    */
    'reason'?: string;
    /**
    * Signal from the last termination of the container
    */
    'signal'?: number;
    /**
    * Time at which previous execution of the container started
    */
    'startedAt'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "containerID",
            "baseName": "containerID",
            "type": "string"
        },
        {
            "name": "exitCode",
            "baseName": "exitCode",
            "type": "number"
        },
        {
            "name": "finishedAt",
            "baseName": "finishedAt",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "signal",
            "baseName": "signal",
            "type": "number"
        },
        {
            "name": "startedAt",
            "baseName": "startedAt",
            "type": "string"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ContainerStateTerminated.attributeTypeMap;
    }
}

/**
* ContainerStateWaiting is a waiting state of a container.
*/
export class IoK8sApiCoreV1ContainerStateWaiting {

    /**
    * Message regarding why the container is not yet running.
    */
    'message'?: string;
    /**
    * (brief) reason the container is not yet running.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ContainerStateWaiting.attributeTypeMap;
    }
}

/**
* ContainerStatus contains details for the current status of this container.
*/
export class IoK8sApiCoreV1ContainerStatus {
    /**
    * The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
    */
    'image': string;
    /**
    * ImageID of the container's image.
    */
    'imageID': string;
    /**
    * This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
    */
    'name': string;
    /**
    * Specifies whether the container has passed its readiness probe.
    */
    'ready': boolean;
    /**
    * The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
    */
    'restartCount': number;

    /**
    * Container's ID in the format 'docker://<container_id>'.
    */
    'containerID'?: string;
    /**
    * Details about the container's last termination condition.
    */
    'lastState'?: IoK8sApiCoreV1ContainerState;
    /**
    * Details about the container's current condition.
    */
    'state'?: IoK8sApiCoreV1ContainerState;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "containerID",
            "baseName": "containerID",
            "type": "string"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "imageID",
            "baseName": "imageID",
            "type": "string"
        },
        {
            "name": "lastState",
            "baseName": "lastState",
            "type": "IoK8sApiCoreV1ContainerState"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "ready",
            "baseName": "ready",
            "type": "boolean"
        },
        {
            "name": "restartCount",
            "baseName": "restartCount",
            "type": "number"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "IoK8sApiCoreV1ContainerState"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ContainerStatus.attributeTypeMap;
    }
}

/**
* DaemonEndpoint contains information about a single Daemon endpoint.
*/
export class IoK8sApiCoreV1DaemonEndpoint {
    /**
    * Port number of the given endpoint.
    */
    'port': number;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "port",
            "baseName": "Port",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1DaemonEndpoint.attributeTypeMap;
    }
}

/**
* Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
*/
export class IoK8sApiCoreV1DownwardAPIProjection {

    /**
    * Items is a list of DownwardAPIVolume file
    */
    'items'?: Array<IoK8sApiCoreV1DownwardAPIVolumeFile>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1DownwardAPIVolumeFile>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1DownwardAPIProjection.attributeTypeMap;
    }
}

/**
* DownwardAPIVolumeFile represents information to create the file containing the pod field
*/
export class IoK8sApiCoreV1DownwardAPIVolumeFile {
    /**
    * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    */
    'path': string;

    /**
    * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    */
    'fieldRef'?: IoK8sApiCoreV1ObjectFieldSelector;
    /**
    * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    */
    'mode'?: number;
    /**
    * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    */
    'resourceFieldRef'?: IoK8sApiCoreV1ResourceFieldSelector;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fieldRef",
            "baseName": "fieldRef",
            "type": "IoK8sApiCoreV1ObjectFieldSelector"
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "number"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "resourceFieldRef",
            "baseName": "resourceFieldRef",
            "type": "IoK8sApiCoreV1ResourceFieldSelector"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1DownwardAPIVolumeFile.attributeTypeMap;
    }
}

/**
* DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1DownwardAPIVolumeSource {

    /**
    * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    */
    'defaultMode'?: number;
    /**
    * Items is a list of downward API volume file
    */
    'items'?: Array<IoK8sApiCoreV1DownwardAPIVolumeFile>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "defaultMode",
            "baseName": "defaultMode",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1DownwardAPIVolumeFile>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1DownwardAPIVolumeSource.attributeTypeMap;
    }
}

/**
* Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1EmptyDirVolumeSource {

    /**
    * What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    */
    'medium'?: string;
    /**
    * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
    */
    'sizeLimit'?: IoK8sApimachineryPkgApiResourceQuantity;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "medium",
            "baseName": "medium",
            "type": "string"
        },
        {
            "name": "sizeLimit",
            "baseName": "sizeLimit",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EmptyDirVolumeSource.attributeTypeMap;
    }
}

/**
* EndpointAddress is a tuple that describes single IP address.
*/
export class IoK8sApiCoreV1EndpointAddress {
    /**
    * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
    */
    'ip': string;

    /**
    * The Hostname of this endpoint
    */
    'hostname'?: string;
    /**
    * Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
    */
    'nodeName'?: string;
    /**
    * Reference to object providing the endpoint.
    */
    'targetRef'?: IoK8sApiCoreV1ObjectReference;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        },
        {
            "name": "nodeName",
            "baseName": "nodeName",
            "type": "string"
        },
        {
            "name": "targetRef",
            "baseName": "targetRef",
            "type": "IoK8sApiCoreV1ObjectReference"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EndpointAddress.attributeTypeMap;
    }
}

/**
* EndpointPort is a tuple that describes a single port.
*/
export class IoK8sApiCoreV1EndpointPort {
    /**
    * The port number of the endpoint.
    */
    'port': number;

    /**
    * The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.
    */
    'name'?: string;
    /**
    * The IP protocol for this port. Must be UDP or TCP. Default is TCP.
    */
    'protocol'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EndpointPort.attributeTypeMap;
    }
}

/**
* EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:   {     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],     Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]   } The resulting set of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]
*/
export class IoK8sApiCoreV1EndpointSubset {

    /**
    * IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
    */
    'addresses'?: Array<IoK8sApiCoreV1EndpointAddress>;
    /**
    * IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
    */
    'notReadyAddresses'?: Array<IoK8sApiCoreV1EndpointAddress>;
    /**
    * Port numbers available on the related IP addresses.
    */
    'ports'?: Array<IoK8sApiCoreV1EndpointPort>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<IoK8sApiCoreV1EndpointAddress>"
        },
        {
            "name": "notReadyAddresses",
            "baseName": "notReadyAddresses",
            "type": "Array<IoK8sApiCoreV1EndpointAddress>"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<IoK8sApiCoreV1EndpointPort>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EndpointSubset.attributeTypeMap;
    }
}

/**
* Endpoints is a collection of endpoints that implement the actual service. Example:   Name: \"mysvc\",   Subsets: [     {       Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],       Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]     },     {       Addresses: [{\"ip\": \"10.10.3.3\"}],       Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]     },  ]
*/
export class IoK8sApiCoreV1Endpoints {
    /**
    * The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
    */
    'subsets': Array<IoK8sApiCoreV1EndpointSubset>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "subsets",
            "baseName": "subsets",
            "type": "Array<IoK8sApiCoreV1EndpointSubset>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Endpoints.attributeTypeMap;
    }
}

/**
* EndpointsList is a list of endpoints.
*/
export class IoK8sApiCoreV1EndpointsList {
    /**
    * List of endpoints.
    */
    'items': Array<IoK8sApiCoreV1Endpoints>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1Endpoints>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EndpointsList.attributeTypeMap;
    }
}

/**
* EnvFromSource represents the source of a set of ConfigMaps
*/
export class IoK8sApiCoreV1EnvFromSource {

    /**
    * The ConfigMap to select from
    */
    'configMapRef'?: IoK8sApiCoreV1ConfigMapEnvSource;
    /**
    * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    */
    'prefix'?: string;
    /**
    * The Secret to select from
    */
    'secretRef'?: IoK8sApiCoreV1SecretEnvSource;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "configMapRef",
            "baseName": "configMapRef",
            "type": "IoK8sApiCoreV1ConfigMapEnvSource"
        },
        {
            "name": "prefix",
            "baseName": "prefix",
            "type": "string"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1SecretEnvSource"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EnvFromSource.attributeTypeMap;
    }
}

/**
* EnvVar represents an environment variable present in a Container.
*/
export class IoK8sApiCoreV1EnvVar {
    /**
    * Name of the environment variable. Must be a C_IDENTIFIER.
    */
    'name': string;

    /**
    * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".
    */
    'value'?: string;
    /**
    * Source for the environment variable's value. Cannot be used if value is not empty.
    */
    'valueFrom'?: IoK8sApiCoreV1EnvVarSource;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "valueFrom",
            "baseName": "valueFrom",
            "type": "IoK8sApiCoreV1EnvVarSource"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EnvVar.attributeTypeMap;
    }
}

/**
* EnvVarSource represents a source for the value of an EnvVar.
*/
export class IoK8sApiCoreV1EnvVarSource {

    /**
    * Selects a key of a ConfigMap.
    */
    'configMapKeyRef'?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
    * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
    */
    'fieldRef'?: IoK8sApiCoreV1ObjectFieldSelector;
    /**
    * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    */
    'resourceFieldRef'?: IoK8sApiCoreV1ResourceFieldSelector;
    /**
    * Selects a key of a secret in the pod's namespace
    */
    'secretKeyRef'?: IoK8sApiCoreV1SecretKeySelector;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "configMapKeyRef",
            "baseName": "configMapKeyRef",
            "type": "IoK8sApiCoreV1ConfigMapKeySelector"
        },
        {
            "name": "fieldRef",
            "baseName": "fieldRef",
            "type": "IoK8sApiCoreV1ObjectFieldSelector"
        },
        {
            "name": "resourceFieldRef",
            "baseName": "resourceFieldRef",
            "type": "IoK8sApiCoreV1ResourceFieldSelector"
        },
        {
            "name": "secretKeyRef",
            "baseName": "secretKeyRef",
            "type": "IoK8sApiCoreV1SecretKeySelector"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EnvVarSource.attributeTypeMap;
    }
}

/**
* Event is a report of an event somewhere in the cluster.
*/
export class IoK8sApiCoreV1Event {
    /**
    * The object that this event is about.
    */
    'involvedObject': IoK8sApiCoreV1ObjectReference;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    /**
    * What action was taken/failed regarding to the Regarding object.
    */
    'action'?: string;
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * The number of times this event has occurred.
    */
    'count'?: number;
    /**
    * Time when this Event was first observed.
    */
    'eventTime'?: string;
    /**
    * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
    */
    'firstTimestamp'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * The time at which the most recent occurrence of this event was recorded.
    */
    'lastTimestamp'?: string;
    /**
    * A human-readable description of the status of this operation.
    */
    'message'?: string;
    /**
    * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
    */
    'reason'?: string;
    /**
    * Optional secondary object for more complex actions.
    */
    'related'?: IoK8sApiCoreV1ObjectReference;
    /**
    * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
    */
    'reportingComponent'?: string;
    /**
    * ID of the controller instance, e.g. `kubelet-xyzf`.
    */
    'reportingInstance'?: string;
    /**
    * Data about the Event series this event represents or nil if it's a singleton Event.
    */
    'series'?: IoK8sApiCoreV1EventSeries;
    /**
    * The component reporting this event. Should be a short machine understandable string.
    */
    'source'?: IoK8sApiCoreV1EventSource;
    /**
    * Type of this event (Normal, Warning), new types could be added in the future
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        },
        {
            "name": "firstTimestamp",
            "baseName": "firstTimestamp",
            "type": "string"
        },
        {
            "name": "involvedObject",
            "baseName": "involvedObject",
            "type": "IoK8sApiCoreV1ObjectReference"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "lastTimestamp",
            "baseName": "lastTimestamp",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "related",
            "baseName": "related",
            "type": "IoK8sApiCoreV1ObjectReference"
        },
        {
            "name": "reportingComponent",
            "baseName": "reportingComponent",
            "type": "string"
        },
        {
            "name": "reportingInstance",
            "baseName": "reportingInstance",
            "type": "string"
        },
        {
            "name": "series",
            "baseName": "series",
            "type": "IoK8sApiCoreV1EventSeries"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "IoK8sApiCoreV1EventSource"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Event.attributeTypeMap;
    }
}

/**
* EventList is a list of events.
*/
export class IoK8sApiCoreV1EventList {
    /**
    * List of events
    */
    'items': Array<IoK8sApiCoreV1Event>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1Event>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EventList.attributeTypeMap;
    }
}

/**
* EventSeries contain information on series of events, i.e. thing that was/is happening continously for some time.
*/
export class IoK8sApiCoreV1EventSeries {

    /**
    * Number of occurrences in this series up to the last heartbeat time
    */
    'count'?: number;
    /**
    * Time of the last occurence observed
    */
    'lastObservedTime'?: string;
    /**
    * State of this Series: Ongoing or Finished
    */
    'state'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "lastObservedTime",
            "baseName": "lastObservedTime",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EventSeries.attributeTypeMap;
    }
}

/**
* EventSource contains information for an event.
*/
export class IoK8sApiCoreV1EventSource {

    /**
    * Component from which the event is generated.
    */
    'component'?: string;
    /**
    * Node name on which the event is generated.
    */
    'host'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "component",
            "baseName": "component",
            "type": "string"
        },
        {
            "name": "host",
            "baseName": "host",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1EventSource.attributeTypeMap;
    }
}

/**
* ExecAction describes a \"run in container\" action.
*/
export class IoK8sApiCoreV1ExecAction {

    /**
    * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    */
    'command'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "command",
            "baseName": "command",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ExecAction.attributeTypeMap;
    }
}

/**
* Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1FCVolumeSource {

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * Optional: FC target lun number
    */
    'lun'?: number;
    /**
    * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;
    /**
    * Optional: FC target worldwide names (WWNs)
    */
    'targetWWNs'?: Array<string>;
    /**
    * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    */
    'wwids'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "lun",
            "baseName": "lun",
            "type": "number"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "targetWWNs",
            "baseName": "targetWWNs",
            "type": "Array<string>"
        },
        {
            "name": "wwids",
            "baseName": "wwids",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1FCVolumeSource.attributeTypeMap;
    }
}

/**
* FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
*/
export class IoK8sApiCoreV1FlexVolumeSource {
    /**
    * Driver is the name of the driver to use for this volume.
    */
    'driver': string;

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.
    */
    'fsType'?: string;
    /**
    * Optional: Extra command options if any.
    */
    'options'?: { [key: string]: string; };
    /**
    * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;
    /**
    * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    */
    'secretRef'?: IoK8sApiCoreV1LocalObjectReference;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "driver",
            "baseName": "driver",
            "type": "string"
        },
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1LocalObjectReference"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1FlexVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
*/
export class IoK8sApiCoreV1FlockerVolumeSource {

    /**
    * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
    */
    'datasetName'?: string;
    /**
    * UUID of the dataset. This is unique identifier of a Flocker dataset
    */
    'datasetUUID'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "datasetName",
            "baseName": "datasetName",
            "type": "string"
        },
        {
            "name": "datasetUUID",
            "baseName": "datasetUUID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1FlockerVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a Persistent Disk resource in Google Compute Engine.  A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1GCEPersistentDiskVolumeSource {
    /**
    * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    */
    'pdName': string;

    /**
    * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    */
    'fsType'?: string;
    /**
    * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    */
    'partition'?: number;
    /**
    * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "partition",
            "baseName": "partition",
            "type": "number"
        },
        {
            "name": "pdName",
            "baseName": "pdName",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1GCEPersistentDiskVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
*/
export class IoK8sApiCoreV1GitRepoVolumeSource {
    /**
    * Repository URL
    */
    'repository': string;

    /**
    * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    */
    'directory'?: string;
    /**
    * Commit hash for the specified revision.
    */
    'revision'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "directory",
            "baseName": "directory",
            "type": "string"
        },
        {
            "name": "repository",
            "baseName": "repository",
            "type": "string"
        },
        {
            "name": "revision",
            "baseName": "revision",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1GitRepoVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
*/
export class IoK8sApiCoreV1GlusterfsVolumeSource {
    /**
    * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
    */
    'endpoints': string;
    /**
    * Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
    */
    'path': string;

    /**
    * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1GlusterfsVolumeSource.attributeTypeMap;
    }
}

/**
* HTTPGetAction describes an action based on HTTP Get requests.
*/
export class IoK8sApiCoreV1HTTPGetAction {
    /**
    * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    */
    'port': string | number;

    /**
    * Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
    */
    'host'?: string;
    /**
    * Custom headers to set in the request. HTTP allows repeated headers.
    */
    'httpHeaders'?: Array<IoK8sApiCoreV1HTTPHeader>;
    /**
    * Path to access on the HTTP server.
    */
    'path'?: string;
    /**
    * Scheme to use for connecting to the host. Defaults to HTTP.
    */
    'scheme'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "host",
            "baseName": "host",
            "type": "string"
        },
        {
            "name": "httpHeaders",
            "baseName": "httpHeaders",
            "type": "Array<IoK8sApiCoreV1HTTPHeader>"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "string | number"
        },
        {
            "name": "scheme",
            "baseName": "scheme",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1HTTPGetAction.attributeTypeMap;
    }
}

/**
* HTTPHeader describes a custom header to be used in HTTP probes
*/
export class IoK8sApiCoreV1HTTPHeader {
    /**
    * The header field name
    */
    'name': string;
    /**
    * The header field value
    */
    'value': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1HTTPHeader.attributeTypeMap;
    }
}

/**
* Handler defines a specific action that should be taken
*/
export class IoK8sApiCoreV1Handler {

    /**
    * One and only one of the following should be specified. Exec specifies the action to take.
    */
    'exec'?: IoK8sApiCoreV1ExecAction;
    /**
    * HTTPGet specifies the http request to perform.
    */
    'httpGet'?: IoK8sApiCoreV1HTTPGetAction;
    /**
    * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
    */
    'tcpSocket'?: IoK8sApiCoreV1TCPSocketAction;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "exec",
            "baseName": "exec",
            "type": "IoK8sApiCoreV1ExecAction"
        },
        {
            "name": "httpGet",
            "baseName": "httpGet",
            "type": "IoK8sApiCoreV1HTTPGetAction"
        },
        {
            "name": "tcpSocket",
            "baseName": "tcpSocket",
            "type": "IoK8sApiCoreV1TCPSocketAction"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Handler.attributeTypeMap;
    }
}

/**
* HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
*/
export class IoK8sApiCoreV1HostAlias {

    /**
    * Hostnames for the above IP address.
    */
    'hostnames'?: Array<string>;
    /**
    * IP address of the host file entry.
    */
    'ip'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hostnames",
            "baseName": "hostnames",
            "type": "Array<string>"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1HostAlias.attributeTypeMap;
    }
}

/**
* Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
*/
export class IoK8sApiCoreV1HostPathVolumeSource {
    /**
    * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    */
    'path': string;

    /**
    * Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1HostPathVolumeSource.attributeTypeMap;
    }
}

/**
* ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1ISCSIPersistentVolumeSource {
    /**
    * Target iSCSI Qualified Name.
    */
    'iqn': string;
    /**
    * iSCSI Target Lun number.
    */
    'lun': number;
    /**
    * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    */
    'targetPortal': string;

    /**
    * whether support iSCSI Discovery CHAP authentication
    */
    'chapAuthDiscovery'?: boolean;
    /**
    * whether support iSCSI Session CHAP authentication
    */
    'chapAuthSession'?: boolean;
    /**
    * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    */
    'fsType'?: string;
    /**
    * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    */
    'initiatorName'?: string;
    /**
    * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    */
    'iscsiInterface'?: string;
    /**
    * iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    */
    'portals'?: Array<string>;
    /**
    * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    */
    'readOnly'?: boolean;
    /**
    * CHAP Secret for iSCSI target and initiator authentication
    */
    'secretRef'?: IoK8sApiCoreV1SecretReference;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "chapAuthDiscovery",
            "baseName": "chapAuthDiscovery",
            "type": "boolean"
        },
        {
            "name": "chapAuthSession",
            "baseName": "chapAuthSession",
            "type": "boolean"
        },
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "initiatorName",
            "baseName": "initiatorName",
            "type": "string"
        },
        {
            "name": "iqn",
            "baseName": "iqn",
            "type": "string"
        },
        {
            "name": "iscsiInterface",
            "baseName": "iscsiInterface",
            "type": "string"
        },
        {
            "name": "lun",
            "baseName": "lun",
            "type": "number"
        },
        {
            "name": "portals",
            "baseName": "portals",
            "type": "Array<string>"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1SecretReference"
        },
        {
            "name": "targetPortal",
            "baseName": "targetPortal",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ISCSIPersistentVolumeSource.attributeTypeMap;
    }
}

/**
* Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1ISCSIVolumeSource {
    /**
    * Target iSCSI Qualified Name.
    */
    'iqn': string;
    /**
    * iSCSI Target Lun number.
    */
    'lun': number;
    /**
    * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    */
    'targetPortal': string;

    /**
    * whether support iSCSI Discovery CHAP authentication
    */
    'chapAuthDiscovery'?: boolean;
    /**
    * whether support iSCSI Session CHAP authentication
    */
    'chapAuthSession'?: boolean;
    /**
    * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    */
    'fsType'?: string;
    /**
    * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    */
    'initiatorName'?: string;
    /**
    * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    */
    'iscsiInterface'?: string;
    /**
    * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    */
    'portals'?: Array<string>;
    /**
    * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    */
    'readOnly'?: boolean;
    /**
    * CHAP Secret for iSCSI target and initiator authentication
    */
    'secretRef'?: IoK8sApiCoreV1LocalObjectReference;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "chapAuthDiscovery",
            "baseName": "chapAuthDiscovery",
            "type": "boolean"
        },
        {
            "name": "chapAuthSession",
            "baseName": "chapAuthSession",
            "type": "boolean"
        },
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "initiatorName",
            "baseName": "initiatorName",
            "type": "string"
        },
        {
            "name": "iqn",
            "baseName": "iqn",
            "type": "string"
        },
        {
            "name": "iscsiInterface",
            "baseName": "iscsiInterface",
            "type": "string"
        },
        {
            "name": "lun",
            "baseName": "lun",
            "type": "number"
        },
        {
            "name": "portals",
            "baseName": "portals",
            "type": "Array<string>"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1LocalObjectReference"
        },
        {
            "name": "targetPortal",
            "baseName": "targetPortal",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ISCSIVolumeSource.attributeTypeMap;
    }
}

/**
* Maps a string key to a path within a volume.
*/
export class IoK8sApiCoreV1KeyToPath {
    /**
    * The key to project.
    */
    'key': string;
    /**
    * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    */
    'path': string;

    /**
    * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    */
    'mode'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "number"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1KeyToPath.attributeTypeMap;
    }
}

/**
* Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
*/
export class IoK8sApiCoreV1Lifecycle {

    /**
    * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    */
    'postStart'?: IoK8sApiCoreV1Handler;
    /**
    * PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    */
    'preStop'?: IoK8sApiCoreV1Handler;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "postStart",
            "baseName": "postStart",
            "type": "IoK8sApiCoreV1Handler"
        },
        {
            "name": "preStop",
            "baseName": "preStop",
            "type": "IoK8sApiCoreV1Handler"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Lifecycle.attributeTypeMap;
    }
}

/**
* LimitRange sets resource usage limits for each kind of resource in a Namespace.
*/
export class IoK8sApiCoreV1LimitRange {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1LimitRangeSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1LimitRangeSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LimitRange.attributeTypeMap;
    }
}

/**
* LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
*/
export class IoK8sApiCoreV1LimitRangeItem {

    /**
    * Default resource requirement limit value by resource name if resource limit is omitted.
    */
    '_default'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
    */
    'defaultRequest'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Max usage constraints on this kind by resource name.
    */
    'max'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
    */
    'maxLimitRequestRatio'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Min usage constraints on this kind by resource name.
    */
    'min'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Type of resource that this limit applies to.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "_default",
            "baseName": "default",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "defaultRequest",
            "baseName": "defaultRequest",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "max",
            "baseName": "max",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "maxLimitRequestRatio",
            "baseName": "maxLimitRequestRatio",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LimitRangeItem.attributeTypeMap;
    }
}

/**
* LimitRangeList is a list of LimitRange items.
*/
export class IoK8sApiCoreV1LimitRangeList {
    /**
    * Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    */
    'items': Array<IoK8sApiCoreV1LimitRange>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1LimitRange>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LimitRangeList.attributeTypeMap;
    }
}

/**
* LimitRangeSpec defines a min/max usage limit for resources that match on kind.
*/
export class IoK8sApiCoreV1LimitRangeSpec {
    /**
    * Limits is the list of LimitRangeItem objects that are enforced.
    */
    'limits': Array<IoK8sApiCoreV1LimitRangeItem>;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "limits",
            "baseName": "limits",
            "type": "Array<IoK8sApiCoreV1LimitRangeItem>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LimitRangeSpec.attributeTypeMap;
    }
}

/**
* LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
*/
export class IoK8sApiCoreV1LoadBalancerIngress {

    /**
    * Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
    */
    'hostname'?: string;
    /**
    * IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
    */
    'ip'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LoadBalancerIngress.attributeTypeMap;
    }
}

/**
* LoadBalancerStatus represents the status of a load-balancer.
*/
export class IoK8sApiCoreV1LoadBalancerStatus {

    /**
    * Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
    */
    'ingress'?: Array<IoK8sApiCoreV1LoadBalancerIngress>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ingress",
            "baseName": "ingress",
            "type": "Array<IoK8sApiCoreV1LoadBalancerIngress>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LoadBalancerStatus.attributeTypeMap;
    }
}

/**
* LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
*/
export class IoK8sApiCoreV1LocalObjectReference {

    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LocalObjectReference.attributeTypeMap;
    }
}

/**
* Local represents directly-attached storage with node affinity
*/
export class IoK8sApiCoreV1LocalVolumeSource {
    /**
    * The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device
    */
    'path': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1LocalVolumeSource.attributeTypeMap;
    }
}

/**
* Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
*/
export class IoK8sApiCoreV1NFSVolumeSource {
    /**
    * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    */
    'path': string;
    /**
    * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    */
    'server': string;

    /**
    * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "server",
            "baseName": "server",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NFSVolumeSource.attributeTypeMap;
    }
}

/**
* Namespace provides a scope for Names. Use of multiple namespaces is optional.
*/
export class IoK8sApiCoreV1Namespace {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1NamespaceSpec;
    /**
    * Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiCoreV1NamespaceStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1NamespaceSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1NamespaceStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Namespace.attributeTypeMap;
    }
}

/**
* NamespaceList is a list of Namespaces.
*/
export class IoK8sApiCoreV1NamespaceList {
    /**
    * Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    */
    'items': Array<IoK8sApiCoreV1Namespace>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1Namespace>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NamespaceList.attributeTypeMap;
    }
}

/**
* NamespaceSpec describes the attributes on a Namespace.
*/
export class IoK8sApiCoreV1NamespaceSpec {

    /**
    * Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
    */
    'finalizers'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "finalizers",
            "baseName": "finalizers",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NamespaceSpec.attributeTypeMap;
    }
}

/**
* NamespaceStatus is information about the current status of a Namespace.
*/
export class IoK8sApiCoreV1NamespaceStatus {

    /**
    * Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
    */
    'phase'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "phase",
            "baseName": "phase",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NamespaceStatus.attributeTypeMap;
    }
}

/**
* Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
*/
export class IoK8sApiCoreV1Node {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1NodeSpec;
    /**
    * Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiCoreV1NodeStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1NodeSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1NodeStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Node.attributeTypeMap;
    }
}

/**
* NodeAddress contains information for the node's address.
*/
export class IoK8sApiCoreV1NodeAddress {
    /**
    * The node address.
    */
    'address': string;
    /**
    * Node address type, one of Hostname, ExternalIP or InternalIP.
    */
    'type': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "address",
            "baseName": "address",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeAddress.attributeTypeMap;
    }
}

/**
* Node affinity is a group of node affinity scheduling rules.
*/
export class IoK8sApiCoreV1NodeAffinity {

    /**
    * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    */
    'preferredDuringSchedulingIgnoredDuringExecution'?: Array<IoK8sApiCoreV1PreferredSchedulingTerm>;
    /**
    * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    */
    'requiredDuringSchedulingIgnoredDuringExecution'?: IoK8sApiCoreV1NodeSelector;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "preferredDuringSchedulingIgnoredDuringExecution",
            "baseName": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "Array<IoK8sApiCoreV1PreferredSchedulingTerm>"
        },
        {
            "name": "requiredDuringSchedulingIgnoredDuringExecution",
            "baseName": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "IoK8sApiCoreV1NodeSelector"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeAffinity.attributeTypeMap;
    }
}

/**
* NodeCondition contains condition information for a node.
*/
export class IoK8sApiCoreV1NodeCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of node condition.
    */
    'type': string;

    /**
    * Last time we got an update on a given condition.
    */
    'lastHeartbeatTime'?: string;
    /**
    * Last time the condition transit from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * Human readable message indicating details about last transition.
    */
    'message'?: string;
    /**
    * (brief) reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastHeartbeatTime",
            "baseName": "lastHeartbeatTime",
            "type": "string"
        },
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeCondition.attributeTypeMap;
    }
}

/**
* NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.
*/
export class IoK8sApiCoreV1NodeConfigSource {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    'configMapRef'?: IoK8sApiCoreV1ObjectReference;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "configMapRef",
            "baseName": "configMapRef",
            "type": "IoK8sApiCoreV1ObjectReference"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeConfigSource.attributeTypeMap;
    }
}

/**
* NodeDaemonEndpoints lists ports opened by daemons running on the Node.
*/
export class IoK8sApiCoreV1NodeDaemonEndpoints {

    /**
    * Endpoint on which Kubelet is listening.
    */
    'kubeletEndpoint'?: IoK8sApiCoreV1DaemonEndpoint;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "kubeletEndpoint",
            "baseName": "kubeletEndpoint",
            "type": "IoK8sApiCoreV1DaemonEndpoint"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeDaemonEndpoints.attributeTypeMap;
    }
}

/**
* NodeList is the whole list of all Nodes which have been registered with master.
*/
export class IoK8sApiCoreV1NodeList {
    /**
    * List of nodes
    */
    'items': Array<IoK8sApiCoreV1Node>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1Node>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeList.attributeTypeMap;
    }
}

/**
* A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
*/
export class IoK8sApiCoreV1NodeSelector {
    /**
    * Required. A list of node selector terms. The terms are ORed.
    */
    'nodeSelectorTerms': Array<IoK8sApiCoreV1NodeSelectorTerm>;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nodeSelectorTerms",
            "baseName": "nodeSelectorTerms",
            "type": "Array<IoK8sApiCoreV1NodeSelectorTerm>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeSelector.attributeTypeMap;
    }
}

/**
* A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
*/
export class IoK8sApiCoreV1NodeSelectorRequirement {
    /**
    * The label key that the selector applies to.
    */
    'key': string;
    /**
    * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    */
    'operator': string;

    /**
    * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    */
    'values'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string"
        },
        {
            "name": "values",
            "baseName": "values",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeSelectorRequirement.attributeTypeMap;
    }
}

/**
* A null or empty node selector term matches no objects.
*/
export class IoK8sApiCoreV1NodeSelectorTerm {
    /**
    * Required. A list of node selector requirements. The requirements are ANDed.
    */
    'matchExpressions': Array<IoK8sApiCoreV1NodeSelectorRequirement>;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "matchExpressions",
            "baseName": "matchExpressions",
            "type": "Array<IoK8sApiCoreV1NodeSelectorRequirement>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeSelectorTerm.attributeTypeMap;
    }
}

/**
* NodeSpec describes the attributes that a node is created with.
*/
export class IoK8sApiCoreV1NodeSpec {

    /**
    * If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field
    */
    'configSource'?: IoK8sApiCoreV1NodeConfigSource;
    /**
    * External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.
    */
    'externalID'?: string;
    /**
    * PodCIDR represents the pod IP range assigned to the node.
    */
    'podCIDR'?: string;
    /**
    * ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
    */
    'providerID'?: string;
    /**
    * If specified, the node's taints.
    */
    'taints'?: Array<IoK8sApiCoreV1Taint>;
    /**
    * Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
    */
    'unschedulable'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "configSource",
            "baseName": "configSource",
            "type": "IoK8sApiCoreV1NodeConfigSource"
        },
        {
            "name": "externalID",
            "baseName": "externalID",
            "type": "string"
        },
        {
            "name": "podCIDR",
            "baseName": "podCIDR",
            "type": "string"
        },
        {
            "name": "providerID",
            "baseName": "providerID",
            "type": "string"
        },
        {
            "name": "taints",
            "baseName": "taints",
            "type": "Array<IoK8sApiCoreV1Taint>"
        },
        {
            "name": "unschedulable",
            "baseName": "unschedulable",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeSpec.attributeTypeMap;
    }
}

/**
* NodeStatus is information about the current status of a node.
*/
export class IoK8sApiCoreV1NodeStatus {

    /**
    * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
    */
    'addresses'?: Array<IoK8sApiCoreV1NodeAddress>;
    /**
    * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    */
    'allocatable'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    */
    'capacity'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
    */
    'conditions'?: Array<IoK8sApiCoreV1NodeCondition>;
    /**
    * Endpoints of daemons running on the Node.
    */
    'daemonEndpoints'?: IoK8sApiCoreV1NodeDaemonEndpoints;
    /**
    * List of container images on this node
    */
    'images'?: Array<IoK8sApiCoreV1ContainerImage>;
    /**
    * Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
    */
    'nodeInfo'?: IoK8sApiCoreV1NodeSystemInfo;
    /**
    * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
    */
    'phase'?: string;
    /**
    * List of volumes that are attached to the node.
    */
    'volumesAttached'?: Array<IoK8sApiCoreV1AttachedVolume>;
    /**
    * List of attachable volumes in use (mounted) by the node.
    */
    'volumesInUse'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<IoK8sApiCoreV1NodeAddress>"
        },
        {
            "name": "allocatable",
            "baseName": "allocatable",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "capacity",
            "baseName": "capacity",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiCoreV1NodeCondition>"
        },
        {
            "name": "daemonEndpoints",
            "baseName": "daemonEndpoints",
            "type": "IoK8sApiCoreV1NodeDaemonEndpoints"
        },
        {
            "name": "images",
            "baseName": "images",
            "type": "Array<IoK8sApiCoreV1ContainerImage>"
        },
        {
            "name": "nodeInfo",
            "baseName": "nodeInfo",
            "type": "IoK8sApiCoreV1NodeSystemInfo"
        },
        {
            "name": "phase",
            "baseName": "phase",
            "type": "string"
        },
        {
            "name": "volumesAttached",
            "baseName": "volumesAttached",
            "type": "Array<IoK8sApiCoreV1AttachedVolume>"
        },
        {
            "name": "volumesInUse",
            "baseName": "volumesInUse",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeStatus.attributeTypeMap;
    }
}

/**
* NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
*/
export class IoK8sApiCoreV1NodeSystemInfo {
    /**
    * The Architecture reported by the node
    */
    'architecture': string;
    /**
    * Boot ID reported by the node.
    */
    'bootID': string;
    /**
    * ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
    */
    'containerRuntimeVersion': string;
    /**
    * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
    */
    'kernelVersion': string;
    /**
    * KubeProxy Version reported by the node.
    */
    'kubeProxyVersion': string;
    /**
    * Kubelet Version reported by the node.
    */
    'kubeletVersion': string;
    /**
    * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
    */
    'machineID': string;
    /**
    * The Operating System reported by the node
    */
    'operatingSystem': string;
    /**
    * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
    */
    'osImage': string;
    /**
    * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
    */
    'systemUUID': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "architecture",
            "baseName": "architecture",
            "type": "string"
        },
        {
            "name": "bootID",
            "baseName": "bootID",
            "type": "string"
        },
        {
            "name": "containerRuntimeVersion",
            "baseName": "containerRuntimeVersion",
            "type": "string"
        },
        {
            "name": "kernelVersion",
            "baseName": "kernelVersion",
            "type": "string"
        },
        {
            "name": "kubeProxyVersion",
            "baseName": "kubeProxyVersion",
            "type": "string"
        },
        {
            "name": "kubeletVersion",
            "baseName": "kubeletVersion",
            "type": "string"
        },
        {
            "name": "machineID",
            "baseName": "machineID",
            "type": "string"
        },
        {
            "name": "operatingSystem",
            "baseName": "operatingSystem",
            "type": "string"
        },
        {
            "name": "osImage",
            "baseName": "osImage",
            "type": "string"
        },
        {
            "name": "systemUUID",
            "baseName": "systemUUID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1NodeSystemInfo.attributeTypeMap;
    }
}

/**
* ObjectFieldSelector selects an APIVersioned field of an object.
*/
export class IoK8sApiCoreV1ObjectFieldSelector {
    /**
    * Path of the field to select in the specified API version.
    */
    'fieldPath': string;

    /**
    * Version of the schema the FieldPath is written in terms of, defaults to \"v1\".
    */
    'apiVersion'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "fieldPath",
            "baseName": "fieldPath",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ObjectFieldSelector.attributeTypeMap;
    }
}

/**
* ObjectReference contains enough information to let you inspect or modify the referred object.
*/
export class IoK8sApiCoreV1ObjectReference {

    /**
    * API version of the referent.
    */
    'apiVersion'?: string;
    /**
    * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    */
    'fieldPath'?: string;
    /**
    * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    */
    'namespace'?: string;
    /**
    * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
    */
    'resourceVersion'?: string;
    /**
    * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    */
    'uid'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "fieldPath",
            "baseName": "fieldPath",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        },
        {
            "name": "resourceVersion",
            "baseName": "resourceVersion",
            "type": "string"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ObjectReference.attributeTypeMap;
    }
}

/**
* PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
*/
export class IoK8sApiCoreV1PersistentVolume {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    */
    'spec'?: IoK8sApiCoreV1PersistentVolumeSpec;
    /**
    * Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    */
    'status'?: IoK8sApiCoreV1PersistentVolumeStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1PersistentVolumeSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1PersistentVolumeStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolume.attributeTypeMap;
    }
}

/**
* PersistentVolumeClaim is a user's request for and claim to a persistent volume
*/
export class IoK8sApiCoreV1PersistentVolumeClaim {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    */
    'spec'?: IoK8sApiCoreV1PersistentVolumeClaimSpec;
    /**
    * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    */
    'status'?: IoK8sApiCoreV1PersistentVolumeClaimStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1PersistentVolumeClaimSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1PersistentVolumeClaimStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeClaim.attributeTypeMap;
    }
}

/**
* PersistentVolumeClaimCondition contails details about state of pvc
*/
export class IoK8sApiCoreV1PersistentVolumeClaimCondition {
    'status': string;
    'type': string;

    /**
    * Last time we probed the condition.
    */
    'lastProbeTime'?: string;
    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * Human-readable message indicating details about last transition.
    */
    'message'?: string;
    /**
    * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastProbeTime",
            "baseName": "lastProbeTime",
            "type": "string"
        },
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeClaimCondition.attributeTypeMap;
    }
}

/**
* PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
*/
export class IoK8sApiCoreV1PersistentVolumeClaimList {
    /**
    * A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    */
    'items': Array<IoK8sApiCoreV1PersistentVolumeClaim>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1PersistentVolumeClaim>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeClaimList.attributeTypeMap;
    }
}

/**
* PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
*/
export class IoK8sApiCoreV1PersistentVolumeClaimSpec {

    /**
    * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    */
    'accessModes'?: Array<string>;
    /**
    * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    */
    'resources'?: IoK8sApiCoreV1ResourceRequirements;
    /**
    * A label query over volumes to consider for binding.
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    */
    'storageClassName'?: string;
    /**
    * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is an alpha feature and may change in the future.
    */
    'volumeMode'?: string;
    /**
    * VolumeName is the binding reference to the PersistentVolume backing this claim.
    */
    'volumeName'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessModes",
            "baseName": "accessModes",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "IoK8sApiCoreV1ResourceRequirements"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "storageClassName",
            "baseName": "storageClassName",
            "type": "string"
        },
        {
            "name": "volumeMode",
            "baseName": "volumeMode",
            "type": "string"
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeClaimSpec.attributeTypeMap;
    }
}

/**
* PersistentVolumeClaimStatus is the current status of a persistent volume claim.
*/
export class IoK8sApiCoreV1PersistentVolumeClaimStatus {

    /**
    * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    */
    'accessModes'?: Array<string>;
    /**
    * Represents the actual resources of the underlying volume.
    */
    'capacity'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
    */
    'conditions'?: Array<IoK8sApiCoreV1PersistentVolumeClaimCondition>;
    /**
    * Phase represents the current phase of PersistentVolumeClaim.
    */
    'phase'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessModes",
            "baseName": "accessModes",
            "type": "Array<string>"
        },
        {
            "name": "capacity",
            "baseName": "capacity",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiCoreV1PersistentVolumeClaimCondition>"
        },
        {
            "name": "phase",
            "baseName": "phase",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeClaimStatus.attributeTypeMap;
    }
}

/**
* PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
*/
export class IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
    /**
    * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    */
    'claimName': string;

    /**
    * Will force the ReadOnly setting in VolumeMounts. Default false.
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "claimName",
            "baseName": "claimName",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.attributeTypeMap;
    }
}

/**
* PersistentVolumeList is a list of PersistentVolume items.
*/
export class IoK8sApiCoreV1PersistentVolumeList {
    /**
    * List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
    */
    'items': Array<IoK8sApiCoreV1PersistentVolume>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1PersistentVolume>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeList.attributeTypeMap;
    }
}

/**
* PersistentVolumeSpec is the specification of a persistent volume.
*/
export class IoK8sApiCoreV1PersistentVolumeSpec {

    /**
    * AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
    */
    'accessModes'?: Array<string>;
    /**
    * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    */
    'awsElasticBlockStore'?: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource;
    /**
    * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    */
    'azureDisk'?: IoK8sApiCoreV1AzureDiskVolumeSource;
    /**
    * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    */
    'azureFile'?: IoK8sApiCoreV1AzureFilePersistentVolumeSource;
    /**
    * A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    */
    'capacity'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    */
    'cephfs'?: IoK8sApiCoreV1CephFSPersistentVolumeSource;
    /**
    * Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    */
    'cinder'?: IoK8sApiCoreV1CinderVolumeSource;
    /**
    * ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
    */
    'claimRef'?: IoK8sApiCoreV1ObjectReference;
    /**
    * CSI represents storage that handled by an external CSI driver
    */
    'csi'?: IoK8sApiCoreV1CSIPersistentVolumeSource;
    /**
    * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    */
    'fc'?: IoK8sApiCoreV1FCVolumeSource;
    /**
    * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    */
    'flexVolume'?: IoK8sApiCoreV1FlexVolumeSource;
    /**
    * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
    */
    'flocker'?: IoK8sApiCoreV1FlockerVolumeSource;
    /**
    * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    */
    'gcePersistentDisk'?: IoK8sApiCoreV1GCEPersistentDiskVolumeSource;
    /**
    * Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
    */
    'glusterfs'?: IoK8sApiCoreV1GlusterfsVolumeSource;
    /**
    * HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    */
    'hostPath'?: IoK8sApiCoreV1HostPathVolumeSource;
    /**
    * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
    */
    'iscsi'?: IoK8sApiCoreV1ISCSIPersistentVolumeSource;
    /**
    * Local represents directly-attached storage with node affinity
    */
    'local'?: IoK8sApiCoreV1LocalVolumeSource;
    /**
    * A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
    */
    'mountOptions'?: Array<string>;
    /**
    * NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    */
    'nfs'?: IoK8sApiCoreV1NFSVolumeSource;
    /**
    * What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
    */
    'persistentVolumeReclaimPolicy'?: string;
    /**
    * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    */
    'photonPersistentDisk'?: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource;
    /**
    * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    */
    'portworxVolume'?: IoK8sApiCoreV1PortworxVolumeSource;
    /**
    * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    */
    'quobyte'?: IoK8sApiCoreV1QuobyteVolumeSource;
    /**
    * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
    */
    'rbd'?: IoK8sApiCoreV1RBDPersistentVolumeSource;
    /**
    * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    */
    'scaleIO'?: IoK8sApiCoreV1ScaleIOPersistentVolumeSource;
    /**
    * Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
    */
    'storageClassName'?: string;
    /**
    * StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md
    */
    'storageos'?: IoK8sApiCoreV1StorageOSPersistentVolumeSource;
    /**
    * volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is an alpha feature and may change in the future.
    */
    'volumeMode'?: string;
    /**
    * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    */
    'vsphereVolume'?: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessModes",
            "baseName": "accessModes",
            "type": "Array<string>"
        },
        {
            "name": "awsElasticBlockStore",
            "baseName": "awsElasticBlockStore",
            "type": "IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource"
        },
        {
            "name": "azureDisk",
            "baseName": "azureDisk",
            "type": "IoK8sApiCoreV1AzureDiskVolumeSource"
        },
        {
            "name": "azureFile",
            "baseName": "azureFile",
            "type": "IoK8sApiCoreV1AzureFilePersistentVolumeSource"
        },
        {
            "name": "capacity",
            "baseName": "capacity",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "cephfs",
            "baseName": "cephfs",
            "type": "IoK8sApiCoreV1CephFSPersistentVolumeSource"
        },
        {
            "name": "cinder",
            "baseName": "cinder",
            "type": "IoK8sApiCoreV1CinderVolumeSource"
        },
        {
            "name": "claimRef",
            "baseName": "claimRef",
            "type": "IoK8sApiCoreV1ObjectReference"
        },
        {
            "name": "csi",
            "baseName": "csi",
            "type": "IoK8sApiCoreV1CSIPersistentVolumeSource"
        },
        {
            "name": "fc",
            "baseName": "fc",
            "type": "IoK8sApiCoreV1FCVolumeSource"
        },
        {
            "name": "flexVolume",
            "baseName": "flexVolume",
            "type": "IoK8sApiCoreV1FlexVolumeSource"
        },
        {
            "name": "flocker",
            "baseName": "flocker",
            "type": "IoK8sApiCoreV1FlockerVolumeSource"
        },
        {
            "name": "gcePersistentDisk",
            "baseName": "gcePersistentDisk",
            "type": "IoK8sApiCoreV1GCEPersistentDiskVolumeSource"
        },
        {
            "name": "glusterfs",
            "baseName": "glusterfs",
            "type": "IoK8sApiCoreV1GlusterfsVolumeSource"
        },
        {
            "name": "hostPath",
            "baseName": "hostPath",
            "type": "IoK8sApiCoreV1HostPathVolumeSource"
        },
        {
            "name": "iscsi",
            "baseName": "iscsi",
            "type": "IoK8sApiCoreV1ISCSIPersistentVolumeSource"
        },
        {
            "name": "local",
            "baseName": "local",
            "type": "IoK8sApiCoreV1LocalVolumeSource"
        },
        {
            "name": "mountOptions",
            "baseName": "mountOptions",
            "type": "Array<string>"
        },
        {
            "name": "nfs",
            "baseName": "nfs",
            "type": "IoK8sApiCoreV1NFSVolumeSource"
        },
        {
            "name": "persistentVolumeReclaimPolicy",
            "baseName": "persistentVolumeReclaimPolicy",
            "type": "string"
        },
        {
            "name": "photonPersistentDisk",
            "baseName": "photonPersistentDisk",
            "type": "IoK8sApiCoreV1PhotonPersistentDiskVolumeSource"
        },
        {
            "name": "portworxVolume",
            "baseName": "portworxVolume",
            "type": "IoK8sApiCoreV1PortworxVolumeSource"
        },
        {
            "name": "quobyte",
            "baseName": "quobyte",
            "type": "IoK8sApiCoreV1QuobyteVolumeSource"
        },
        {
            "name": "rbd",
            "baseName": "rbd",
            "type": "IoK8sApiCoreV1RBDPersistentVolumeSource"
        },
        {
            "name": "scaleIO",
            "baseName": "scaleIO",
            "type": "IoK8sApiCoreV1ScaleIOPersistentVolumeSource"
        },
        {
            "name": "storageClassName",
            "baseName": "storageClassName",
            "type": "string"
        },
        {
            "name": "storageos",
            "baseName": "storageos",
            "type": "IoK8sApiCoreV1StorageOSPersistentVolumeSource"
        },
        {
            "name": "volumeMode",
            "baseName": "volumeMode",
            "type": "string"
        },
        {
            "name": "vsphereVolume",
            "baseName": "vsphereVolume",
            "type": "IoK8sApiCoreV1VsphereVirtualDiskVolumeSource"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeSpec.attributeTypeMap;
    }
}

/**
* PersistentVolumeStatus is the current status of a persistent volume.
*/
export class IoK8sApiCoreV1PersistentVolumeStatus {

    /**
    * A human-readable message indicating details about why the volume is in this state.
    */
    'message'?: string;
    /**
    * Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
    */
    'phase'?: string;
    /**
    * Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "phase",
            "baseName": "phase",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PersistentVolumeStatus.attributeTypeMap;
    }
}

/**
* Represents a Photon Controller persistent disk resource.
*/
export class IoK8sApiCoreV1PhotonPersistentDiskVolumeSource {
    /**
    * ID that identifies Photon Controller persistent disk
    */
    'pdID': string;

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "pdID",
            "baseName": "pdID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PhotonPersistentDiskVolumeSource.attributeTypeMap;
    }
}

/**
* Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
*/
export class IoK8sApiCoreV1Pod {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1PodSpec;
    /**
    * Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiCoreV1PodStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1PodSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1PodStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Pod.attributeTypeMap;
    }
}

/**
* Pod affinity is a group of inter pod affinity scheduling rules.
*/
export class IoK8sApiCoreV1PodAffinity {

    /**
    * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    */
    'preferredDuringSchedulingIgnoredDuringExecution'?: Array<IoK8sApiCoreV1WeightedPodAffinityTerm>;
    /**
    * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    */
    'requiredDuringSchedulingIgnoredDuringExecution'?: Array<IoK8sApiCoreV1PodAffinityTerm>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "preferredDuringSchedulingIgnoredDuringExecution",
            "baseName": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "Array<IoK8sApiCoreV1WeightedPodAffinityTerm>"
        },
        {
            "name": "requiredDuringSchedulingIgnoredDuringExecution",
            "baseName": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "Array<IoK8sApiCoreV1PodAffinityTerm>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodAffinity.attributeTypeMap;
    }
}

/**
* Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
*/
export class IoK8sApiCoreV1PodAffinityTerm {
    /**
    * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    */
    'topologyKey': string;

    /**
    * A label query over a set of resources, in this case pods.
    */
    'labelSelector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"
    */
    'namespaces'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "labelSelector",
            "baseName": "labelSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "namespaces",
            "baseName": "namespaces",
            "type": "Array<string>"
        },
        {
            "name": "topologyKey",
            "baseName": "topologyKey",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodAffinityTerm.attributeTypeMap;
    }
}

/**
* Pod anti affinity is a group of inter pod anti affinity scheduling rules.
*/
export class IoK8sApiCoreV1PodAntiAffinity {

    /**
    * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    */
    'preferredDuringSchedulingIgnoredDuringExecution'?: Array<IoK8sApiCoreV1WeightedPodAffinityTerm>;
    /**
    * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    */
    'requiredDuringSchedulingIgnoredDuringExecution'?: Array<IoK8sApiCoreV1PodAffinityTerm>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "preferredDuringSchedulingIgnoredDuringExecution",
            "baseName": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "Array<IoK8sApiCoreV1WeightedPodAffinityTerm>"
        },
        {
            "name": "requiredDuringSchedulingIgnoredDuringExecution",
            "baseName": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "Array<IoK8sApiCoreV1PodAffinityTerm>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodAntiAffinity.attributeTypeMap;
    }
}

/**
* PodCondition contains details for the current condition of this pod.
*/
export class IoK8sApiCoreV1PodCondition {
    /**
    * Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    */
    'status': string;
    /**
    * Type is the type of the condition. Currently only Ready. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    */
    'type': string;

    /**
    * Last time we probed the condition.
    */
    'lastProbeTime'?: string;
    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * Human-readable message indicating details about last transition.
    */
    'message'?: string;
    /**
    * Unique, one-word, CamelCase reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastProbeTime",
            "baseName": "lastProbeTime",
            "type": "string"
        },
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodCondition.attributeTypeMap;
    }
}

/**
* PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
*/
export class IoK8sApiCoreV1PodDNSConfig {

    /**
    * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
    */
    'nameservers'?: Array<string>;
    /**
    * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
    */
    'options'?: Array<IoK8sApiCoreV1PodDNSConfigOption>;
    /**
    * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
    */
    'searches'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nameservers",
            "baseName": "nameservers",
            "type": "Array<string>"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "Array<IoK8sApiCoreV1PodDNSConfigOption>"
        },
        {
            "name": "searches",
            "baseName": "searches",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodDNSConfig.attributeTypeMap;
    }
}

/**
* PodDNSConfigOption defines DNS resolver options of a pod.
*/
export class IoK8sApiCoreV1PodDNSConfigOption {

    /**
    * Required.
    */
    'name'?: string;
    'value'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodDNSConfigOption.attributeTypeMap;
    }
}

/**
* PodList is a list of Pods.
*/
export class IoK8sApiCoreV1PodList {
    /**
    * List of pods. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md
    */
    'items': Array<IoK8sApiCoreV1Pod>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1Pod>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodList.attributeTypeMap;
    }
}

/**
* PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
*/
export class IoK8sApiCoreV1PodSecurityContext {

    /**
    * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume.
    */
    'fsGroup'?: number;
    /**
    * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    */
    'runAsNonRoot'?: boolean;
    /**
    * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    */
    'runAsUser'?: number;
    /**
    * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    */
    'seLinuxOptions'?: IoK8sApiCoreV1SELinuxOptions;
    /**
    * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
    */
    'supplementalGroups'?: Array<number>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsGroup",
            "baseName": "fsGroup",
            "type": "number"
        },
        {
            "name": "runAsNonRoot",
            "baseName": "runAsNonRoot",
            "type": "boolean"
        },
        {
            "name": "runAsUser",
            "baseName": "runAsUser",
            "type": "number"
        },
        {
            "name": "seLinuxOptions",
            "baseName": "seLinuxOptions",
            "type": "IoK8sApiCoreV1SELinuxOptions"
        },
        {
            "name": "supplementalGroups",
            "baseName": "supplementalGroups",
            "type": "Array<number>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodSecurityContext.attributeTypeMap;
    }
}

/**
* PodSpec is a description of a pod.
*/
export class IoK8sApiCoreV1PodSpec {
    /**
    * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
    */
    'containers': Array<IoK8sApiCoreV1Container>;

    /**
    * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    */
    'activeDeadlineSeconds'?: number;
    /**
    * If specified, the pod's scheduling constraints
    */
    'affinity'?: IoK8sApiCoreV1Affinity;
    /**
    * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    */
    'automountServiceAccountToken'?: boolean;
    /**
    * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. This is an alpha feature introduced in v1.9 and CustomPodDNS feature gate must be enabled to use it.
    */
    'dnsConfig'?: IoK8sApiCoreV1PodDNSConfig;
    /**
    * Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Note that 'None' policy is an alpha feature introduced in v1.9 and CustomPodDNS feature gate must be enabled to use it.
    */
    'dnsPolicy'?: string;
    /**
    * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
    */
    'hostAliases'?: Array<IoK8sApiCoreV1HostAlias>;
    /**
    * Use the host's ipc namespace. Optional: Default to false.
    */
    'hostIPC'?: boolean;
    /**
    * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
    */
    'hostNetwork'?: boolean;
    /**
    * Use the host's pid namespace. Optional: Default to false.
    */
    'hostPID'?: boolean;
    /**
    * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    */
    'hostname'?: string;
    /**
    * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
    */
    'imagePullSecrets'?: Array<IoK8sApiCoreV1LocalObjectReference>;
    /**
    * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    */
    'initContainers'?: Array<IoK8sApiCoreV1Container>;
    /**
    * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    */
    'nodeName'?: string;
    /**
    * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    */
    'nodeSelector'?: { [key: string]: string; };
    /**
    * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
    */
    'priority'?: number;
    /**
    * If specified, indicates the pod's priority. \"SYSTEM\" is a special keyword which indicates the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    */
    'priorityClassName'?: string;
    /**
    * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
    */
    'restartPolicy'?: string;
    /**
    * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    */
    'schedulerName'?: string;
    /**
    * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
    */
    'securityContext'?: IoK8sApiCoreV1PodSecurityContext;
    /**
    * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
    */
    'serviceAccount'?: string;
    /**
    * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    */
    'serviceAccountName'?: string;
    /**
    * If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.
    */
    'subdomain'?: string;
    /**
    * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    */
    'terminationGracePeriodSeconds'?: number;
    /**
    * If specified, the pod's tolerations.
    */
    'tolerations'?: Array<IoK8sApiCoreV1Toleration>;
    /**
    * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
    */
    'volumes'?: Array<IoK8sApiCoreV1Volume>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "activeDeadlineSeconds",
            "baseName": "activeDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "affinity",
            "baseName": "affinity",
            "type": "IoK8sApiCoreV1Affinity"
        },
        {
            "name": "automountServiceAccountToken",
            "baseName": "automountServiceAccountToken",
            "type": "boolean"
        },
        {
            "name": "containers",
            "baseName": "containers",
            "type": "Array<IoK8sApiCoreV1Container>"
        },
        {
            "name": "dnsConfig",
            "baseName": "dnsConfig",
            "type": "IoK8sApiCoreV1PodDNSConfig"
        },
        {
            "name": "dnsPolicy",
            "baseName": "dnsPolicy",
            "type": "string"
        },
        {
            "name": "hostAliases",
            "baseName": "hostAliases",
            "type": "Array<IoK8sApiCoreV1HostAlias>"
        },
        {
            "name": "hostIPC",
            "baseName": "hostIPC",
            "type": "boolean"
        },
        {
            "name": "hostNetwork",
            "baseName": "hostNetwork",
            "type": "boolean"
        },
        {
            "name": "hostPID",
            "baseName": "hostPID",
            "type": "boolean"
        },
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string"
        },
        {
            "name": "imagePullSecrets",
            "baseName": "imagePullSecrets",
            "type": "Array<IoK8sApiCoreV1LocalObjectReference>"
        },
        {
            "name": "initContainers",
            "baseName": "initContainers",
            "type": "Array<IoK8sApiCoreV1Container>"
        },
        {
            "name": "nodeName",
            "baseName": "nodeName",
            "type": "string"
        },
        {
            "name": "nodeSelector",
            "baseName": "nodeSelector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number"
        },
        {
            "name": "priorityClassName",
            "baseName": "priorityClassName",
            "type": "string"
        },
        {
            "name": "restartPolicy",
            "baseName": "restartPolicy",
            "type": "string"
        },
        {
            "name": "schedulerName",
            "baseName": "schedulerName",
            "type": "string"
        },
        {
            "name": "securityContext",
            "baseName": "securityContext",
            "type": "IoK8sApiCoreV1PodSecurityContext"
        },
        {
            "name": "serviceAccount",
            "baseName": "serviceAccount",
            "type": "string"
        },
        {
            "name": "serviceAccountName",
            "baseName": "serviceAccountName",
            "type": "string"
        },
        {
            "name": "subdomain",
            "baseName": "subdomain",
            "type": "string"
        },
        {
            "name": "terminationGracePeriodSeconds",
            "baseName": "terminationGracePeriodSeconds",
            "type": "number"
        },
        {
            "name": "tolerations",
            "baseName": "tolerations",
            "type": "Array<IoK8sApiCoreV1Toleration>"
        },
        {
            "name": "volumes",
            "baseName": "volumes",
            "type": "Array<IoK8sApiCoreV1Volume>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodSpec.attributeTypeMap;
    }
}

/**
* PodStatus represents information about the status of a pod. Status may trail the actual state of a system.
*/
export class IoK8sApiCoreV1PodStatus {

    /**
    * Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    */
    'conditions'?: Array<IoK8sApiCoreV1PodCondition>;
    /**
    * The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    */
    'containerStatuses'?: Array<IoK8sApiCoreV1ContainerStatus>;
    /**
    * IP address of the host to which the pod is assigned. Empty if not yet scheduled.
    */
    'hostIP'?: string;
    /**
    * The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    */
    'initContainerStatuses'?: Array<IoK8sApiCoreV1ContainerStatus>;
    /**
    * A human readable message indicating details about why the pod is in this condition.
    */
    'message'?: string;
    /**
    * Current condition of the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
    */
    'phase'?: string;
    /**
    * IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
    */
    'podIP'?: string;
    /**
    * The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://github.com/kubernetes/kubernetes/blob/master/docs/design/resource-qos.md
    */
    'qosClass'?: string;
    /**
    * A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
    */
    'reason'?: string;
    /**
    * RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
    */
    'startTime'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiCoreV1PodCondition>"
        },
        {
            "name": "containerStatuses",
            "baseName": "containerStatuses",
            "type": "Array<IoK8sApiCoreV1ContainerStatus>"
        },
        {
            "name": "hostIP",
            "baseName": "hostIP",
            "type": "string"
        },
        {
            "name": "initContainerStatuses",
            "baseName": "initContainerStatuses",
            "type": "Array<IoK8sApiCoreV1ContainerStatus>"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "phase",
            "baseName": "phase",
            "type": "string"
        },
        {
            "name": "podIP",
            "baseName": "podIP",
            "type": "string"
        },
        {
            "name": "qosClass",
            "baseName": "qosClass",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "startTime",
            "baseName": "startTime",
            "type": "string"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodStatus.attributeTypeMap;
    }
}

/**
* PodTemplate describes a template for creating copies of a predefined pod.
*/
export class IoK8sApiCoreV1PodTemplate {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'template'?: IoK8sApiCoreV1PodTemplateSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodTemplate.attributeTypeMap;
    }
}

/**
* PodTemplateList is a list of PodTemplates.
*/
export class IoK8sApiCoreV1PodTemplateList {
    /**
    * List of pod templates
    */
    'items': Array<IoK8sApiCoreV1PodTemplate>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1PodTemplate>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodTemplateList.attributeTypeMap;
    }
}

/**
* PodTemplateSpec describes the data a pod should have when created from a template
*/
export class IoK8sApiCoreV1PodTemplateSpec {

    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1PodSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1PodSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PodTemplateSpec.attributeTypeMap;
    }
}

/**
* PortworxVolumeSource represents a Portworx volume resource.
*/
export class IoK8sApiCoreV1PortworxVolumeSource {
    /**
    * VolumeID uniquely identifies a Portworx volume
    */
    'volumeID': string;

    /**
    * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "volumeID",
            "baseName": "volumeID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PortworxVolumeSource.attributeTypeMap;
    }
}

/**
* An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
*/
export class IoK8sApiCoreV1PreferredSchedulingTerm {
    /**
    * A node selector term, associated with the corresponding weight.
    */
    'preference': IoK8sApiCoreV1NodeSelectorTerm;
    /**
    * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    */
    'weight': number;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "preference",
            "baseName": "preference",
            "type": "IoK8sApiCoreV1NodeSelectorTerm"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1PreferredSchedulingTerm.attributeTypeMap;
    }
}

/**
* Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
*/
export class IoK8sApiCoreV1Probe {

    /**
    * One and only one of the following should be specified. Exec specifies the action to take.
    */
    'exec'?: IoK8sApiCoreV1ExecAction;
    /**
    * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    */
    'failureThreshold'?: number;
    /**
    * HTTPGet specifies the http request to perform.
    */
    'httpGet'?: IoK8sApiCoreV1HTTPGetAction;
    /**
    * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    */
    'initialDelaySeconds'?: number;
    /**
    * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    */
    'periodSeconds'?: number;
    /**
    * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    */
    'successThreshold'?: number;
    /**
    * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
    */
    'tcpSocket'?: IoK8sApiCoreV1TCPSocketAction;
    /**
    * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    */
    'timeoutSeconds'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "exec",
            "baseName": "exec",
            "type": "IoK8sApiCoreV1ExecAction"
        },
        {
            "name": "failureThreshold",
            "baseName": "failureThreshold",
            "type": "number"
        },
        {
            "name": "httpGet",
            "baseName": "httpGet",
            "type": "IoK8sApiCoreV1HTTPGetAction"
        },
        {
            "name": "initialDelaySeconds",
            "baseName": "initialDelaySeconds",
            "type": "number"
        },
        {
            "name": "periodSeconds",
            "baseName": "periodSeconds",
            "type": "number"
        },
        {
            "name": "successThreshold",
            "baseName": "successThreshold",
            "type": "number"
        },
        {
            "name": "tcpSocket",
            "baseName": "tcpSocket",
            "type": "IoK8sApiCoreV1TCPSocketAction"
        },
        {
            "name": "timeoutSeconds",
            "baseName": "timeoutSeconds",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Probe.attributeTypeMap;
    }
}

/**
* Represents a projected volume source
*/
export class IoK8sApiCoreV1ProjectedVolumeSource {
    /**
    * list of volume projections
    */
    'sources': Array<IoK8sApiCoreV1VolumeProjection>;

    /**
    * Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    */
    'defaultMode'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "defaultMode",
            "baseName": "defaultMode",
            "type": "number"
        },
        {
            "name": "sources",
            "baseName": "sources",
            "type": "Array<IoK8sApiCoreV1VolumeProjection>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ProjectedVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
*/
export class IoK8sApiCoreV1QuobyteVolumeSource {
    /**
    * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
    */
    'registry': string;
    /**
    * Volume is a string that references an already created Quobyte volume by name.
    */
    'volume': string;

    /**
    * Group to map volume access to Default is no group
    */
    'group'?: string;
    /**
    * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
    */
    'readOnly'?: boolean;
    /**
    * User to map volume access to Defaults to serivceaccount user
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "registry",
            "baseName": "registry",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        },
        {
            "name": "volume",
            "baseName": "volume",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1QuobyteVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1RBDPersistentVolumeSource {
    /**
    * The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'image': string;
    /**
    * A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'monitors': Array<string>;

    /**
    * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    */
    'fsType'?: string;
    /**
    * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'keyring'?: string;
    /**
    * The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'pool'?: string;
    /**
    * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'readOnly'?: boolean;
    /**
    * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'secretRef'?: IoK8sApiCoreV1SecretReference;
    /**
    * The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "keyring",
            "baseName": "keyring",
            "type": "string"
        },
        {
            "name": "monitors",
            "baseName": "monitors",
            "type": "Array<string>"
        },
        {
            "name": "pool",
            "baseName": "pool",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1SecretReference"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1RBDPersistentVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1RBDVolumeSource {
    /**
    * The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'image': string;
    /**
    * A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'monitors': Array<string>;

    /**
    * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    */
    'fsType'?: string;
    /**
    * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'keyring'?: string;
    /**
    * The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'pool'?: string;
    /**
    * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'readOnly'?: boolean;
    /**
    * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'secretRef'?: IoK8sApiCoreV1LocalObjectReference;
    /**
    * The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "keyring",
            "baseName": "keyring",
            "type": "string"
        },
        {
            "name": "monitors",
            "baseName": "monitors",
            "type": "Array<string>"
        },
        {
            "name": "pool",
            "baseName": "pool",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1LocalObjectReference"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1RBDVolumeSource.attributeTypeMap;
    }
}

/**
* ReplicationController represents the configuration of a replication controller.
*/
export class IoK8sApiCoreV1ReplicationController {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1ReplicationControllerSpec;
    /**
    * Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiCoreV1ReplicationControllerStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1ReplicationControllerSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1ReplicationControllerStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ReplicationController.attributeTypeMap;
    }
}

/**
* ReplicationControllerCondition describes the state of a replication controller at a certain point.
*/
export class IoK8sApiCoreV1ReplicationControllerCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of replication controller condition.
    */
    'type': string;

    /**
    * The last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ReplicationControllerCondition.attributeTypeMap;
    }
}

/**
* ReplicationControllerList is a collection of replication controllers.
*/
export class IoK8sApiCoreV1ReplicationControllerList {
    /**
    * List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    */
    'items': Array<IoK8sApiCoreV1ReplicationController>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1ReplicationController>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ReplicationControllerList.attributeTypeMap;
    }
}

/**
* ReplicationControllerSpec is the specification of a replication controller.
*/
export class IoK8sApiCoreV1ReplicationControllerSpec {

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    */
    'replicas'?: number;
    /**
    * Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector'?: { [key: string]: string; };
    /**
    * Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    */
    'template'?: IoK8sApiCoreV1PodTemplateSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ReplicationControllerSpec.attributeTypeMap;
    }
}

/**
* ReplicationControllerStatus represents the current status of a replication controller.
*/
export class IoK8sApiCoreV1ReplicationControllerStatus {
    /**
    * Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    */
    'replicas': number;

    /**
    * The number of available replicas (ready for at least minReadySeconds) for this replication controller.
    */
    'availableReplicas'?: number;
    /**
    * Represents the latest available observations of a replication controller's current state.
    */
    'conditions'?: Array<IoK8sApiCoreV1ReplicationControllerCondition>;
    /**
    * The number of pods that have labels matching the labels of the pod template of the replication controller.
    */
    'fullyLabeledReplicas'?: number;
    /**
    * ObservedGeneration reflects the generation of the most recently observed replication controller.
    */
    'observedGeneration'?: number;
    /**
    * The number of ready replicas for this replication controller.
    */
    'readyReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiCoreV1ReplicationControllerCondition>"
        },
        {
            "name": "fullyLabeledReplicas",
            "baseName": "fullyLabeledReplicas",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ReplicationControllerStatus.attributeTypeMap;
    }
}

/**
* ResourceFieldSelector represents container resources (cpu, memory) and their output format
*/
export class IoK8sApiCoreV1ResourceFieldSelector {
    /**
    * Required: resource to select
    */
    'resource': string;

    /**
    * Container name: required for volumes, optional for env vars
    */
    'containerName'?: string;
    /**
    * Specifies the output format of the exposed resources, defaults to \"1\"
    */
    'divisor'?: IoK8sApimachineryPkgApiResourceQuantity;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "containerName",
            "baseName": "containerName",
            "type": "string"
        },
        {
            "name": "divisor",
            "baseName": "divisor",
            "type": "IoK8sApimachineryPkgApiResourceQuantity"
        },
        {
            "name": "resource",
            "baseName": "resource",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ResourceFieldSelector.attributeTypeMap;
    }
}

/**
* ResourceQuota sets aggregate quota restrictions enforced per namespace
*/
export class IoK8sApiCoreV1ResourceQuota {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1ResourceQuotaSpec;
    /**
    * Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiCoreV1ResourceQuotaStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1ResourceQuotaSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1ResourceQuotaStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ResourceQuota.attributeTypeMap;
    }
}

/**
* ResourceQuotaList is a list of ResourceQuota items.
*/
export class IoK8sApiCoreV1ResourceQuotaList {
    /**
    * Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    */
    'items': Array<IoK8sApiCoreV1ResourceQuota>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1ResourceQuota>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ResourceQuotaList.attributeTypeMap;
    }
}

/**
* ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
*/
export class IoK8sApiCoreV1ResourceQuotaSpec {

    /**
    * Hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    */
    'hard'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
    */
    'scopes'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hard",
            "baseName": "hard",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "scopes",
            "baseName": "scopes",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ResourceQuotaSpec.attributeTypeMap;
    }
}

/**
* ResourceQuotaStatus defines the enforced hard limits and observed use.
*/
export class IoK8sApiCoreV1ResourceQuotaStatus {

    /**
    * Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    */
    'hard'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Used is the current observed total usage of the resource in the namespace.
    */
    'used'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hard",
            "baseName": "hard",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "used",
            "baseName": "used",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ResourceQuotaStatus.attributeTypeMap;
    }
}

/**
* ResourceRequirements describes the compute resource requirements.
*/
export class IoK8sApiCoreV1ResourceRequirements {

    /**
    * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    */
    'limits'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
    * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    */
    'requests'?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "limits",
            "baseName": "limits",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ResourceRequirements.attributeTypeMap;
    }
}

/**
* SELinuxOptions are the labels to be applied to the container
*/
export class IoK8sApiCoreV1SELinuxOptions {

    /**
    * Level is SELinux level label that applies to the container.
    */
    'level'?: string;
    /**
    * Role is a SELinux role label that applies to the container.
    */
    'role'?: string;
    /**
    * Type is a SELinux type label that applies to the container.
    */
    'type'?: string;
    /**
    * User is a SELinux user label that applies to the container.
    */
    'user'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "level",
            "baseName": "level",
            "type": "string"
        },
        {
            "name": "role",
            "baseName": "role",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SELinuxOptions.attributeTypeMap;
    }
}

/**
* ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
*/
export class IoK8sApiCoreV1ScaleIOPersistentVolumeSource {
    /**
    * The host address of the ScaleIO API Gateway.
    */
    'gateway': string;
    /**
    * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    */
    'secretRef': IoK8sApiCoreV1SecretReference;
    /**
    * The name of the storage system as configured in ScaleIO.
    */
    'system': string;

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * The name of the ScaleIO Protection Domain for the configured storage.
    */
    'protectionDomain'?: string;
    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;
    /**
    * Flag to enable/disable SSL communication with Gateway, default false
    */
    'sslEnabled'?: boolean;
    /**
    * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
    */
    'storageMode'?: string;
    /**
    * The ScaleIO Storage Pool associated with the protection domain.
    */
    'storagePool'?: string;
    /**
    * The name of a volume already created in the ScaleIO system that is associated with this volume source.
    */
    'volumeName'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "gateway",
            "baseName": "gateway",
            "type": "string"
        },
        {
            "name": "protectionDomain",
            "baseName": "protectionDomain",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1SecretReference"
        },
        {
            "name": "sslEnabled",
            "baseName": "sslEnabled",
            "type": "boolean"
        },
        {
            "name": "storageMode",
            "baseName": "storageMode",
            "type": "string"
        },
        {
            "name": "storagePool",
            "baseName": "storagePool",
            "type": "string"
        },
        {
            "name": "system",
            "baseName": "system",
            "type": "string"
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ScaleIOPersistentVolumeSource.attributeTypeMap;
    }
}

/**
* ScaleIOVolumeSource represents a persistent ScaleIO volume
*/
export class IoK8sApiCoreV1ScaleIOVolumeSource {
    /**
    * The host address of the ScaleIO API Gateway.
    */
    'gateway': string;
    /**
    * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    */
    'secretRef': IoK8sApiCoreV1LocalObjectReference;
    /**
    * The name of the storage system as configured in ScaleIO.
    */
    'system': string;

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * The name of the ScaleIO Protection Domain for the configured storage.
    */
    'protectionDomain'?: string;
    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;
    /**
    * Flag to enable/disable SSL communication with Gateway, default false
    */
    'sslEnabled'?: boolean;
    /**
    * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
    */
    'storageMode'?: string;
    /**
    * The ScaleIO Storage Pool associated with the protection domain.
    */
    'storagePool'?: string;
    /**
    * The name of a volume already created in the ScaleIO system that is associated with this volume source.
    */
    'volumeName'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "gateway",
            "baseName": "gateway",
            "type": "string"
        },
        {
            "name": "protectionDomain",
            "baseName": "protectionDomain",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1LocalObjectReference"
        },
        {
            "name": "sslEnabled",
            "baseName": "sslEnabled",
            "type": "boolean"
        },
        {
            "name": "storageMode",
            "baseName": "storageMode",
            "type": "string"
        },
        {
            "name": "storagePool",
            "baseName": "storagePool",
            "type": "string"
        },
        {
            "name": "system",
            "baseName": "system",
            "type": "string"
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ScaleIOVolumeSource.attributeTypeMap;
    }
}

/**
* Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
*/
export class IoK8sApiCoreV1Secret {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
    */
    'data'?: { [key: string]: string; };
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.
    */
    'stringData'?: { [key: string]: string; };
    /**
    * Used to facilitate programmatic handling of secret data.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "stringData",
            "baseName": "stringData",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Secret.attributeTypeMap;
    }
}

/**
* SecretEnvSource selects a Secret to populate the environment variables with.  The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
*/
export class IoK8sApiCoreV1SecretEnvSource {

    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Specify whether the Secret must be defined
    */
    'optional'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SecretEnvSource.attributeTypeMap;
    }
}

/**
* SecretKeySelector selects a key of a Secret.
*/
export class IoK8sApiCoreV1SecretKeySelector {
    /**
    * The key of the secret to select from.  Must be a valid secret key.
    */
    'key': string;

    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Specify whether the Secret or it's key must be defined
    */
    'optional'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SecretKeySelector.attributeTypeMap;
    }
}

/**
* SecretList is a list of Secret.
*/
export class IoK8sApiCoreV1SecretList {
    /**
    * Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
    */
    'items': Array<IoK8sApiCoreV1Secret>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1Secret>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SecretList.attributeTypeMap;
    }
}

/**
* Adapts a secret into a projected volume.  The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
*/
export class IoK8sApiCoreV1SecretProjection {

    /**
    * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    */
    'items'?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
    * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name'?: string;
    /**
    * Specify whether the Secret or its key must be defined
    */
    'optional'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1KeyToPath>"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SecretProjection.attributeTypeMap;
    }
}

/**
* SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
*/
export class IoK8sApiCoreV1SecretReference {

    /**
    * Name is unique within a namespace to reference a secret resource.
    */
    'name'?: string;
    /**
    * Namespace defines the space within which the secret name must be unique.
    */
    'namespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SecretReference.attributeTypeMap;
    }
}

/**
* Adapts a Secret into a volume.  The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
*/
export class IoK8sApiCoreV1SecretVolumeSource {

    /**
    * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    */
    'defaultMode'?: number;
    /**
    * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    */
    'items'?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
    * Specify whether the Secret or it's keys must be defined
    */
    'optional'?: boolean;
    /**
    * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    */
    'secretName'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "defaultMode",
            "baseName": "defaultMode",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1KeyToPath>"
        },
        {
            "name": "optional",
            "baseName": "optional",
            "type": "boolean"
        },
        {
            "name": "secretName",
            "baseName": "secretName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SecretVolumeSource.attributeTypeMap;
    }
}

/**
* SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
*/
export class IoK8sApiCoreV1SecurityContext {

    /**
    * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
    */
    'allowPrivilegeEscalation'?: boolean;
    /**
    * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
    */
    'capabilities'?: IoK8sApiCoreV1Capabilities;
    /**
    * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
    */
    'privileged'?: boolean;
    /**
    * Whether this container has a read-only root filesystem. Default is false.
    */
    'readOnlyRootFilesystem'?: boolean;
    /**
    * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    */
    'runAsNonRoot'?: boolean;
    /**
    * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    */
    'runAsUser'?: number;
    /**
    * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    */
    'seLinuxOptions'?: IoK8sApiCoreV1SELinuxOptions;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowPrivilegeEscalation",
            "baseName": "allowPrivilegeEscalation",
            "type": "boolean"
        },
        {
            "name": "capabilities",
            "baseName": "capabilities",
            "type": "IoK8sApiCoreV1Capabilities"
        },
        {
            "name": "privileged",
            "baseName": "privileged",
            "type": "boolean"
        },
        {
            "name": "readOnlyRootFilesystem",
            "baseName": "readOnlyRootFilesystem",
            "type": "boolean"
        },
        {
            "name": "runAsNonRoot",
            "baseName": "runAsNonRoot",
            "type": "boolean"
        },
        {
            "name": "runAsUser",
            "baseName": "runAsUser",
            "type": "number"
        },
        {
            "name": "seLinuxOptions",
            "baseName": "seLinuxOptions",
            "type": "IoK8sApiCoreV1SELinuxOptions"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SecurityContext.attributeTypeMap;
    }
}

/**
* Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
*/
export class IoK8sApiCoreV1Service {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiCoreV1ServiceSpec;
    /**
    * Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiCoreV1ServiceStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiCoreV1ServiceSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiCoreV1ServiceStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Service.attributeTypeMap;
    }
}

/**
* ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
*/
export class IoK8sApiCoreV1ServiceAccount {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
    */
    'automountServiceAccountToken'?: boolean;
    /**
    * ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    */
    'imagePullSecrets'?: Array<IoK8sApiCoreV1LocalObjectReference>;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret
    */
    'secrets'?: Array<IoK8sApiCoreV1ObjectReference>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "automountServiceAccountToken",
            "baseName": "automountServiceAccountToken",
            "type": "boolean"
        },
        {
            "name": "imagePullSecrets",
            "baseName": "imagePullSecrets",
            "type": "Array<IoK8sApiCoreV1LocalObjectReference>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "secrets",
            "baseName": "secrets",
            "type": "Array<IoK8sApiCoreV1ObjectReference>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ServiceAccount.attributeTypeMap;
    }
}

/**
* ServiceAccountList is a list of ServiceAccount objects
*/
export class IoK8sApiCoreV1ServiceAccountList {
    /**
    * List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    */
    'items': Array<IoK8sApiCoreV1ServiceAccount>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1ServiceAccount>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ServiceAccountList.attributeTypeMap;
    }
}

/**
* ServiceList holds a list of services.
*/
export class IoK8sApiCoreV1ServiceList {
    /**
    * List of services
    */
    'items': Array<IoK8sApiCoreV1Service>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiCoreV1Service>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ServiceList.attributeTypeMap;
    }
}

/**
* ServicePort contains information on service's port.
*/
export class IoK8sApiCoreV1ServicePort {
    /**
    * The port that will be exposed by this service.
    */
    'port': number;

    /**
    * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.
    */
    'name'?: string;
    /**
    * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    */
    'nodePort'?: number;
    /**
    * The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP.
    */
    'protocol'?: string;
    /**
    * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
    */
    'targetPort'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nodePort",
            "baseName": "nodePort",
            "type": "number"
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        },
        {
            "name": "targetPort",
            "baseName": "targetPort",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ServicePort.attributeTypeMap;
    }
}

/**
* ServiceSpec describes the attributes that a user creates on a service.
*/
export class IoK8sApiCoreV1ServiceSpec {

    /**
    * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    */
    'clusterIP'?: string;
    /**
    * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
    */
    'externalIPs'?: Array<string>;
    /**
    * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
    */
    'externalName'?: string;
    /**
    * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
    */
    'externalTrafficPolicy'?: string;
    /**
    * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
    */
    'healthCheckNodePort'?: number;
    /**
    * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
    */
    'loadBalancerIP'?: string;
    /**
    * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    */
    'loadBalancerSourceRanges'?: Array<string>;
    /**
    * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    */
    'ports'?: Array<IoK8sApiCoreV1ServicePort>;
    /**
    * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery. This field will replace the service.alpha.kubernetes.io/tolerate-unready-endpoints when that annotation is deprecated and all clients have been converted to use this field.
    */
    'publishNotReadyAddresses'?: boolean;
    /**
    * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
    */
    'selector'?: { [key: string]: string; };
    /**
    * Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    */
    'sessionAffinity'?: string;
    /**
    * sessionAffinityConfig contains the configurations of session affinity.
    */
    'sessionAffinityConfig'?: IoK8sApiCoreV1SessionAffinityConfig;
    /**
    * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clusterIP",
            "baseName": "clusterIP",
            "type": "string"
        },
        {
            "name": "externalIPs",
            "baseName": "externalIPs",
            "type": "Array<string>"
        },
        {
            "name": "externalName",
            "baseName": "externalName",
            "type": "string"
        },
        {
            "name": "externalTrafficPolicy",
            "baseName": "externalTrafficPolicy",
            "type": "string"
        },
        {
            "name": "healthCheckNodePort",
            "baseName": "healthCheckNodePort",
            "type": "number"
        },
        {
            "name": "loadBalancerIP",
            "baseName": "loadBalancerIP",
            "type": "string"
        },
        {
            "name": "loadBalancerSourceRanges",
            "baseName": "loadBalancerSourceRanges",
            "type": "Array<string>"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<IoK8sApiCoreV1ServicePort>"
        },
        {
            "name": "publishNotReadyAddresses",
            "baseName": "publishNotReadyAddresses",
            "type": "boolean"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "sessionAffinity",
            "baseName": "sessionAffinity",
            "type": "string"
        },
        {
            "name": "sessionAffinityConfig",
            "baseName": "sessionAffinityConfig",
            "type": "IoK8sApiCoreV1SessionAffinityConfig"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ServiceSpec.attributeTypeMap;
    }
}

/**
* ServiceStatus represents the current status of a service.
*/
export class IoK8sApiCoreV1ServiceStatus {

    /**
    * LoadBalancer contains the current status of the load-balancer, if one is present.
    */
    'loadBalancer'?: IoK8sApiCoreV1LoadBalancerStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "loadBalancer",
            "baseName": "loadBalancer",
            "type": "IoK8sApiCoreV1LoadBalancerStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1ServiceStatus.attributeTypeMap;
    }
}

/**
* SessionAffinityConfig represents the configurations of session affinity.
*/
export class IoK8sApiCoreV1SessionAffinityConfig {

    /**
    * clientIP contains the configurations of Client IP based session affinity.
    */
    'clientIP'?: IoK8sApiCoreV1ClientIPConfig;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clientIP",
            "baseName": "clientIP",
            "type": "IoK8sApiCoreV1ClientIPConfig"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1SessionAffinityConfig.attributeTypeMap;
    }
}

/**
* Represents a StorageOS persistent volume resource.
*/
export class IoK8sApiCoreV1StorageOSPersistentVolumeSource {

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;
    /**
    * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    */
    'secretRef'?: IoK8sApiCoreV1ObjectReference;
    /**
    * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    */
    'volumeName'?: string;
    /**
    * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    */
    'volumeNamespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1ObjectReference"
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string"
        },
        {
            "name": "volumeNamespace",
            "baseName": "volumeNamespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1StorageOSPersistentVolumeSource.attributeTypeMap;
    }
}

/**
* Represents a StorageOS persistent volume resource.
*/
export class IoK8sApiCoreV1StorageOSVolumeSource {

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    */
    'readOnly'?: boolean;
    /**
    * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    */
    'secretRef'?: IoK8sApiCoreV1LocalObjectReference;
    /**
    * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    */
    'volumeName'?: string;
    /**
    * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    */
    'volumeNamespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "secretRef",
            "baseName": "secretRef",
            "type": "IoK8sApiCoreV1LocalObjectReference"
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string"
        },
        {
            "name": "volumeNamespace",
            "baseName": "volumeNamespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1StorageOSVolumeSource.attributeTypeMap;
    }
}

/**
* TCPSocketAction describes an action based on opening a socket
*/
export class IoK8sApiCoreV1TCPSocketAction {
    /**
    * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    */
    'port': string | number;

    /**
    * Optional: Host name to connect to, defaults to the pod IP.
    */
    'host'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "host",
            "baseName": "host",
            "type": "string"
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1TCPSocketAction.attributeTypeMap;
    }
}

/**
* The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.
*/
export class IoK8sApiCoreV1Taint {
    /**
    * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    */
    'effect': string;
    /**
    * Required. The taint key to be applied to a node.
    */
    'key': string;

    /**
    * TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    */
    'timeAdded'?: string;
    /**
    * Required. The taint value corresponding to the taint key.
    */
    'value'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "effect",
            "baseName": "effect",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "timeAdded",
            "baseName": "timeAdded",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Taint.attributeTypeMap;
    }
}

/**
* The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
*/
export class IoK8sApiCoreV1Toleration {

    /**
    * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    */
    'effect'?: string;
    /**
    * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    */
    'key'?: string;
    /**
    * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    */
    'operator'?: string;
    /**
    * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    */
    'tolerationSeconds'?: number;
    /**
    * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    */
    'value'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "effect",
            "baseName": "effect",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string"
        },
        {
            "name": "tolerationSeconds",
            "baseName": "tolerationSeconds",
            "type": "number"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Toleration.attributeTypeMap;
    }
}

/**
* Volume represents a named volume in a pod that may be accessed by any container in the pod.
*/
export class IoK8sApiCoreV1Volume {
    /**
    * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name': string;

    /**
    * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    */
    'awsElasticBlockStore'?: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource;
    /**
    * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    */
    'azureDisk'?: IoK8sApiCoreV1AzureDiskVolumeSource;
    /**
    * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    */
    'azureFile'?: IoK8sApiCoreV1AzureFileVolumeSource;
    /**
    * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    */
    'cephfs'?: IoK8sApiCoreV1CephFSVolumeSource;
    /**
    * Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    */
    'cinder'?: IoK8sApiCoreV1CinderVolumeSource;
    /**
    * ConfigMap represents a configMap that should populate this volume
    */
    'configMap'?: IoK8sApiCoreV1ConfigMapVolumeSource;
    /**
    * DownwardAPI represents downward API about the pod that should populate this volume
    */
    'downwardAPI'?: IoK8sApiCoreV1DownwardAPIVolumeSource;
    /**
    * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    */
    'emptyDir'?: IoK8sApiCoreV1EmptyDirVolumeSource;
    /**
    * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    */
    'fc'?: IoK8sApiCoreV1FCVolumeSource;
    /**
    * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    */
    'flexVolume'?: IoK8sApiCoreV1FlexVolumeSource;
    /**
    * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    */
    'flocker'?: IoK8sApiCoreV1FlockerVolumeSource;
    /**
    * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    */
    'gcePersistentDisk'?: IoK8sApiCoreV1GCEPersistentDiskVolumeSource;
    /**
    * GitRepo represents a git repository at a particular revision.
    */
    'gitRepo'?: IoK8sApiCoreV1GitRepoVolumeSource;
    /**
    * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
    */
    'glusterfs'?: IoK8sApiCoreV1GlusterfsVolumeSource;
    /**
    * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    */
    'hostPath'?: IoK8sApiCoreV1HostPathVolumeSource;
    /**
    * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
    */
    'iscsi'?: IoK8sApiCoreV1ISCSIVolumeSource;
    /**
    * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    */
    'nfs'?: IoK8sApiCoreV1NFSVolumeSource;
    /**
    * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    */
    'persistentVolumeClaim'?: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource;
    /**
    * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    */
    'photonPersistentDisk'?: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource;
    /**
    * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    */
    'portworxVolume'?: IoK8sApiCoreV1PortworxVolumeSource;
    /**
    * Items for all in one resources secrets, configmaps, and downward API
    */
    'projected'?: IoK8sApiCoreV1ProjectedVolumeSource;
    /**
    * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    */
    'quobyte'?: IoK8sApiCoreV1QuobyteVolumeSource;
    /**
    * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
    */
    'rbd'?: IoK8sApiCoreV1RBDVolumeSource;
    /**
    * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    */
    'scaleIO'?: IoK8sApiCoreV1ScaleIOVolumeSource;
    /**
    * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    */
    'secret'?: IoK8sApiCoreV1SecretVolumeSource;
    /**
    * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    */
    'storageos'?: IoK8sApiCoreV1StorageOSVolumeSource;
    /**
    * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    */
    'vsphereVolume'?: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "awsElasticBlockStore",
            "baseName": "awsElasticBlockStore",
            "type": "IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource"
        },
        {
            "name": "azureDisk",
            "baseName": "azureDisk",
            "type": "IoK8sApiCoreV1AzureDiskVolumeSource"
        },
        {
            "name": "azureFile",
            "baseName": "azureFile",
            "type": "IoK8sApiCoreV1AzureFileVolumeSource"
        },
        {
            "name": "cephfs",
            "baseName": "cephfs",
            "type": "IoK8sApiCoreV1CephFSVolumeSource"
        },
        {
            "name": "cinder",
            "baseName": "cinder",
            "type": "IoK8sApiCoreV1CinderVolumeSource"
        },
        {
            "name": "configMap",
            "baseName": "configMap",
            "type": "IoK8sApiCoreV1ConfigMapVolumeSource"
        },
        {
            "name": "downwardAPI",
            "baseName": "downwardAPI",
            "type": "IoK8sApiCoreV1DownwardAPIVolumeSource"
        },
        {
            "name": "emptyDir",
            "baseName": "emptyDir",
            "type": "IoK8sApiCoreV1EmptyDirVolumeSource"
        },
        {
            "name": "fc",
            "baseName": "fc",
            "type": "IoK8sApiCoreV1FCVolumeSource"
        },
        {
            "name": "flexVolume",
            "baseName": "flexVolume",
            "type": "IoK8sApiCoreV1FlexVolumeSource"
        },
        {
            "name": "flocker",
            "baseName": "flocker",
            "type": "IoK8sApiCoreV1FlockerVolumeSource"
        },
        {
            "name": "gcePersistentDisk",
            "baseName": "gcePersistentDisk",
            "type": "IoK8sApiCoreV1GCEPersistentDiskVolumeSource"
        },
        {
            "name": "gitRepo",
            "baseName": "gitRepo",
            "type": "IoK8sApiCoreV1GitRepoVolumeSource"
        },
        {
            "name": "glusterfs",
            "baseName": "glusterfs",
            "type": "IoK8sApiCoreV1GlusterfsVolumeSource"
        },
        {
            "name": "hostPath",
            "baseName": "hostPath",
            "type": "IoK8sApiCoreV1HostPathVolumeSource"
        },
        {
            "name": "iscsi",
            "baseName": "iscsi",
            "type": "IoK8sApiCoreV1ISCSIVolumeSource"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nfs",
            "baseName": "nfs",
            "type": "IoK8sApiCoreV1NFSVolumeSource"
        },
        {
            "name": "persistentVolumeClaim",
            "baseName": "persistentVolumeClaim",
            "type": "IoK8sApiCoreV1PersistentVolumeClaimVolumeSource"
        },
        {
            "name": "photonPersistentDisk",
            "baseName": "photonPersistentDisk",
            "type": "IoK8sApiCoreV1PhotonPersistentDiskVolumeSource"
        },
        {
            "name": "portworxVolume",
            "baseName": "portworxVolume",
            "type": "IoK8sApiCoreV1PortworxVolumeSource"
        },
        {
            "name": "projected",
            "baseName": "projected",
            "type": "IoK8sApiCoreV1ProjectedVolumeSource"
        },
        {
            "name": "quobyte",
            "baseName": "quobyte",
            "type": "IoK8sApiCoreV1QuobyteVolumeSource"
        },
        {
            "name": "rbd",
            "baseName": "rbd",
            "type": "IoK8sApiCoreV1RBDVolumeSource"
        },
        {
            "name": "scaleIO",
            "baseName": "scaleIO",
            "type": "IoK8sApiCoreV1ScaleIOVolumeSource"
        },
        {
            "name": "secret",
            "baseName": "secret",
            "type": "IoK8sApiCoreV1SecretVolumeSource"
        },
        {
            "name": "storageos",
            "baseName": "storageos",
            "type": "IoK8sApiCoreV1StorageOSVolumeSource"
        },
        {
            "name": "vsphereVolume",
            "baseName": "vsphereVolume",
            "type": "IoK8sApiCoreV1VsphereVirtualDiskVolumeSource"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1Volume.attributeTypeMap;
    }
}

/**
* volumeDevice describes a mapping of a raw block device within a container.
*/
export class IoK8sApiCoreV1VolumeDevice {
    /**
    * devicePath is the path inside of the container that the device will be mapped to.
    */
    'devicePath': string;
    /**
    * name must match the name of a persistentVolumeClaim in the pod
    */
    'name': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "devicePath",
            "baseName": "devicePath",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1VolumeDevice.attributeTypeMap;
    }
}

/**
* VolumeMount describes a mounting of a Volume within a container.
*/
export class IoK8sApiCoreV1VolumeMount {
    /**
    * Path within the container at which the volume should be mounted.  Must not contain ':'.
    */
    'mountPath': string;
    /**
    * This must match the Name of a Volume.
    */
    'name': string;

    /**
    * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationHostToContainer is used. This field is alpha in 1.8 and can be reworked or removed in a future release.
    */
    'mountPropagation'?: string;
    /**
    * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    */
    'readOnly'?: boolean;
    /**
    * Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).
    */
    'subPath'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "mountPath",
            "baseName": "mountPath",
            "type": "string"
        },
        {
            "name": "mountPropagation",
            "baseName": "mountPropagation",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean"
        },
        {
            "name": "subPath",
            "baseName": "subPath",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1VolumeMount.attributeTypeMap;
    }
}

/**
* Projection that may be projected along with other supported volume types
*/
export class IoK8sApiCoreV1VolumeProjection {

    /**
    * information about the configMap data to project
    */
    'configMap'?: IoK8sApiCoreV1ConfigMapProjection;
    /**
    * information about the downwardAPI data to project
    */
    'downwardAPI'?: IoK8sApiCoreV1DownwardAPIProjection;
    /**
    * information about the secret data to project
    */
    'secret'?: IoK8sApiCoreV1SecretProjection;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "configMap",
            "baseName": "configMap",
            "type": "IoK8sApiCoreV1ConfigMapProjection"
        },
        {
            "name": "downwardAPI",
            "baseName": "downwardAPI",
            "type": "IoK8sApiCoreV1DownwardAPIProjection"
        },
        {
            "name": "secret",
            "baseName": "secret",
            "type": "IoK8sApiCoreV1SecretProjection"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1VolumeProjection.attributeTypeMap;
    }
}

/**
* Represents a vSphere volume resource.
*/
export class IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
    /**
    * Path that identifies vSphere volume vmdk
    */
    'volumePath': string;

    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    */
    'fsType'?: string;
    /**
    * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    */
    'storagePolicyID'?: string;
    /**
    * Storage Policy Based Management (SPBM) profile name.
    */
    'storagePolicyName'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fsType",
            "baseName": "fsType",
            "type": "string"
        },
        {
            "name": "storagePolicyID",
            "baseName": "storagePolicyID",
            "type": "string"
        },
        {
            "name": "storagePolicyName",
            "baseName": "storagePolicyName",
            "type": "string"
        },
        {
            "name": "volumePath",
            "baseName": "volumePath",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.attributeTypeMap;
    }
}

/**
* The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
*/
export class IoK8sApiCoreV1WeightedPodAffinityTerm {
    /**
    * Required. A pod affinity term, associated with the corresponding weight.
    */
    'podAffinityTerm': IoK8sApiCoreV1PodAffinityTerm;
    /**
    * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    */
    'weight': number;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "podAffinityTerm",
            "baseName": "podAffinityTerm",
            "type": "IoK8sApiCoreV1PodAffinityTerm"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiCoreV1WeightedPodAffinityTerm.attributeTypeMap;
    }
}

/**
* Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.
*/
export class IoK8sApiEventsV1beta1Event {
    /**
    * Required. Time when this Event was first observed.
    */
    'eventTime': string;

    /**
    * What action was taken/failed regarding to the regarding object.
    */
    'action'?: string;
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Deprecated field assuring backward compatibility with core.v1 Event type
    */
    'deprecatedCount'?: number;
    /**
    * Deprecated field assuring backward compatibility with core.v1 Event type
    */
    'deprecatedFirstTimestamp'?: string;
    /**
    * Deprecated field assuring backward compatibility with core.v1 Event type
    */
    'deprecatedLastTimestamp'?: string;
    /**
    * Deprecated field assuring backward compatibility with core.v1 Event type
    */
    'deprecatedSource'?: IoK8sApiCoreV1EventSource;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
    */
    'note'?: string;
    /**
    * Why the action was taken.
    */
    'reason'?: string;
    /**
    * The object this Event is about. In most cases it's an Object reporting controller implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
    */
    'regarding'?: IoK8sApiCoreV1ObjectReference;
    /**
    * Optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
    */
    'related'?: IoK8sApiCoreV1ObjectReference;
    /**
    * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
    */
    'reportingController'?: string;
    /**
    * ID of the controller instance, e.g. `kubelet-xyzf`.
    */
    'reportingInstance'?: string;
    /**
    * Data about the Event series this event represents or nil if it's a singleton Event.
    */
    'series'?: IoK8sApiEventsV1beta1EventSeries;
    /**
    * Type of this event (Normal, Warning), new types could be added in the future.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "deprecatedCount",
            "baseName": "deprecatedCount",
            "type": "number"
        },
        {
            "name": "deprecatedFirstTimestamp",
            "baseName": "deprecatedFirstTimestamp",
            "type": "string"
        },
        {
            "name": "deprecatedLastTimestamp",
            "baseName": "deprecatedLastTimestamp",
            "type": "string"
        },
        {
            "name": "deprecatedSource",
            "baseName": "deprecatedSource",
            "type": "IoK8sApiCoreV1EventSource"
        },
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "note",
            "baseName": "note",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "regarding",
            "baseName": "regarding",
            "type": "IoK8sApiCoreV1ObjectReference"
        },
        {
            "name": "related",
            "baseName": "related",
            "type": "IoK8sApiCoreV1ObjectReference"
        },
        {
            "name": "reportingController",
            "baseName": "reportingController",
            "type": "string"
        },
        {
            "name": "reportingInstance",
            "baseName": "reportingInstance",
            "type": "string"
        },
        {
            "name": "series",
            "baseName": "series",
            "type": "IoK8sApiEventsV1beta1EventSeries"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiEventsV1beta1Event.attributeTypeMap;
    }
}

/**
* EventList is a list of Event objects.
*/
export class IoK8sApiEventsV1beta1EventList {
    /**
    * Items is a list of schema objects.
    */
    'items': Array<IoK8sApiEventsV1beta1Event>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiEventsV1beta1Event>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiEventsV1beta1EventList.attributeTypeMap;
    }
}

/**
* EventSeries contain information on series of events, i.e. thing that was/is happening continously for some time.
*/
export class IoK8sApiEventsV1beta1EventSeries {
    /**
    * Number of occurrences in this series up to the last heartbeat time
    */
    'count': number;
    /**
    * Time when last Event from the series was seen before last heartbeat.
    */
    'lastObservedTime': string;
    /**
    * Information whether this series is ongoing or finished.
    */
    'state': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "lastObservedTime",
            "baseName": "lastObservedTime",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiEventsV1beta1EventSeries.attributeTypeMap;
    }
}

/**
* AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
*/
export class IoK8sApiExtensionsV1beta1AllowedFlexVolume {
    /**
    * Driver is the name of the Flexvolume driver.
    */
    'driver': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "driver",
            "baseName": "driver",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1AllowedFlexVolume.attributeTypeMap;
    }
}

/**
* defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
*/
export class IoK8sApiExtensionsV1beta1AllowedHostPath {

    /**
    * is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.  Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
    */
    'pathPrefix'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pathPrefix",
            "baseName": "pathPrefix",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1AllowedHostPath.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of DaemonSet is deprecated by apps/v1beta2/DaemonSet. See the release notes for more information. DaemonSet represents the configuration of a daemon set.
*/
export class IoK8sApiExtensionsV1beta1DaemonSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiExtensionsV1beta1DaemonSetSpec;
    /**
    * The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiExtensionsV1beta1DaemonSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiExtensionsV1beta1DaemonSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiExtensionsV1beta1DaemonSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DaemonSet.attributeTypeMap;
    }
}

/**
* DaemonSetCondition describes the state of a DaemonSet at a certain point.
*/
export class IoK8sApiExtensionsV1beta1DaemonSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of DaemonSet condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DaemonSetCondition.attributeTypeMap;
    }
}

/**
* DaemonSetList is a collection of daemon sets.
*/
export class IoK8sApiExtensionsV1beta1DaemonSetList {
    /**
    * A list of daemon sets.
    */
    'items': Array<IoK8sApiExtensionsV1beta1DaemonSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiExtensionsV1beta1DaemonSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DaemonSetList.attributeTypeMap;
    }
}

/**
* DaemonSetSpec is the specification of a daemon set.
*/
export class IoK8sApiExtensionsV1beta1DaemonSetSpec {
    /**
    * An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
    */
    'minReadySeconds'?: number;
    /**
    * The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    */
    'revisionHistoryLimit'?: number;
    /**
    * A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
    */
    'templateGeneration'?: number;
    /**
    * An update strategy to replace existing DaemonSet pods with new pods.
    */
    'updateStrategy'?: IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        },
        {
            "name": "templateGeneration",
            "baseName": "templateGeneration",
            "type": "number"
        },
        {
            "name": "updateStrategy",
            "baseName": "updateStrategy",
            "type": "IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DaemonSetSpec.attributeTypeMap;
    }
}

/**
* DaemonSetStatus represents the current status of a daemon set.
*/
export class IoK8sApiExtensionsV1beta1DaemonSetStatus {
    /**
    * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'currentNumberScheduled': number;
    /**
    * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'desiredNumberScheduled': number;
    /**
    * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    */
    'numberMisscheduled': number;
    /**
    * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
    */
    'numberReady': number;

    /**
    * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a DaemonSet's current state.
    */
    'conditions'?: Array<IoK8sApiExtensionsV1beta1DaemonSetCondition>;
    /**
    * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
    */
    'numberAvailable'?: number;
    /**
    * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
    */
    'numberUnavailable'?: number;
    /**
    * The most recent generation observed by the daemon set controller.
    */
    'observedGeneration'?: number;
    /**
    * The total number of nodes that are running updated daemon pod
    */
    'updatedNumberScheduled'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiExtensionsV1beta1DaemonSetCondition>"
        },
        {
            "name": "currentNumberScheduled",
            "baseName": "currentNumberScheduled",
            "type": "number"
        },
        {
            "name": "desiredNumberScheduled",
            "baseName": "desiredNumberScheduled",
            "type": "number"
        },
        {
            "name": "numberAvailable",
            "baseName": "numberAvailable",
            "type": "number"
        },
        {
            "name": "numberMisscheduled",
            "baseName": "numberMisscheduled",
            "type": "number"
        },
        {
            "name": "numberReady",
            "baseName": "numberReady",
            "type": "number"
        },
        {
            "name": "numberUnavailable",
            "baseName": "numberUnavailable",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "updatedNumberScheduled",
            "baseName": "updatedNumberScheduled",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DaemonSetStatus.attributeTypeMap;
    }
}

export class IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy {

    /**
    * Rolling update config params. Present only if type = \"RollingUpdate\".
    */
    'rollingUpdate'?: IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet;
    /**
    * Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is OnDelete.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.
*/
export class IoK8sApiExtensionsV1beta1Deployment {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the Deployment.
    */
    'spec'?: IoK8sApiExtensionsV1beta1DeploymentSpec;
    /**
    * Most recently observed status of the Deployment.
    */
    'status'?: IoK8sApiExtensionsV1beta1DeploymentStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiExtensionsV1beta1DeploymentSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiExtensionsV1beta1DeploymentStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1Deployment.attributeTypeMap;
    }
}

/**
* DeploymentCondition describes the state of a deployment at a certain point.
*/
export class IoK8sApiExtensionsV1beta1DeploymentCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of deployment condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * The last time this condition was updated.
    */
    'lastUpdateTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "lastUpdateTime",
            "baseName": "lastUpdateTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DeploymentCondition.attributeTypeMap;
    }
}

/**
* DeploymentList is a list of Deployments.
*/
export class IoK8sApiExtensionsV1beta1DeploymentList {
    /**
    * Items is the list of Deployments.
    */
    'items': Array<IoK8sApiExtensionsV1beta1Deployment>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiExtensionsV1beta1Deployment>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DeploymentList.attributeTypeMap;
    }
}

/**
* DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
*/
export class IoK8sApiExtensionsV1beta1DeploymentRollback {
    /**
    * Required: This must match the Name of a deployment.
    */
    'name': string;
    /**
    * The config of this deployment rollback.
    */
    'rollbackTo': IoK8sApiExtensionsV1beta1RollbackConfig;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * The annotations to be updated to a deployment
    */
    'updatedAnnotations'?: { [key: string]: string; };

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "rollbackTo",
            "baseName": "rollbackTo",
            "type": "IoK8sApiExtensionsV1beta1RollbackConfig"
        },
        {
            "name": "updatedAnnotations",
            "baseName": "updatedAnnotations",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DeploymentRollback.attributeTypeMap;
    }
}

/**
* DeploymentSpec is the specification of the desired behavior of the Deployment.
*/
export class IoK8sApiExtensionsV1beta1DeploymentSpec {
    /**
    * Template describes the pods that will be created.
    */
    'template': IoK8sApiCoreV1PodTemplateSpec;

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Indicates that the deployment is paused and will not be processed by the deployment controller.
    */
    'paused'?: boolean;
    /**
    * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.
    */
    'progressDeadlineSeconds'?: number;
    /**
    * Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    */
    'replicas'?: number;
    /**
    * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.
    */
    'revisionHistoryLimit'?: number;
    /**
    * DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
    */
    'rollbackTo'?: IoK8sApiExtensionsV1beta1RollbackConfig;
    /**
    * Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * The deployment strategy to use to replace existing pods with new ones.
    */
    'strategy'?: IoK8sApiExtensionsV1beta1DeploymentStrategy;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "paused",
            "baseName": "paused",
            "type": "boolean"
        },
        {
            "name": "progressDeadlineSeconds",
            "baseName": "progressDeadlineSeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "revisionHistoryLimit",
            "baseName": "revisionHistoryLimit",
            "type": "number"
        },
        {
            "name": "rollbackTo",
            "baseName": "rollbackTo",
            "type": "IoK8sApiExtensionsV1beta1RollbackConfig"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "strategy",
            "baseName": "strategy",
            "type": "IoK8sApiExtensionsV1beta1DeploymentStrategy"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DeploymentSpec.attributeTypeMap;
    }
}

/**
* DeploymentStatus is the most recently observed status of the Deployment.
*/
export class IoK8sApiExtensionsV1beta1DeploymentStatus {

    /**
    * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    */
    'availableReplicas'?: number;
    /**
    * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    */
    'collisionCount'?: number;
    /**
    * Represents the latest available observations of a deployment's current state.
    */
    'conditions'?: Array<IoK8sApiExtensionsV1beta1DeploymentCondition>;
    /**
    * The generation observed by the deployment controller.
    */
    'observedGeneration'?: number;
    /**
    * Total number of ready pods targeted by this deployment.
    */
    'readyReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    */
    'replicas'?: number;
    /**
    * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    */
    'unavailableReplicas'?: number;
    /**
    * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    */
    'updatedReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "collisionCount",
            "baseName": "collisionCount",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiExtensionsV1beta1DeploymentCondition>"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "unavailableReplicas",
            "baseName": "unavailableReplicas",
            "type": "number"
        },
        {
            "name": "updatedReplicas",
            "baseName": "updatedReplicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DeploymentStatus.attributeTypeMap;
    }
}

/**
* DeploymentStrategy describes how to replace existing pods with new ones.
*/
export class IoK8sApiExtensionsV1beta1DeploymentStrategy {

    /**
    * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    */
    'rollingUpdate'?: IoK8sApiExtensionsV1beta1RollingUpdateDeployment;
    /**
    * Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.
    */
    'type'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rollingUpdate",
            "baseName": "rollingUpdate",
            "type": "IoK8sApiExtensionsV1beta1RollingUpdateDeployment"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1DeploymentStrategy.attributeTypeMap;
    }
}

/**
* FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
*/
export class IoK8sApiExtensionsV1beta1FSGroupStrategyOptions {

    /**
    * Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.
    */
    'ranges'?: Array<IoK8sApiExtensionsV1beta1IDRange>;
    /**
    * Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
    */
    'rule'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ranges",
            "baseName": "ranges",
            "type": "Array<IoK8sApiExtensionsV1beta1IDRange>"
        },
        {
            "name": "rule",
            "baseName": "rule",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1FSGroupStrategyOptions.attributeTypeMap;
    }
}

/**
* HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.
*/
export class IoK8sApiExtensionsV1beta1HTTPIngressPath {
    /**
    * Backend defines the referenced service endpoint to which the traffic will be forwarded to.
    */
    'backend': IoK8sApiExtensionsV1beta1IngressBackend;

    /**
    * Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.
    */
    'path'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "backend",
            "baseName": "backend",
            "type": "IoK8sApiExtensionsV1beta1IngressBackend"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1HTTPIngressPath.attributeTypeMap;
    }
}

/**
* HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
*/
export class IoK8sApiExtensionsV1beta1HTTPIngressRuleValue {
    /**
    * A collection of paths that map requests to backends.
    */
    'paths': Array<IoK8sApiExtensionsV1beta1HTTPIngressPath>;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "paths",
            "baseName": "paths",
            "type": "Array<IoK8sApiExtensionsV1beta1HTTPIngressPath>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1HTTPIngressRuleValue.attributeTypeMap;
    }
}

/**
* Host Port Range defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
*/
export class IoK8sApiExtensionsV1beta1HostPortRange {
    /**
    * max is the end of the range, inclusive.
    */
    'max': number;
    /**
    * min is the start of the range, inclusive.
    */
    'min': number;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "max",
            "baseName": "max",
            "type": "number"
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1HostPortRange.attributeTypeMap;
    }
}

/**
* ID Range provides a min/max of an allowed range of IDs.
*/
export class IoK8sApiExtensionsV1beta1IDRange {
    /**
    * Max is the end of the range, inclusive.
    */
    'max': number;
    /**
    * Min is the start of the range, inclusive.
    */
    'min': number;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "max",
            "baseName": "max",
            "type": "number"
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IDRange.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of IPBlock is deprecated by networking/v1/IPBlock. IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
*/
export class IoK8sApiExtensionsV1beta1IPBlock {
    /**
    * CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\"
    */
    'cidr': string;

    /**
    * Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" Except values will be rejected if they are outside the CIDR range
    */
    'except'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "cidr",
            "baseName": "cidr",
            "type": "string"
        },
        {
            "name": "except",
            "baseName": "except",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IPBlock.attributeTypeMap;
    }
}

/**
* Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
*/
export class IoK8sApiExtensionsV1beta1Ingress {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiExtensionsV1beta1IngressSpec;
    /**
    * Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiExtensionsV1beta1IngressStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiExtensionsV1beta1IngressSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiExtensionsV1beta1IngressStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1Ingress.attributeTypeMap;
    }
}

/**
* IngressBackend describes all endpoints for a given service and port.
*/
export class IoK8sApiExtensionsV1beta1IngressBackend {
    /**
    * Specifies the name of the referenced service.
    */
    'serviceName': string;
    /**
    * Specifies the port of the referenced service.
    */
    'servicePort': string | number;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceName",
            "baseName": "serviceName",
            "type": "string"
        },
        {
            "name": "servicePort",
            "baseName": "servicePort",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IngressBackend.attributeTypeMap;
    }
}

/**
* IngressList is a collection of Ingress.
*/
export class IoK8sApiExtensionsV1beta1IngressList {
    /**
    * Items is the list of Ingress.
    */
    'items': Array<IoK8sApiExtensionsV1beta1Ingress>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiExtensionsV1beta1Ingress>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IngressList.attributeTypeMap;
    }
}

/**
* IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
*/
export class IoK8sApiExtensionsV1beta1IngressRule {

    /**
    * Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the    IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed.    Currently the port of an Ingress is implicitly :80 for http and    :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
    */
    'host'?: string;
    'http'?: IoK8sApiExtensionsV1beta1HTTPIngressRuleValue;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "host",
            "baseName": "host",
            "type": "string"
        },
        {
            "name": "http",
            "baseName": "http",
            "type": "IoK8sApiExtensionsV1beta1HTTPIngressRuleValue"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IngressRule.attributeTypeMap;
    }
}

/**
* IngressSpec describes the Ingress the user wishes to exist.
*/
export class IoK8sApiExtensionsV1beta1IngressSpec {

    /**
    * A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
    */
    'backend'?: IoK8sApiExtensionsV1beta1IngressBackend;
    /**
    * A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
    */
    'rules'?: Array<IoK8sApiExtensionsV1beta1IngressRule>;
    /**
    * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
    */
    'tls'?: Array<IoK8sApiExtensionsV1beta1IngressTLS>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "backend",
            "baseName": "backend",
            "type": "IoK8sApiExtensionsV1beta1IngressBackend"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiExtensionsV1beta1IngressRule>"
        },
        {
            "name": "tls",
            "baseName": "tls",
            "type": "Array<IoK8sApiExtensionsV1beta1IngressTLS>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IngressSpec.attributeTypeMap;
    }
}

/**
* IngressStatus describe the current state of the Ingress.
*/
export class IoK8sApiExtensionsV1beta1IngressStatus {

    /**
    * LoadBalancer contains the current status of the load-balancer.
    */
    'loadBalancer'?: IoK8sApiCoreV1LoadBalancerStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "loadBalancer",
            "baseName": "loadBalancer",
            "type": "IoK8sApiCoreV1LoadBalancerStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IngressStatus.attributeTypeMap;
    }
}

/**
* IngressTLS describes the transport layer security associated with an Ingress.
*/
export class IoK8sApiExtensionsV1beta1IngressTLS {

    /**
    * Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
    */
    'hosts'?: Array<string>;
    /**
    * SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
    */
    'secretName'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hosts",
            "baseName": "hosts",
            "type": "Array<string>"
        },
        {
            "name": "secretName",
            "baseName": "secretName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1IngressTLS.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of NetworkPolicy is deprecated by networking/v1/NetworkPolicy. NetworkPolicy describes what network traffic is allowed for a set of Pods
*/
export class IoK8sApiExtensionsV1beta1NetworkPolicy {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior for this NetworkPolicy.
    */
    'spec'?: IoK8sApiExtensionsV1beta1NetworkPolicySpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiExtensionsV1beta1NetworkPolicySpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1NetworkPolicy.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of NetworkPolicyEgressRule is deprecated by networking/v1/NetworkPolicyEgressRule. NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
*/
export class IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule {

    /**
    * List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    */
    'ports'?: Array<IoK8sApiExtensionsV1beta1NetworkPolicyPort>;
    /**
    * List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
    */
    'to'?: Array<IoK8sApiExtensionsV1beta1NetworkPolicyPeer>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<IoK8sApiExtensionsV1beta1NetworkPolicyPort>"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<IoK8sApiExtensionsV1beta1NetworkPolicyPeer>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of NetworkPolicyIngressRule is deprecated by networking/v1/NetworkPolicyIngressRule. This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.
*/
export class IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule {

    /**
    * List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.
    */
    'from'?: Array<IoK8sApiExtensionsV1beta1NetworkPolicyPeer>;
    /**
    * List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    */
    'ports'?: Array<IoK8sApiExtensionsV1beta1NetworkPolicyPort>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "from",
            "baseName": "from",
            "type": "Array<IoK8sApiExtensionsV1beta1NetworkPolicyPeer>"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<IoK8sApiExtensionsV1beta1NetworkPolicyPort>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of NetworkPolicyList is deprecated by networking/v1/NetworkPolicyList. Network Policy List is a list of NetworkPolicy objects.
*/
export class IoK8sApiExtensionsV1beta1NetworkPolicyList {
    /**
    * Items is a list of schema objects.
    */
    'items': Array<IoK8sApiExtensionsV1beta1NetworkPolicy>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiExtensionsV1beta1NetworkPolicy>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1NetworkPolicyList.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of NetworkPolicyPeer is deprecated by networking/v1/NetworkPolicyPeer.
*/
export class IoK8sApiExtensionsV1beta1NetworkPolicyPeer {

    /**
    * IPBlock defines policy on a particular IPBlock
    */
    'ipBlock'?: IoK8sApiExtensionsV1beta1IPBlock;
    /**
    * Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.
    */
    'namespaceSelector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.
    */
    'podSelector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ipBlock",
            "baseName": "ipBlock",
            "type": "IoK8sApiExtensionsV1beta1IPBlock"
        },
        {
            "name": "namespaceSelector",
            "baseName": "namespaceSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "podSelector",
            "baseName": "podSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1NetworkPolicyPeer.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of NetworkPolicyPort is deprecated by networking/v1/NetworkPolicyPort.
*/
export class IoK8sApiExtensionsV1beta1NetworkPolicyPort {

    /**
    * If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
    */
    'port'?: string | number;
    /**
    * Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
    */
    'protocol'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "port",
            "baseName": "port",
            "type": "string | number"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1NetworkPolicyPort.attributeTypeMap;
    }
}

/**
* DEPRECATED 1.9 - This group version of NetworkPolicySpec is deprecated by networking/v1/NetworkPolicySpec.
*/
export class IoK8sApiExtensionsV1beta1NetworkPolicySpec {
    /**
    * Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
    */
    'podSelector': IoK8sApimachineryPkgApisMetaV1LabelSelector;

    /**
    * List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
    */
    'egress'?: Array<IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule>;
    /**
    * List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).
    */
    'ingress'?: Array<IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule>;
    /**
    * List of rule types that the NetworkPolicy relates to. Valid options are Ingress, Egress, or Ingress,Egress. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8
    */
    'policyTypes'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "egress",
            "baseName": "egress",
            "type": "Array<IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule>"
        },
        {
            "name": "ingress",
            "baseName": "ingress",
            "type": "Array<IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule>"
        },
        {
            "name": "podSelector",
            "baseName": "podSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "policyTypes",
            "baseName": "policyTypes",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1NetworkPolicySpec.attributeTypeMap;
    }
}

/**
* Pod Security Policy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
*/
export class IoK8sApiExtensionsV1beta1PodSecurityPolicy {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * spec defines the policy enforced.
    */
    'spec'?: IoK8sApiExtensionsV1beta1PodSecurityPolicySpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiExtensionsV1beta1PodSecurityPolicySpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1PodSecurityPolicy.attributeTypeMap;
    }
}

/**
* Pod Security Policy List is a list of PodSecurityPolicy objects.
*/
export class IoK8sApiExtensionsV1beta1PodSecurityPolicyList {
    /**
    * Items is a list of schema objects.
    */
    'items': Array<IoK8sApiExtensionsV1beta1PodSecurityPolicy>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiExtensionsV1beta1PodSecurityPolicy>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1PodSecurityPolicyList.attributeTypeMap;
    }
}

/**
* Pod Security Policy Spec defines the policy enforced.
*/
export class IoK8sApiExtensionsV1beta1PodSecurityPolicySpec {
    /**
    * FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.
    */
    'fsGroup': IoK8sApiExtensionsV1beta1FSGroupStrategyOptions;
    /**
    * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
    */
    'runAsUser': IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions;
    /**
    * seLinux is the strategy that will dictate the allowable labels that may be set.
    */
    'seLinux': IoK8sApiExtensionsV1beta1SELinuxStrategyOptions;
    /**
    * SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
    */
    'supplementalGroups': IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions;

    /**
    * AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
    */
    'allowPrivilegeEscalation'?: boolean;
    /**
    * AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.
    */
    'allowedCapabilities'?: Array<string>;
    /**
    * AllowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"Volumes\" field.
    */
    'allowedFlexVolumes'?: Array<IoK8sApiExtensionsV1beta1AllowedFlexVolume>;
    /**
    * is a white list of allowed host paths. Empty indicates that all host paths may be used.
    */
    'allowedHostPaths'?: Array<IoK8sApiExtensionsV1beta1AllowedHostPath>;
    /**
    * DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both DefaultAddCapabilities and RequiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the AllowedCapabilities list.
    */
    'defaultAddCapabilities'?: Array<string>;
    /**
    * DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
    */
    'defaultAllowPrivilegeEscalation'?: boolean;
    /**
    * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
    */
    'hostIPC'?: boolean;
    /**
    * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
    */
    'hostNetwork'?: boolean;
    /**
    * hostPID determines if the policy allows the use of HostPID in the pod spec.
    */
    'hostPID'?: boolean;
    /**
    * hostPorts determines which host port ranges are allowed to be exposed.
    */
    'hostPorts'?: Array<IoK8sApiExtensionsV1beta1HostPortRange>;
    /**
    * privileged determines if a pod can request to be run as privileged.
    */
    'privileged'?: boolean;
    /**
    * ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
    */
    'readOnlyRootFilesystem'?: boolean;
    /**
    * RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
    */
    'requiredDropCapabilities'?: Array<string>;
    /**
    * volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.
    */
    'volumes'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowPrivilegeEscalation",
            "baseName": "allowPrivilegeEscalation",
            "type": "boolean"
        },
        {
            "name": "allowedCapabilities",
            "baseName": "allowedCapabilities",
            "type": "Array<string>"
        },
        {
            "name": "allowedFlexVolumes",
            "baseName": "allowedFlexVolumes",
            "type": "Array<IoK8sApiExtensionsV1beta1AllowedFlexVolume>"
        },
        {
            "name": "allowedHostPaths",
            "baseName": "allowedHostPaths",
            "type": "Array<IoK8sApiExtensionsV1beta1AllowedHostPath>"
        },
        {
            "name": "defaultAddCapabilities",
            "baseName": "defaultAddCapabilities",
            "type": "Array<string>"
        },
        {
            "name": "defaultAllowPrivilegeEscalation",
            "baseName": "defaultAllowPrivilegeEscalation",
            "type": "boolean"
        },
        {
            "name": "fsGroup",
            "baseName": "fsGroup",
            "type": "IoK8sApiExtensionsV1beta1FSGroupStrategyOptions"
        },
        {
            "name": "hostIPC",
            "baseName": "hostIPC",
            "type": "boolean"
        },
        {
            "name": "hostNetwork",
            "baseName": "hostNetwork",
            "type": "boolean"
        },
        {
            "name": "hostPID",
            "baseName": "hostPID",
            "type": "boolean"
        },
        {
            "name": "hostPorts",
            "baseName": "hostPorts",
            "type": "Array<IoK8sApiExtensionsV1beta1HostPortRange>"
        },
        {
            "name": "privileged",
            "baseName": "privileged",
            "type": "boolean"
        },
        {
            "name": "readOnlyRootFilesystem",
            "baseName": "readOnlyRootFilesystem",
            "type": "boolean"
        },
        {
            "name": "requiredDropCapabilities",
            "baseName": "requiredDropCapabilities",
            "type": "Array<string>"
        },
        {
            "name": "runAsUser",
            "baseName": "runAsUser",
            "type": "IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions"
        },
        {
            "name": "seLinux",
            "baseName": "seLinux",
            "type": "IoK8sApiExtensionsV1beta1SELinuxStrategyOptions"
        },
        {
            "name": "supplementalGroups",
            "baseName": "supplementalGroups",
            "type": "IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions"
        },
        {
            "name": "volumes",
            "baseName": "volumes",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1PodSecurityPolicySpec.attributeTypeMap;
    }
}

/**
* DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1beta2/ReplicaSet. See the release notes for more information. ReplicaSet ensures that a specified number of pod replicas are running at any given time.
*/
export class IoK8sApiExtensionsV1beta1ReplicaSet {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'spec'?: IoK8sApiExtensionsV1beta1ReplicaSetSpec;
    /**
    * Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: IoK8sApiExtensionsV1beta1ReplicaSetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiExtensionsV1beta1ReplicaSetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiExtensionsV1beta1ReplicaSetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1ReplicaSet.attributeTypeMap;
    }
}

/**
* ReplicaSetCondition describes the state of a replica set at a certain point.
*/
export class IoK8sApiExtensionsV1beta1ReplicaSetCondition {
    /**
    * Status of the condition, one of True, False, Unknown.
    */
    'status': string;
    /**
    * Type of replica set condition.
    */
    'type': string;

    /**
    * The last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * A human readable message indicating details about the transition.
    */
    'message'?: string;
    /**
    * The reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1ReplicaSetCondition.attributeTypeMap;
    }
}

/**
* ReplicaSetList is a collection of ReplicaSets.
*/
export class IoK8sApiExtensionsV1beta1ReplicaSetList {
    /**
    * List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    */
    'items': Array<IoK8sApiExtensionsV1beta1ReplicaSet>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiExtensionsV1beta1ReplicaSet>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1ReplicaSetList.attributeTypeMap;
    }
}

/**
* ReplicaSetSpec is the specification of a ReplicaSet.
*/
export class IoK8sApiExtensionsV1beta1ReplicaSetSpec {

    /**
    * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    */
    'minReadySeconds'?: number;
    /**
    * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    */
    'replicas'?: number;
    /**
    * Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    */
    'template'?: IoK8sApiCoreV1PodTemplateSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "minReadySeconds",
            "baseName": "minReadySeconds",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "IoK8sApiCoreV1PodTemplateSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1ReplicaSetSpec.attributeTypeMap;
    }
}

/**
* ReplicaSetStatus represents the current status of a ReplicaSet.
*/
export class IoK8sApiExtensionsV1beta1ReplicaSetStatus {
    /**
    * Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    */
    'replicas': number;

    /**
    * The number of available replicas (ready for at least minReadySeconds) for this replica set.
    */
    'availableReplicas'?: number;
    /**
    * Represents the latest available observations of a replica set's current state.
    */
    'conditions'?: Array<IoK8sApiExtensionsV1beta1ReplicaSetCondition>;
    /**
    * The number of pods that have labels matching the labels of the pod template of the replicaset.
    */
    'fullyLabeledReplicas'?: number;
    /**
    * ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
    */
    'observedGeneration'?: number;
    /**
    * The number of ready replicas for this replica set.
    */
    'readyReplicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "availableReplicas",
            "baseName": "availableReplicas",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiExtensionsV1beta1ReplicaSetCondition>"
        },
        {
            "name": "fullyLabeledReplicas",
            "baseName": "fullyLabeledReplicas",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        },
        {
            "name": "readyReplicas",
            "baseName": "readyReplicas",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1ReplicaSetStatus.attributeTypeMap;
    }
}

/**
* DEPRECATED.
*/
export class IoK8sApiExtensionsV1beta1RollbackConfig {

    /**
    * The revision to rollback to. If set to 0, rollback to the last revision.
    */
    'revision'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "revision",
            "baseName": "revision",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1RollbackConfig.attributeTypeMap;
    }
}

/**
* Spec to control the desired behavior of daemon set rolling update.
*/
export class IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet {

    /**
    * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
    */
    'maxUnavailable'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet.attributeTypeMap;
    }
}

/**
* Spec to control the desired behavior of rolling update.
*/
export class IoK8sApiExtensionsV1beta1RollingUpdateDeployment {

    /**
    * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
    */
    'maxSurge'?: string | number;
    /**
    * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    */
    'maxUnavailable'?: string | number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxSurge",
            "baseName": "maxSurge",
            "type": "string | number"
        },
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1RollingUpdateDeployment.attributeTypeMap;
    }
}

/**
* Run A sUser Strategy Options defines the strategy type and any options used to create the strategy.
*/
export class IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions {
    /**
    * Rule is the strategy that will dictate the allowable RunAsUser values that may be set.
    */
    'rule': string;

    /**
    * Ranges are the allowed ranges of uids that may be used.
    */
    'ranges'?: Array<IoK8sApiExtensionsV1beta1IDRange>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ranges",
            "baseName": "ranges",
            "type": "Array<IoK8sApiExtensionsV1beta1IDRange>"
        },
        {
            "name": "rule",
            "baseName": "rule",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions.attributeTypeMap;
    }
}

/**
* SELinux  Strategy Options defines the strategy type and any options used to create the strategy.
*/
export class IoK8sApiExtensionsV1beta1SELinuxStrategyOptions {
    /**
    * type is the strategy that will dictate the allowable labels that may be set.
    */
    'rule': string;

    /**
    * seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    */
    'seLinuxOptions'?: IoK8sApiCoreV1SELinuxOptions;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "rule",
            "baseName": "rule",
            "type": "string"
        },
        {
            "name": "seLinuxOptions",
            "baseName": "seLinuxOptions",
            "type": "IoK8sApiCoreV1SELinuxOptions"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.attributeTypeMap;
    }
}

/**
* represents a scaling request for a resource.
*/
export class IoK8sApiExtensionsV1beta1Scale {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    */
    'spec'?: IoK8sApiExtensionsV1beta1ScaleSpec;
    /**
    * current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    */
    'status'?: IoK8sApiExtensionsV1beta1ScaleStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiExtensionsV1beta1ScaleSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiExtensionsV1beta1ScaleStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1Scale.attributeTypeMap;
    }
}

/**
* describes the attributes of a scale subresource
*/
export class IoK8sApiExtensionsV1beta1ScaleSpec {

    /**
    * desired number of instances for the scaled object.
    */
    'replicas'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1ScaleSpec.attributeTypeMap;
    }
}

/**
* represents the current status of a scale subresource.
*/
export class IoK8sApiExtensionsV1beta1ScaleStatus {
    /**
    * actual number of observed instances of the scaled object.
    */
    'replicas': number;

    /**
    * label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
    */
    'selector'?: { [key: string]: string; };
    /**
    * label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    */
    'targetSelector'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "targetSelector",
            "baseName": "targetSelector",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1ScaleStatus.attributeTypeMap;
    }
}

/**
* SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
*/
export class IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {

    /**
    * Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.
    */
    'ranges'?: Array<IoK8sApiExtensionsV1beta1IDRange>;
    /**
    * Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
    */
    'rule'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ranges",
            "baseName": "ranges",
            "type": "Array<IoK8sApiExtensionsV1beta1IDRange>"
        },
        {
            "name": "rule",
            "baseName": "rule",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions.attributeTypeMap;
    }
}

/**
* IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
*/
export class IoK8sApiNetworkingV1IPBlock {
    /**
    * CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\"
    */
    'cidr': string;

    /**
    * Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" Except values will be rejected if they are outside the CIDR range
    */
    'except'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "cidr",
            "baseName": "cidr",
            "type": "string"
        },
        {
            "name": "except",
            "baseName": "except",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1IPBlock.attributeTypeMap;
    }
}

/**
* NetworkPolicy describes what network traffic is allowed for a set of Pods
*/
export class IoK8sApiNetworkingV1NetworkPolicy {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior for this NetworkPolicy.
    */
    'spec'?: IoK8sApiNetworkingV1NetworkPolicySpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiNetworkingV1NetworkPolicySpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1NetworkPolicy.attributeTypeMap;
    }
}

/**
* NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
*/
export class IoK8sApiNetworkingV1NetworkPolicyEgressRule {

    /**
    * List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    */
    'ports'?: Array<IoK8sApiNetworkingV1NetworkPolicyPort>;
    /**
    * List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
    */
    'to'?: Array<IoK8sApiNetworkingV1NetworkPolicyPeer>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<IoK8sApiNetworkingV1NetworkPolicyPort>"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<IoK8sApiNetworkingV1NetworkPolicyPeer>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1NetworkPolicyEgressRule.attributeTypeMap;
    }
}

/**
* NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
*/
export class IoK8sApiNetworkingV1NetworkPolicyIngressRule {

    /**
    * List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.
    */
    'from'?: Array<IoK8sApiNetworkingV1NetworkPolicyPeer>;
    /**
    * List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    */
    'ports'?: Array<IoK8sApiNetworkingV1NetworkPolicyPort>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "from",
            "baseName": "from",
            "type": "Array<IoK8sApiNetworkingV1NetworkPolicyPeer>"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<IoK8sApiNetworkingV1NetworkPolicyPort>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1NetworkPolicyIngressRule.attributeTypeMap;
    }
}

/**
* NetworkPolicyList is a list of NetworkPolicy objects.
*/
export class IoK8sApiNetworkingV1NetworkPolicyList {
    /**
    * Items is a list of schema objects.
    */
    'items': Array<IoK8sApiNetworkingV1NetworkPolicy>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiNetworkingV1NetworkPolicy>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1NetworkPolicyList.attributeTypeMap;
    }
}

/**
* NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.
*/
export class IoK8sApiNetworkingV1NetworkPolicyPeer {

    /**
    * IPBlock defines policy on a particular IPBlock
    */
    'ipBlock'?: IoK8sApiNetworkingV1IPBlock;
    /**
    * Selects Namespaces using cluster scoped-labels. This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.
    */
    'namespaceSelector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.
    */
    'podSelector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ipBlock",
            "baseName": "ipBlock",
            "type": "IoK8sApiNetworkingV1IPBlock"
        },
        {
            "name": "namespaceSelector",
            "baseName": "namespaceSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "podSelector",
            "baseName": "podSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1NetworkPolicyPeer.attributeTypeMap;
    }
}

/**
* NetworkPolicyPort describes a port to allow traffic on
*/
export class IoK8sApiNetworkingV1NetworkPolicyPort {

    /**
    * The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
    */
    'port'?: string | number;
    /**
    * The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
    */
    'protocol'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "port",
            "baseName": "port",
            "type": "string | number"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1NetworkPolicyPort.attributeTypeMap;
    }
}

/**
* NetworkPolicySpec provides the specification of a NetworkPolicy
*/
export class IoK8sApiNetworkingV1NetworkPolicySpec {
    /**
    * Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
    */
    'podSelector': IoK8sApimachineryPkgApisMetaV1LabelSelector;

    /**
    * List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
    */
    'egress'?: Array<IoK8sApiNetworkingV1NetworkPolicyEgressRule>;
    /**
    * List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
    */
    'ingress'?: Array<IoK8sApiNetworkingV1NetworkPolicyIngressRule>;
    /**
    * List of rule types that the NetworkPolicy relates to. Valid options are Ingress, Egress, or Ingress,Egress. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8
    */
    'policyTypes'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "egress",
            "baseName": "egress",
            "type": "Array<IoK8sApiNetworkingV1NetworkPolicyEgressRule>"
        },
        {
            "name": "ingress",
            "baseName": "ingress",
            "type": "Array<IoK8sApiNetworkingV1NetworkPolicyIngressRule>"
        },
        {
            "name": "podSelector",
            "baseName": "podSelector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "policyTypes",
            "baseName": "policyTypes",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiNetworkingV1NetworkPolicySpec.attributeTypeMap;
    }
}

/**
* Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
*/
export class IoK8sApiPolicyV1beta1Eviction {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * DeleteOptions may be provided
    */
    'deleteOptions'?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * ObjectMeta describes the pod that is being evicted.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "deleteOptions",
            "baseName": "deleteOptions",
            "type": "IoK8sApimachineryPkgApisMetaV1DeleteOptions"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiPolicyV1beta1Eviction.attributeTypeMap;
    }
}

/**
* PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
*/
export class IoK8sApiPolicyV1beta1PodDisruptionBudget {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Specification of the desired behavior of the PodDisruptionBudget.
    */
    'spec'?: IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec;
    /**
    * Most recently observed status of the PodDisruptionBudget.
    */
    'status'?: IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiPolicyV1beta1PodDisruptionBudget.attributeTypeMap;
    }
}

/**
* PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
*/
export class IoK8sApiPolicyV1beta1PodDisruptionBudgetList {
    'items': Array<IoK8sApiPolicyV1beta1PodDisruptionBudget>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiPolicyV1beta1PodDisruptionBudget>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiPolicyV1beta1PodDisruptionBudgetList.attributeTypeMap;
    }
}

/**
* PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
*/
export class IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec {

    /**
    * An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".
    */
    'maxUnavailable'?: string | number;
    /**
    * An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".
    */
    'minAvailable'?: string | number;
    /**
    * Label query over pods whose evictions are managed by the disruption budget.
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxUnavailable",
            "baseName": "maxUnavailable",
            "type": "string | number"
        },
        {
            "name": "minAvailable",
            "baseName": "minAvailable",
            "type": "string | number"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.attributeTypeMap;
    }
}

/**
* PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
*/
export class IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus {
    /**
    * current number of healthy pods
    */
    'currentHealthy': number;
    /**
    * minimum desired number of healthy pods
    */
    'desiredHealthy': number;
    /**
    * DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
    */
    'disruptedPods': string;
    /**
    * Number of pod disruptions that are currently allowed.
    */
    'disruptionsAllowed': number;
    /**
    * total number of pods counted by this disruption budget
    */
    'expectedPods': number;

    /**
    * Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB's object generation.
    */
    'observedGeneration'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currentHealthy",
            "baseName": "currentHealthy",
            "type": "number"
        },
        {
            "name": "desiredHealthy",
            "baseName": "desiredHealthy",
            "type": "number"
        },
        {
            "name": "disruptedPods",
            "baseName": "disruptedPods",
            "type": "string"
        },
        {
            "name": "disruptionsAllowed",
            "baseName": "disruptionsAllowed",
            "type": "number"
        },
        {
            "name": "expectedPods",
            "baseName": "expectedPods",
            "type": "number"
        },
        {
            "name": "observedGeneration",
            "baseName": "observedGeneration",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.attributeTypeMap;
    }
}

/**
* AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
*/
export class IoK8sApiRbacV1AggregationRule {

    /**
    * ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
    */
    'clusterRoleSelectors'?: Array<IoK8sApimachineryPkgApisMetaV1LabelSelector>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clusterRoleSelectors",
            "baseName": "clusterRoleSelectors",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1LabelSelector>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1AggregationRule.attributeTypeMap;
    }
}

/**
* ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
*/
export class IoK8sApiRbacV1ClusterRole {
    /**
    * Rules holds all the PolicyRules for this ClusterRole
    */
    'rules': Array<IoK8sApiRbacV1PolicyRule>;

    /**
    * AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
    */
    'aggregationRule'?: IoK8sApiRbacV1AggregationRule;
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "aggregationRule",
            "baseName": "aggregationRule",
            "type": "IoK8sApiRbacV1AggregationRule"
        },
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiRbacV1PolicyRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1ClusterRole.attributeTypeMap;
    }
}

/**
* ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
*/
export class IoK8sApiRbacV1ClusterRoleBinding {
    /**
    * RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    */
    'roleRef': IoK8sApiRbacV1RoleRef;
    /**
    * Subjects holds references to the objects the role applies to.
    */
    'subjects': Array<IoK8sApiRbacV1Subject>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "roleRef",
            "baseName": "roleRef",
            "type": "IoK8sApiRbacV1RoleRef"
        },
        {
            "name": "subjects",
            "baseName": "subjects",
            "type": "Array<IoK8sApiRbacV1Subject>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1ClusterRoleBinding.attributeTypeMap;
    }
}

/**
* ClusterRoleBindingList is a collection of ClusterRoleBindings
*/
export class IoK8sApiRbacV1ClusterRoleBindingList {
    /**
    * Items is a list of ClusterRoleBindings
    */
    'items': Array<IoK8sApiRbacV1ClusterRoleBinding>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1ClusterRoleBinding>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1ClusterRoleBindingList.attributeTypeMap;
    }
}

/**
* ClusterRoleList is a collection of ClusterRoles
*/
export class IoK8sApiRbacV1ClusterRoleList {
    /**
    * Items is a list of ClusterRoles
    */
    'items': Array<IoK8sApiRbacV1ClusterRole>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1ClusterRole>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1ClusterRoleList.attributeTypeMap;
    }
}

/**
* PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
*/
export class IoK8sApiRbacV1PolicyRule {
    /**
    * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
    */
    'verbs': Array<string>;

    /**
    * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
    */
    'apiGroups'?: Array<string>;
    /**
    * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.
    */
    'nonResourceURLs'?: Array<string>;
    /**
    * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    */
    'resourceNames'?: Array<string>;
    /**
    * Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
    */
    'resources'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroups",
            "baseName": "apiGroups",
            "type": "Array<string>"
        },
        {
            "name": "nonResourceURLs",
            "baseName": "nonResourceURLs",
            "type": "Array<string>"
        },
        {
            "name": "resourceNames",
            "baseName": "resourceNames",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<string>"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1PolicyRule.attributeTypeMap;
    }
}

/**
* Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
*/
export class IoK8sApiRbacV1Role {
    /**
    * Rules holds all the PolicyRules for this Role
    */
    'rules': Array<IoK8sApiRbacV1PolicyRule>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiRbacV1PolicyRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1Role.attributeTypeMap;
    }
}

/**
* RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
*/
export class IoK8sApiRbacV1RoleBinding {
    /**
    * RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    */
    'roleRef': IoK8sApiRbacV1RoleRef;
    /**
    * Subjects holds references to the objects the role applies to.
    */
    'subjects': Array<IoK8sApiRbacV1Subject>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "roleRef",
            "baseName": "roleRef",
            "type": "IoK8sApiRbacV1RoleRef"
        },
        {
            "name": "subjects",
            "baseName": "subjects",
            "type": "Array<IoK8sApiRbacV1Subject>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1RoleBinding.attributeTypeMap;
    }
}

/**
* RoleBindingList is a collection of RoleBindings
*/
export class IoK8sApiRbacV1RoleBindingList {
    /**
    * Items is a list of RoleBindings
    */
    'items': Array<IoK8sApiRbacV1RoleBinding>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1RoleBinding>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1RoleBindingList.attributeTypeMap;
    }
}

/**
* RoleList is a collection of Roles
*/
export class IoK8sApiRbacV1RoleList {
    /**
    * Items is a list of Roles
    */
    'items': Array<IoK8sApiRbacV1Role>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1Role>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1RoleList.attributeTypeMap;
    }
}

/**
* RoleRef contains information that points to the role being used
*/
export class IoK8sApiRbacV1RoleRef {
    /**
    * APIGroup is the group for the resource being referenced
    */
    'apiGroup': string;
    /**
    * Kind is the type of resource being referenced
    */
    'kind': string;
    /**
    * Name is the name of resource being referenced
    */
    'name': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroup",
            "baseName": "apiGroup",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1RoleRef.attributeTypeMap;
    }
}

/**
* Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
*/
export class IoK8sApiRbacV1Subject {
    /**
    * Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    */
    'kind': string;
    /**
    * Name of the object being referenced.
    */
    'name': string;

    /**
    * APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.
    */
    'apiGroup'?: string;
    /**
    * Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.
    */
    'namespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroup",
            "baseName": "apiGroup",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1Subject.attributeTypeMap;
    }
}

/**
* AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
*/
export class IoK8sApiRbacV1alpha1AggregationRule {

    /**
    * ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
    */
    'clusterRoleSelectors'?: Array<IoK8sApimachineryPkgApisMetaV1LabelSelector>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clusterRoleSelectors",
            "baseName": "clusterRoleSelectors",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1LabelSelector>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1AggregationRule.attributeTypeMap;
    }
}

/**
* ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
*/
export class IoK8sApiRbacV1alpha1ClusterRole {
    /**
    * Rules holds all the PolicyRules for this ClusterRole
    */
    'rules': Array<IoK8sApiRbacV1alpha1PolicyRule>;

    /**
    * AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
    */
    'aggregationRule'?: IoK8sApiRbacV1alpha1AggregationRule;
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "aggregationRule",
            "baseName": "aggregationRule",
            "type": "IoK8sApiRbacV1alpha1AggregationRule"
        },
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiRbacV1alpha1PolicyRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1ClusterRole.attributeTypeMap;
    }
}

/**
* ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
*/
export class IoK8sApiRbacV1alpha1ClusterRoleBinding {
    /**
    * RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    */
    'roleRef': IoK8sApiRbacV1alpha1RoleRef;
    /**
    * Subjects holds references to the objects the role applies to.
    */
    'subjects': Array<IoK8sApiRbacV1alpha1Subject>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "roleRef",
            "baseName": "roleRef",
            "type": "IoK8sApiRbacV1alpha1RoleRef"
        },
        {
            "name": "subjects",
            "baseName": "subjects",
            "type": "Array<IoK8sApiRbacV1alpha1Subject>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1ClusterRoleBinding.attributeTypeMap;
    }
}

/**
* ClusterRoleBindingList is a collection of ClusterRoleBindings
*/
export class IoK8sApiRbacV1alpha1ClusterRoleBindingList {
    /**
    * Items is a list of ClusterRoleBindings
    */
    'items': Array<IoK8sApiRbacV1alpha1ClusterRoleBinding>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1alpha1ClusterRoleBinding>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1ClusterRoleBindingList.attributeTypeMap;
    }
}

/**
* ClusterRoleList is a collection of ClusterRoles
*/
export class IoK8sApiRbacV1alpha1ClusterRoleList {
    /**
    * Items is a list of ClusterRoles
    */
    'items': Array<IoK8sApiRbacV1alpha1ClusterRole>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1alpha1ClusterRole>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1ClusterRoleList.attributeTypeMap;
    }
}

/**
* PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
*/
export class IoK8sApiRbacV1alpha1PolicyRule {
    /**
    * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
    */
    'verbs': Array<string>;

    /**
    * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
    */
    'apiGroups'?: Array<string>;
    /**
    * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.
    */
    'nonResourceURLs'?: Array<string>;
    /**
    * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    */
    'resourceNames'?: Array<string>;
    /**
    * Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
    */
    'resources'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroups",
            "baseName": "apiGroups",
            "type": "Array<string>"
        },
        {
            "name": "nonResourceURLs",
            "baseName": "nonResourceURLs",
            "type": "Array<string>"
        },
        {
            "name": "resourceNames",
            "baseName": "resourceNames",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<string>"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1PolicyRule.attributeTypeMap;
    }
}

/**
* Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
*/
export class IoK8sApiRbacV1alpha1Role {
    /**
    * Rules holds all the PolicyRules for this Role
    */
    'rules': Array<IoK8sApiRbacV1alpha1PolicyRule>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiRbacV1alpha1PolicyRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1Role.attributeTypeMap;
    }
}

/**
* RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
*/
export class IoK8sApiRbacV1alpha1RoleBinding {
    /**
    * RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    */
    'roleRef': IoK8sApiRbacV1alpha1RoleRef;
    /**
    * Subjects holds references to the objects the role applies to.
    */
    'subjects': Array<IoK8sApiRbacV1alpha1Subject>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "roleRef",
            "baseName": "roleRef",
            "type": "IoK8sApiRbacV1alpha1RoleRef"
        },
        {
            "name": "subjects",
            "baseName": "subjects",
            "type": "Array<IoK8sApiRbacV1alpha1Subject>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1RoleBinding.attributeTypeMap;
    }
}

/**
* RoleBindingList is a collection of RoleBindings
*/
export class IoK8sApiRbacV1alpha1RoleBindingList {
    /**
    * Items is a list of RoleBindings
    */
    'items': Array<IoK8sApiRbacV1alpha1RoleBinding>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1alpha1RoleBinding>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1RoleBindingList.attributeTypeMap;
    }
}

/**
* RoleList is a collection of Roles
*/
export class IoK8sApiRbacV1alpha1RoleList {
    /**
    * Items is a list of Roles
    */
    'items': Array<IoK8sApiRbacV1alpha1Role>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1alpha1Role>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1RoleList.attributeTypeMap;
    }
}

/**
* RoleRef contains information that points to the role being used
*/
export class IoK8sApiRbacV1alpha1RoleRef {
    /**
    * APIGroup is the group for the resource being referenced
    */
    'apiGroup': string;
    /**
    * Kind is the type of resource being referenced
    */
    'kind': string;
    /**
    * Name is the name of resource being referenced
    */
    'name': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroup",
            "baseName": "apiGroup",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1RoleRef.attributeTypeMap;
    }
}

/**
* Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
*/
export class IoK8sApiRbacV1alpha1Subject {
    /**
    * Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    */
    'kind': string;
    /**
    * Name of the object being referenced.
    */
    'name': string;

    /**
    * APIVersion holds the API group and version of the referenced subject. Defaults to \"v1\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io/v1alpha1\" for User and Group subjects.
    */
    'apiVersion'?: string;
    /**
    * Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.
    */
    'namespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1alpha1Subject.attributeTypeMap;
    }
}

/**
* AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
*/
export class IoK8sApiRbacV1beta1AggregationRule {

    /**
    * ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
    */
    'clusterRoleSelectors'?: Array<IoK8sApimachineryPkgApisMetaV1LabelSelector>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clusterRoleSelectors",
            "baseName": "clusterRoleSelectors",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1LabelSelector>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1AggregationRule.attributeTypeMap;
    }
}

/**
* ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
*/
export class IoK8sApiRbacV1beta1ClusterRole {
    /**
    * Rules holds all the PolicyRules for this ClusterRole
    */
    'rules': Array<IoK8sApiRbacV1beta1PolicyRule>;

    /**
    * AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
    */
    'aggregationRule'?: IoK8sApiRbacV1beta1AggregationRule;
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "aggregationRule",
            "baseName": "aggregationRule",
            "type": "IoK8sApiRbacV1beta1AggregationRule"
        },
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiRbacV1beta1PolicyRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1ClusterRole.attributeTypeMap;
    }
}

/**
* ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
*/
export class IoK8sApiRbacV1beta1ClusterRoleBinding {
    /**
    * RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    */
    'roleRef': IoK8sApiRbacV1beta1RoleRef;
    /**
    * Subjects holds references to the objects the role applies to.
    */
    'subjects': Array<IoK8sApiRbacV1beta1Subject>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "roleRef",
            "baseName": "roleRef",
            "type": "IoK8sApiRbacV1beta1RoleRef"
        },
        {
            "name": "subjects",
            "baseName": "subjects",
            "type": "Array<IoK8sApiRbacV1beta1Subject>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1ClusterRoleBinding.attributeTypeMap;
    }
}

/**
* ClusterRoleBindingList is a collection of ClusterRoleBindings
*/
export class IoK8sApiRbacV1beta1ClusterRoleBindingList {
    /**
    * Items is a list of ClusterRoleBindings
    */
    'items': Array<IoK8sApiRbacV1beta1ClusterRoleBinding>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1beta1ClusterRoleBinding>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1ClusterRoleBindingList.attributeTypeMap;
    }
}

/**
* ClusterRoleList is a collection of ClusterRoles
*/
export class IoK8sApiRbacV1beta1ClusterRoleList {
    /**
    * Items is a list of ClusterRoles
    */
    'items': Array<IoK8sApiRbacV1beta1ClusterRole>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1beta1ClusterRole>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1ClusterRoleList.attributeTypeMap;
    }
}

/**
* PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
*/
export class IoK8sApiRbacV1beta1PolicyRule {
    /**
    * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
    */
    'verbs': Array<string>;

    /**
    * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
    */
    'apiGroups'?: Array<string>;
    /**
    * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.
    */
    'nonResourceURLs'?: Array<string>;
    /**
    * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    */
    'resourceNames'?: Array<string>;
    /**
    * Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*_/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
    */
    'resources'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroups",
            "baseName": "apiGroups",
            "type": "Array<string>"
        },
        {
            "name": "nonResourceURLs",
            "baseName": "nonResourceURLs",
            "type": "Array<string>"
        },
        {
            "name": "resourceNames",
            "baseName": "resourceNames",
            "type": "Array<string>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<string>"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1PolicyRule.attributeTypeMap;
    }
}

/**
* Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
*/
export class IoK8sApiRbacV1beta1Role {
    /**
    * Rules holds all the PolicyRules for this Role
    */
    'rules': Array<IoK8sApiRbacV1beta1PolicyRule>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<IoK8sApiRbacV1beta1PolicyRule>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1Role.attributeTypeMap;
    }
}

/**
* RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
*/
export class IoK8sApiRbacV1beta1RoleBinding {
    /**
    * RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    */
    'roleRef': IoK8sApiRbacV1beta1RoleRef;
    /**
    * Subjects holds references to the objects the role applies to.
    */
    'subjects': Array<IoK8sApiRbacV1beta1Subject>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "roleRef",
            "baseName": "roleRef",
            "type": "IoK8sApiRbacV1beta1RoleRef"
        },
        {
            "name": "subjects",
            "baseName": "subjects",
            "type": "Array<IoK8sApiRbacV1beta1Subject>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1RoleBinding.attributeTypeMap;
    }
}

/**
* RoleBindingList is a collection of RoleBindings
*/
export class IoK8sApiRbacV1beta1RoleBindingList {
    /**
    * Items is a list of RoleBindings
    */
    'items': Array<IoK8sApiRbacV1beta1RoleBinding>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1beta1RoleBinding>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1RoleBindingList.attributeTypeMap;
    }
}

/**
* RoleList is a collection of Roles
*/
export class IoK8sApiRbacV1beta1RoleList {
    /**
    * Items is a list of Roles
    */
    'items': Array<IoK8sApiRbacV1beta1Role>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata.
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiRbacV1beta1Role>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1RoleList.attributeTypeMap;
    }
}

/**
* RoleRef contains information that points to the role being used
*/
export class IoK8sApiRbacV1beta1RoleRef {
    /**
    * APIGroup is the group for the resource being referenced
    */
    'apiGroup': string;
    /**
    * Kind is the type of resource being referenced
    */
    'kind': string;
    /**
    * Name is the name of resource being referenced
    */
    'name': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroup",
            "baseName": "apiGroup",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1RoleRef.attributeTypeMap;
    }
}

/**
* Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
*/
export class IoK8sApiRbacV1beta1Subject {
    /**
    * Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    */
    'kind': string;
    /**
    * Name of the object being referenced.
    */
    'name': string;

    /**
    * APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.
    */
    'apiGroup'?: string;
    /**
    * Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.
    */
    'namespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiGroup",
            "baseName": "apiGroup",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiRbacV1beta1Subject.attributeTypeMap;
    }
}

/**
* PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
*/
export class IoK8sApiSchedulingV1alpha1PriorityClass {
    /**
    * The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.
    */
    'value': number;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * description is an arbitrary string that usually provides guidelines on when this priority class should be used.
    */
    'description'?: string;
    /**
    * globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class.
    */
    'globalDefault'?: boolean;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "globalDefault",
            "baseName": "globalDefault",
            "type": "boolean"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiSchedulingV1alpha1PriorityClass.attributeTypeMap;
    }
}

/**
* PriorityClassList is a collection of priority classes.
*/
export class IoK8sApiSchedulingV1alpha1PriorityClassList {
    /**
    * items is the list of PriorityClasses
    */
    'items': Array<IoK8sApiSchedulingV1alpha1PriorityClass>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiSchedulingV1alpha1PriorityClass>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiSchedulingV1alpha1PriorityClassList.attributeTypeMap;
    }
}

/**
* PodPreset is a policy resource that defines additional runtime requirements for a Pod.
*/
export class IoK8sApiSettingsV1alpha1PodPreset {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    'spec'?: IoK8sApiSettingsV1alpha1PodPresetSpec;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiSettingsV1alpha1PodPresetSpec"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiSettingsV1alpha1PodPreset.attributeTypeMap;
    }
}

/**
* PodPresetList is a list of PodPreset objects.
*/
export class IoK8sApiSettingsV1alpha1PodPresetList {
    /**
    * Items is a list of schema objects.
    */
    'items': Array<IoK8sApiSettingsV1alpha1PodPreset>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiSettingsV1alpha1PodPreset>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiSettingsV1alpha1PodPresetList.attributeTypeMap;
    }
}

/**
* PodPresetSpec is a description of a pod preset.
*/
export class IoK8sApiSettingsV1alpha1PodPresetSpec {

    /**
    * Env defines the collection of EnvVar to inject into containers.
    */
    'env'?: Array<IoK8sApiCoreV1EnvVar>;
    /**
    * EnvFrom defines the collection of EnvFromSource to inject into containers.
    */
    'envFrom'?: Array<IoK8sApiCoreV1EnvFromSource>;
    /**
    * Selector is a label query over a set of resources, in this case pods. Required.
    */
    'selector'?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
    * VolumeMounts defines the collection of VolumeMount to inject into containers.
    */
    'volumeMounts'?: Array<IoK8sApiCoreV1VolumeMount>;
    /**
    * Volumes defines the collection of Volume to inject into the pod.
    */
    'volumes'?: Array<IoK8sApiCoreV1Volume>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "env",
            "baseName": "env",
            "type": "Array<IoK8sApiCoreV1EnvVar>"
        },
        {
            "name": "envFrom",
            "baseName": "envFrom",
            "type": "Array<IoK8sApiCoreV1EnvFromSource>"
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "IoK8sApimachineryPkgApisMetaV1LabelSelector"
        },
        {
            "name": "volumeMounts",
            "baseName": "volumeMounts",
            "type": "Array<IoK8sApiCoreV1VolumeMount>"
        },
        {
            "name": "volumes",
            "baseName": "volumes",
            "type": "Array<IoK8sApiCoreV1Volume>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiSettingsV1alpha1PodPresetSpec.attributeTypeMap;
    }
}

/**
* StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.  StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
*/
export class IoK8sApiStorageV1StorageClass {
    /**
    * Provisioner indicates the type of the provisioner.
    */
    'provisioner': string;

    /**
    * AllowVolumeExpansion shows whether the storage class allow volume expand
    */
    'allowVolumeExpansion'?: boolean;
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.
    */
    'mountOptions'?: Array<string>;
    /**
    * Parameters holds the parameters for the provisioner that should create volumes of this storage class.
    */
    'parameters'?: { [key: string]: string; };
    /**
    * Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
    */
    'reclaimPolicy'?: string;
    /**
    * VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is alpha-level and is only honored by servers that enable the VolumeScheduling feature.
    */
    'volumeBindingMode'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowVolumeExpansion",
            "baseName": "allowVolumeExpansion",
            "type": "boolean"
        },
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "mountOptions",
            "baseName": "mountOptions",
            "type": "Array<string>"
        },
        {
            "name": "parameters",
            "baseName": "parameters",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "provisioner",
            "baseName": "provisioner",
            "type": "string"
        },
        {
            "name": "reclaimPolicy",
            "baseName": "reclaimPolicy",
            "type": "string"
        },
        {
            "name": "volumeBindingMode",
            "baseName": "volumeBindingMode",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1StorageClass.attributeTypeMap;
    }
}

/**
* StorageClassList is a collection of storage classes.
*/
export class IoK8sApiStorageV1StorageClassList {
    /**
    * Items is the list of StorageClasses
    */
    'items': Array<IoK8sApiStorageV1StorageClass>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiStorageV1StorageClass>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1StorageClassList.attributeTypeMap;
    }
}

/**
* VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.  VolumeAttachment objects are non-namespaced.
*/
export class IoK8sApiStorageV1alpha1VolumeAttachment {
    /**
    * Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
    */
    'spec': IoK8sApiStorageV1alpha1VolumeAttachmentSpec;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
    */
    'status'?: IoK8sApiStorageV1alpha1VolumeAttachmentStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiStorageV1alpha1VolumeAttachmentSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiStorageV1alpha1VolumeAttachmentStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1alpha1VolumeAttachment.attributeTypeMap;
    }
}

/**
* VolumeAttachmentList is a collection of VolumeAttachment objects.
*/
export class IoK8sApiStorageV1alpha1VolumeAttachmentList {
    /**
    * Items is the list of VolumeAttachments
    */
    'items': Array<IoK8sApiStorageV1alpha1VolumeAttachment>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiStorageV1alpha1VolumeAttachment>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1alpha1VolumeAttachmentList.attributeTypeMap;
    }
}

/**
* VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
*/
export class IoK8sApiStorageV1alpha1VolumeAttachmentSource {

    /**
    * Name of the persistent volume to attach.
    */
    'persistentVolumeName'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "persistentVolumeName",
            "baseName": "persistentVolumeName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1alpha1VolumeAttachmentSource.attributeTypeMap;
    }
}

/**
* VolumeAttachmentSpec is the specification of a VolumeAttachment request.
*/
export class IoK8sApiStorageV1alpha1VolumeAttachmentSpec {
    /**
    * Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
    */
    'attacher': string;
    /**
    * The node that the volume should be attached to.
    */
    'nodeName': string;
    /**
    * Source represents the volume that should be attached.
    */
    'source': IoK8sApiStorageV1alpha1VolumeAttachmentSource;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "attacher",
            "baseName": "attacher",
            "type": "string"
        },
        {
            "name": "nodeName",
            "baseName": "nodeName",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "IoK8sApiStorageV1alpha1VolumeAttachmentSource"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1alpha1VolumeAttachmentSpec.attributeTypeMap;
    }
}

/**
* VolumeAttachmentStatus is the status of a VolumeAttachment request.
*/
export class IoK8sApiStorageV1alpha1VolumeAttachmentStatus {
    /**
    * Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    */
    'attached': boolean;

    /**
    * The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    */
    'attachError'?: IoK8sApiStorageV1alpha1VolumeError;
    /**
    * Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    */
    'attachmentMetadata'?: { [key: string]: string; };
    /**
    * The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
    */
    'detachError'?: IoK8sApiStorageV1alpha1VolumeError;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "attachError",
            "baseName": "attachError",
            "type": "IoK8sApiStorageV1alpha1VolumeError"
        },
        {
            "name": "attached",
            "baseName": "attached",
            "type": "boolean"
        },
        {
            "name": "attachmentMetadata",
            "baseName": "attachmentMetadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "detachError",
            "baseName": "detachError",
            "type": "IoK8sApiStorageV1alpha1VolumeError"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1alpha1VolumeAttachmentStatus.attributeTypeMap;
    }
}

/**
* VolumeError captures an error encountered during a volume operation.
*/
export class IoK8sApiStorageV1alpha1VolumeError {

    /**
    * String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
    */
    'message'?: string;
    /**
    * Time the error was encountered.
    */
    'time'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "string"
        },
    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1alpha1VolumeError.attributeTypeMap;
    }
}

/**
* StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.  StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
*/
export class IoK8sApiStorageV1beta1StorageClass {
    /**
    * Provisioner indicates the type of the provisioner.
    */
    'provisioner': string;

    /**
    * AllowVolumeExpansion shows whether the storage class allow volume expand
    */
    'allowVolumeExpansion'?: boolean;
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.
    */
    'mountOptions'?: Array<string>;
    /**
    * Parameters holds the parameters for the provisioner that should create volumes of this storage class.
    */
    'parameters'?: { [key: string]: string; };
    /**
    * Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
    */
    'reclaimPolicy'?: string;
    /**
    * VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is alpha-level and is only honored by servers that enable the VolumeScheduling feature.
    */
    'volumeBindingMode'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowVolumeExpansion",
            "baseName": "allowVolumeExpansion",
            "type": "boolean"
        },
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "mountOptions",
            "baseName": "mountOptions",
            "type": "Array<string>"
        },
        {
            "name": "parameters",
            "baseName": "parameters",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "provisioner",
            "baseName": "provisioner",
            "type": "string"
        },
        {
            "name": "reclaimPolicy",
            "baseName": "reclaimPolicy",
            "type": "string"
        },
        {
            "name": "volumeBindingMode",
            "baseName": "volumeBindingMode",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1beta1StorageClass.attributeTypeMap;
    }
}

/**
* StorageClassList is a collection of storage classes.
*/
export class IoK8sApiStorageV1beta1StorageClassList {
    /**
    * Items is the list of StorageClasses
    */
    'items': Array<IoK8sApiStorageV1beta1StorageClass>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiStorageV1beta1StorageClass>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiStorageV1beta1StorageClassList.attributeTypeMap;
    }
}

/**
* CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec describes how the user wants the resources to appear
    */
    'spec'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec;
    /**
    * Status indicates the actual state of the CustomResourceDefinition
    */
    'status'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition.attributeTypeMap;
    }
}

/**
* CustomResourceDefinitionCondition contains details for the current condition of this pod.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition {
    /**
    * Status is the status of the condition. Can be True, False, Unknown.
    */
    'status': string;
    /**
    * Type is the type of the condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * Human-readable message indicating details about last transition.
    */
    'message'?: string;
    /**
    * Unique, one-word, CamelCase reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition.attributeTypeMap;
    }
}

/**
* CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList {
    /**
    * Items individual CustomResourceDefinitions
    */
    'items': Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList.attributeTypeMap;
    }
}

/**
* CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames {
    /**
    * Kind is the serialized kind of the resource.  It is normally CamelCase and singular.
    */
    'kind': string;
    /**
    * Plural is the plural name of the resource to serve.  It must match the name of the CustomResourceDefinition-registration too: plural.group and it must be all lowercase.
    */
    'plural': string;

    /**
    * ListKind is the serialized kind of the list for this resource.  Defaults to <kind>List.
    */
    'listKind'?: string;
    /**
    * ShortNames are short names for the resource.  It must be all lowercase.
    */
    'shortNames'?: Array<string>;
    /**
    * Singular is the singular name of the resource.  It must be all lowercase  Defaults to lowercased <kind>
    */
    'singular'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "listKind",
            "baseName": "listKind",
            "type": "string"
        },
        {
            "name": "plural",
            "baseName": "plural",
            "type": "string"
        },
        {
            "name": "shortNames",
            "baseName": "shortNames",
            "type": "Array<string>"
        },
        {
            "name": "singular",
            "baseName": "singular",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.attributeTypeMap;
    }
}

/**
* CustomResourceDefinitionSpec describes how a user wants their resource to appear
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec {
    /**
    * Group is the group this resource belongs in
    */
    'group': string;
    /**
    * Names are the names used to describe this custom resource
    */
    'names': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames;
    /**
    * Scope indicates whether this resource is cluster or namespace scoped.  Default is namespaced
    */
    'scope': string;
    /**
    * Version is the version this resource belongs in
    */
    'version': string;

    /**
    * Validation describes the validation methods for CustomResources
    */
    'validation'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "names",
            "baseName": "names",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "validation",
            "baseName": "validation",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.attributeTypeMap;
    }
}

/**
* CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
    /**
    * AcceptedNames are the names that are actually being used to serve discovery They may be different than the names in spec.
    */
    'acceptedNames': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames;
    /**
    * Conditions indicate state for particular aspects of a CustomResourceDefinition
    */
    'conditions': Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition>;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "acceptedNames",
            "baseName": "acceptedNames",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.attributeTypeMap;
    }
}

/**
* CustomResourceValidation is a list of validation methods for CustomResources.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation {

    /**
    * OpenAPIV3Schema is the OpenAPI v3 schema to be validated against.
    */
    'openAPIV3Schema'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "openAPIV3Schema",
            "baseName": "openAPIV3Schema",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation.attributeTypeMap;
    }
}

/**
* ExternalDocumentation allows referencing an external resource for extended documentation.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation {

    'description'?: string;
    'url'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation.attributeTypeMap;
    }
}

/**
* JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON {
    'raw': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "raw",
            "baseName": "Raw",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON.attributeTypeMap;
    }
}

/**
* JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps {

    'ref'?: string;
    'schema'?: string;
    'additionalItems'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool;
    'additionalProperties'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool;
    'allOf'?: Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>;
    'anyOf'?: Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>;
    '_default'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON;
    'definitions'?: { [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps; };
    'dependencies'?: { [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray; };
    'description'?: string;
    '_enum'?: Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON>;
    'example'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON;
    'exclusiveMaximum'?: boolean;
    'exclusiveMinimum'?: boolean;
    'externalDocs'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation;
    'format'?: string;
    'id'?: string;
    'items'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray;
    'maxItems'?: number;
    'maxLength'?: number;
    'maxProperties'?: number;
    'maximum'?: number;
    'minItems'?: number;
    'minLength'?: number;
    'minProperties'?: number;
    'minimum'?: number;
    'multipleOf'?: number;
    'not'?: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps;
    'oneOf'?: Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>;
    'pattern'?: string;
    'patternProperties'?: { [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps; };
    'properties'?: { [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps; };
    'required'?: Array<string>;
    'title'?: string;
    'type'?: string;
    'uniqueItems'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ref",
            "baseName": "$ref",
            "type": "string"
        },
        {
            "name": "schema",
            "baseName": "$schema",
            "type": "string"
        },
        {
            "name": "additionalItems",
            "baseName": "additionalItems",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool"
        },
        {
            "name": "additionalProperties",
            "baseName": "additionalProperties",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool"
        },
        {
            "name": "allOf",
            "baseName": "allOf",
            "type": "Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>"
        },
        {
            "name": "anyOf",
            "baseName": "anyOf",
            "type": "Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>"
        },
        {
            "name": "_default",
            "baseName": "default",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON"
        },
        {
            "name": "definitions",
            "baseName": "definitions",
            "type": "{ [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps; }"
        },
        {
            "name": "dependencies",
            "baseName": "dependencies",
            "type": "{ [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray; }"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "_enum",
            "baseName": "enum",
            "type": "Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON>"
        },
        {
            "name": "example",
            "baseName": "example",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON"
        },
        {
            "name": "exclusiveMaximum",
            "baseName": "exclusiveMaximum",
            "type": "boolean"
        },
        {
            "name": "exclusiveMinimum",
            "baseName": "exclusiveMinimum",
            "type": "boolean"
        },
        {
            "name": "externalDocs",
            "baseName": "externalDocs",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation"
        },
        {
            "name": "format",
            "baseName": "format",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray"
        },
        {
            "name": "maxItems",
            "baseName": "maxItems",
            "type": "number"
        },
        {
            "name": "maxLength",
            "baseName": "maxLength",
            "type": "number"
        },
        {
            "name": "maxProperties",
            "baseName": "maxProperties",
            "type": "number"
        },
        {
            "name": "maximum",
            "baseName": "maximum",
            "type": "number"
        },
        {
            "name": "minItems",
            "baseName": "minItems",
            "type": "number"
        },
        {
            "name": "minLength",
            "baseName": "minLength",
            "type": "number"
        },
        {
            "name": "minProperties",
            "baseName": "minProperties",
            "type": "number"
        },
        {
            "name": "minimum",
            "baseName": "minimum",
            "type": "number"
        },
        {
            "name": "multipleOf",
            "baseName": "multipleOf",
            "type": "number"
        },
        {
            "name": "not",
            "baseName": "not",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps"
        },
        {
            "name": "oneOf",
            "baseName": "oneOf",
            "type": "Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>"
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string"
        },
        {
            "name": "patternProperties",
            "baseName": "patternProperties",
            "type": "{ [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps; }"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "{ [key: string]: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps; }"
        },
        {
            "name": "required",
            "baseName": "required",
            "type": "Array<string>"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "uniqueItems",
            "baseName": "uniqueItems",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps.attributeTypeMap;
    }
}

/**
* JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray {
    'jSONSchemas': Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>;
    'schema': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "jSONSchemas",
            "baseName": "JSONSchemas",
            "type": "Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>"
        },
        {
            "name": "schema",
            "baseName": "Schema",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray.attributeTypeMap;
    }
}

/**
* JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool {
    'allows': boolean;
    'schema': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allows",
            "baseName": "Allows",
            "type": "boolean"
        },
        {
            "name": "schema",
            "baseName": "Schema",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool.attributeTypeMap;
    }
}

/**
* JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
*/
export class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray {
    'property': Array<string>;
    'schema': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "property",
            "baseName": "Property",
            "type": "Array<string>"
        },
        {
            "name": "schema",
            "baseName": "Schema",
            "type": "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray.attributeTypeMap;
    }
}

export class IoK8sApimachineryPkgApiResourceQuantity {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApiResourceQuantity.attributeTypeMap;
    }
}

/**
* APIGroup contains the name, the supported versions, and the preferred version of a group.
*/
export class IoK8sApimachineryPkgApisMetaV1APIGroup {
    /**
    * name is the name of the group.
    */
    'name': string;
    /**
    * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    */
    'serverAddressByClientCIDRs': Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>;
    /**
    * versions are the versions supported in this group.
    */
    'versions': Array<IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * preferredVersion is the version preferred by the API server, which probably is the storage version.
    */
    'preferredVersion'?: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "preferredVersion",
            "baseName": "preferredVersion",
            "type": "IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery"
        },
        {
            "name": "serverAddressByClientCIDRs",
            "baseName": "serverAddressByClientCIDRs",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>"
        },
        {
            "name": "versions",
            "baseName": "versions",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1APIGroup.attributeTypeMap;
    }
}

/**
* APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
*/
export class IoK8sApimachineryPkgApisMetaV1APIGroupList {
    /**
    * groups is a list of APIGroup.
    */
    'groups': Array<IoK8sApimachineryPkgApisMetaV1APIGroup>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1APIGroup>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1APIGroupList.attributeTypeMap;
    }
}

/**
* APIResource specifies the name of a resource and whether it is namespaced.
*/
export class IoK8sApimachineryPkgApisMetaV1APIResource {
    /**
    * kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
    */
    'kind': string;
    /**
    * name is the plural name of the resource.
    */
    'name': string;
    /**
    * namespaced indicates if a resource is namespaced or not.
    */
    'namespaced': boolean;
    /**
    * singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
    */
    'singularName': string;
    /**
    * verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
    */
    'verbs': Array<string>;

    /**
    * categories is a list of the grouped resources this resource belongs to (e.g. 'all')
    */
    'categories'?: Array<string>;
    /**
    * group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".
    */
    'group'?: string;
    /**
    * shortNames is a list of suggested short names of the resource.
    */
    'shortNames'?: Array<string>;
    /**
    * version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".
    */
    'version'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<string>"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespaced",
            "baseName": "namespaced",
            "type": "boolean"
        },
        {
            "name": "shortNames",
            "baseName": "shortNames",
            "type": "Array<string>"
        },
        {
            "name": "singularName",
            "baseName": "singularName",
            "type": "string"
        },
        {
            "name": "verbs",
            "baseName": "verbs",
            "type": "Array<string>"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1APIResource.attributeTypeMap;
    }
}

/**
* APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
*/
export class IoK8sApimachineryPkgApisMetaV1APIResourceList {
    /**
    * groupVersion is the group and version this APIResourceList is for.
    */
    'groupVersion': string;
    /**
    * resources contains the name of the resources and if they are namespaced.
    */
    'resources': Array<IoK8sApimachineryPkgApisMetaV1APIResource>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "groupVersion",
            "baseName": "groupVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1APIResource>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1APIResourceList.attributeTypeMap;
    }
}

/**
* APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
*/
export class IoK8sApimachineryPkgApisMetaV1APIVersions {
    /**
    * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    */
    'serverAddressByClientCIDRs': Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>;
    /**
    * versions are the api versions that are available.
    */
    'versions': Array<string>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "serverAddressByClientCIDRs",
            "baseName": "serverAddressByClientCIDRs",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>"
        },
        {
            "name": "versions",
            "baseName": "versions",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1APIVersions.attributeTypeMap;
    }
}

/**
* DeleteOptions may be provided when deleting an API object.
*/
export class IoK8sApimachineryPkgApisMetaV1DeleteOptions {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    */
    'gracePeriodSeconds'?: number;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    */
    'orphanDependents'?: boolean;
    /**
    * Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    */
    'preconditions'?: IoK8sApimachineryPkgApisMetaV1Preconditions;
    /**
    * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    */
    'propagationPolicy'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "gracePeriodSeconds",
            "baseName": "gracePeriodSeconds",
            "type": "number"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "orphanDependents",
            "baseName": "orphanDependents",
            "type": "boolean"
        },
        {
            "name": "preconditions",
            "baseName": "preconditions",
            "type": "IoK8sApimachineryPkgApisMetaV1Preconditions"
        },
        {
            "name": "propagationPolicy",
            "baseName": "propagationPolicy",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1DeleteOptions.attributeTypeMap;
    }
}

/**
* GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.
*/
export class IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
    /**
    * groupVersion specifies the API group and version in the form \"group/version\"
    */
    'groupVersion': string;
    /**
    * version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.
    */
    'version': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "groupVersion",
            "baseName": "groupVersion",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.attributeTypeMap;
    }
}

/**
* Initializer is information about an initializer that has not yet completed.
*/
export class IoK8sApimachineryPkgApisMetaV1Initializer {
    /**
    * name of the process that is responsible for initializing this object.
    */
    'name': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1Initializer.attributeTypeMap;
    }
}

/**
* Initializers tracks the progress of initialization.
*/
export class IoK8sApimachineryPkgApisMetaV1Initializers {
    /**
    * Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
    */
    'pending': Array<IoK8sApimachineryPkgApisMetaV1Initializer>;

    /**
    * If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.
    */
    'result'?: IoK8sApimachineryPkgApisMetaV1Status;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pending",
            "baseName": "pending",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1Initializer>"
        },
        {
            "name": "result",
            "baseName": "result",
            "type": "IoK8sApimachineryPkgApisMetaV1Status"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1Initializers.attributeTypeMap;
    }
}

/**
* A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
*/
export class IoK8sApimachineryPkgApisMetaV1LabelSelector {

    /**
    * matchExpressions is a list of label selector requirements. The requirements are ANDed.
    */
    'matchExpressions'?: Array<IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement>;
    /**
    * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.
    */
    'matchLabels'?: { [key: string]: string; };

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "matchExpressions",
            "baseName": "matchExpressions",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement>"
        },
        {
            "name": "matchLabels",
            "baseName": "matchLabels",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1LabelSelector.attributeTypeMap;
    }
}

/**
* A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
*/
export class IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement {
    /**
    * key is the label key that the selector applies to.
    */
    'key': string;
    /**
    * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    */
    'operator': string;

    /**
    * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    */
    'values'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string"
        },
        {
            "name": "values",
            "baseName": "values",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement.attributeTypeMap;
    }
}

/**
* ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
*/
export class IoK8sApimachineryPkgApisMetaV1ListMeta {

    /**
    * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.
    */
    '_continue'?: string;
    /**
    * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
    */
    'resourceVersion'?: string;
    /**
    * selfLink is a URL representing this object. Populated by the system. Read-only.
    */
    'selfLink'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "_continue",
            "baseName": "continue",
            "type": "string"
        },
        {
            "name": "resourceVersion",
            "baseName": "resourceVersion",
            "type": "string"
        },
        {
            "name": "selfLink",
            "baseName": "selfLink",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1ListMeta.attributeTypeMap;
    }
}

export class IoK8sApimachineryPkgApisMetaV1MicroTime {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1MicroTime.attributeTypeMap;
    }
}

/**
* ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
*/
export class IoK8sApimachineryPkgApisMetaV1ObjectMeta {

    /**
    * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
    */
    'annotations'?: { [key: string]: string; };
    /**
    * The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
    */
    'clusterName'?: string;
    /**
    * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'creationTimestamp'?: string;
    /**
    * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    */
    'deletionGracePeriodSeconds'?: number;
    /**
    * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    */
    'deletionTimestamp'?: string;
    /**
    * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
    */
    'finalizers'?: Array<string>;
    /**
    * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
    */
    'generateName'?: string;
    /**
    * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    */
    'generation'?: number;
    /**
    * An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.  When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.
    */
    'initializers'?: IoK8sApimachineryPkgApisMetaV1Initializers;
    /**
    * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    */
    'labels'?: { [key: string]: string; };
    /**
    * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    */
    'name'?: string;
    /**
    * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
    */
    'namespace'?: string;
    /**
    * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    */
    'ownerReferences'?: Array<IoK8sApimachineryPkgApisMetaV1OwnerReference>;
    /**
    * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
    */
    'resourceVersion'?: string;
    /**
    * SelfLink is a URL representing this object. Populated by the system. Read-only.
    */
    'selfLink'?: string;
    /**
    * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    */
    'uid'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "annotations",
            "baseName": "annotations",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string"
        },
        {
            "name": "creationTimestamp",
            "baseName": "creationTimestamp",
            "type": "string"
        },
        {
            "name": "deletionGracePeriodSeconds",
            "baseName": "deletionGracePeriodSeconds",
            "type": "number"
        },
        {
            "name": "deletionTimestamp",
            "baseName": "deletionTimestamp",
            "type": "string"
        },
        {
            "name": "finalizers",
            "baseName": "finalizers",
            "type": "Array<string>"
        },
        {
            "name": "generateName",
            "baseName": "generateName",
            "type": "string"
        },
        {
            "name": "generation",
            "baseName": "generation",
            "type": "number"
        },
        {
            "name": "initializers",
            "baseName": "initializers",
            "type": "IoK8sApimachineryPkgApisMetaV1Initializers"
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        },
        {
            "name": "ownerReferences",
            "baseName": "ownerReferences",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1OwnerReference>"
        },
        {
            "name": "resourceVersion",
            "baseName": "resourceVersion",
            "type": "string"
        },
        {
            "name": "selfLink",
            "baseName": "selfLink",
            "type": "string"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1ObjectMeta.attributeTypeMap;
    }
}

/**
* OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
*/
export class IoK8sApimachineryPkgApisMetaV1OwnerReference {
    /**
    * API version of the referent.
    */
    'apiVersion': string;
    /**
    * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind': string;
    /**
    * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    */
    'name': string;
    /**
    * UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    */
    'uid': string;

    /**
    * If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
    */
    'blockOwnerDeletion'?: boolean;
    /**
    * If true, this reference points to the managing controller.
    */
    'controller'?: boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "blockOwnerDeletion",
            "baseName": "blockOwnerDeletion",
            "type": "boolean"
        },
        {
            "name": "controller",
            "baseName": "controller",
            "type": "boolean"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1OwnerReference.attributeTypeMap;
    }
}

/**
* Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
*/
export class IoK8sApimachineryPkgApisMetaV1Patch {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1Patch.attributeTypeMap;
    }
}

/**
* Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
*/
export class IoK8sApimachineryPkgApisMetaV1Preconditions {

    /**
    * Specifies the target UID.
    */
    'uid'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1Preconditions.attributeTypeMap;
    }
}

/**
* ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
*/
export class IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR {
    /**
    * The CIDR with which clients can match their IP to figure out the server address that they should use.
    */
    'clientCIDR': string;
    /**
    * Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
    */
    'serverAddress': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clientCIDR",
            "baseName": "clientCIDR",
            "type": "string"
        },
        {
            "name": "serverAddress",
            "baseName": "serverAddress",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR.attributeTypeMap;
    }
}

/**
* Status is a return value for calls that don't return other objects.
*/
export class IoK8sApimachineryPkgApisMetaV1Status {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Suggested HTTP return code for this status, 0 if not set.
    */
    'code'?: number;
    /**
    * Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
    */
    'details'?: IoK8sApimachineryPkgApisMetaV1StatusDetails;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * A human-readable description of the status of this operation.
    */
    'message'?: string;
    /**
    * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;
    /**
    * A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
    */
    'reason'?: string;
    /**
    * Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    */
    'status'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "details",
            "baseName": "details",
            "type": "IoK8sApimachineryPkgApisMetaV1StatusDetails"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1Status.attributeTypeMap;
    }
}

/**
* StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
*/
export class IoK8sApimachineryPkgApisMetaV1StatusCause {

    /**
    * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.  Examples:   \"name\" - the field \"name\" on the current resource   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"
    */
    'field'?: string;
    /**
    * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
    */
    'message'?: string;
    /**
    * A machine-readable description of the cause of the error. If this value is empty there is no information available.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "field",
            "baseName": "field",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1StatusCause.attributeTypeMap;
    }
}

/**
* StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
*/
export class IoK8sApimachineryPkgApisMetaV1StatusDetails {

    /**
    * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
    */
    'causes'?: Array<IoK8sApimachineryPkgApisMetaV1StatusCause>;
    /**
    * The group attribute of the resource associated with the status StatusReason.
    */
    'group'?: string;
    /**
    * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    /**
    * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
    */
    'name'?: string;
    /**
    * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
    */
    'retryAfterSeconds'?: number;
    /**
    * UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    */
    'uid'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "causes",
            "baseName": "causes",
            "type": "Array<IoK8sApimachineryPkgApisMetaV1StatusCause>"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "retryAfterSeconds",
            "baseName": "retryAfterSeconds",
            "type": "number"
        },
        {
            "name": "uid",
            "baseName": "uid",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1StatusDetails.attributeTypeMap;
    }
}

export class IoK8sApimachineryPkgApisMetaV1Time {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1Time.attributeTypeMap;
    }
}

/**
* Event represents a single event to a watched resource.
*/
export class IoK8sApimachineryPkgApisMetaV1WatchEvent {
    /**
    * Object is:  * If Type is Added or Modified: the new state of the object.  * If Type is Deleted: the state of the object immediately before deletion.  * If Type is Error: *Status is recommended; other types may make sense    depending on context.
    */
    'object': IoK8sApimachineryPkgRuntimeRawExtension;
    'type': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "object",
            "baseName": "object",
            "type": "IoK8sApimachineryPkgRuntimeRawExtension"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgApisMetaV1WatchEvent.attributeTypeMap;
    }
}

/**
* RawExtension is used to hold extensions in external versions.  To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.  // Internal package: type MyAPIObject struct {  runtime.TypeMeta `json:\",inline\"`  MyPlugin runtime.Object `json:\"myPlugin\"` } type PluginA struct {  AOption string `json:\"aOption\"` }  // External package: type MyAPIObject struct {  runtime.TypeMeta `json:\",inline\"`  MyPlugin runtime.RawExtension `json:\"myPlugin\"` } type PluginA struct {  AOption string `json:\"aOption\"` }  // On the wire, the JSON will look something like this: {  \"kind\":\"MyAPIObject\",  \"apiVersion\":\"v1\",  \"myPlugin\": {   \"kind\":\"PluginA\",   \"aOption\":\"foo\",  }, }  So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
*/
export class IoK8sApimachineryPkgRuntimeRawExtension {
    /**
    * Raw is the underlying serialization of this object.
    */
    'raw': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "raw",
            "baseName": "Raw",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgRuntimeRawExtension.attributeTypeMap;
    }
}

export class IoK8sApimachineryPkgUtilIntstrIntOrString {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgUtilIntstrIntOrString.attributeTypeMap;
    }
}

/**
* Info contains versioning information. how we'll want to distribute that information.
*/
export class IoK8sApimachineryPkgVersionInfo {
    'buildDate': string;
    'compiler': string;
    'gitCommit': string;
    'gitTreeState': string;
    'gitVersion': string;
    'goVersion': string;
    'major': string;
    'minor': string;
    'platform': string;


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "buildDate",
            "baseName": "buildDate",
            "type": "string"
        },
        {
            "name": "compiler",
            "baseName": "compiler",
            "type": "string"
        },
        {
            "name": "gitCommit",
            "baseName": "gitCommit",
            "type": "string"
        },
        {
            "name": "gitTreeState",
            "baseName": "gitTreeState",
            "type": "string"
        },
        {
            "name": "gitVersion",
            "baseName": "gitVersion",
            "type": "string"
        },
        {
            "name": "goVersion",
            "baseName": "goVersion",
            "type": "string"
        },
        {
            "name": "major",
            "baseName": "major",
            "type": "string"
        },
        {
            "name": "minor",
            "baseName": "minor",
            "type": "string"
        },
        {
            "name": "platform",
            "baseName": "platform",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sApimachineryPkgVersionInfo.attributeTypeMap;
    }
}

/**
* APIService represents a server for a particular GroupVersion. Name must be \"version.group\".
*/
export class IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService {

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
    * Spec contains information for locating and communicating with a server
    */
    'spec'?: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec;
    /**
    * Status contains derived information about an API server
    */
    'status'?: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService.attributeTypeMap;
    }
}

export class IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition {
    /**
    * Status is the status of the condition. Can be True, False, Unknown.
    */
    'status': string;
    /**
    * Type is the type of the condition.
    */
    'type': string;

    /**
    * Last time the condition transitioned from one status to another.
    */
    'lastTransitionTime'?: string;
    /**
    * Human-readable message indicating details about last transition.
    */
    'message'?: string;
    /**
    * Unique, one-word, CamelCase reason for the condition's last transition.
    */
    'reason'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTransitionTime",
            "baseName": "lastTransitionTime",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition.attributeTypeMap;
    }
}

/**
* APIServiceList is a list of APIService objects.
*/
export class IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceList {
    'items': Array<IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService>;

    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService>"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "IoK8sApimachineryPkgApisMetaV1ListMeta"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceList.attributeTypeMap;
    }
}

/**
* APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
*/
export class IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec {
    /**
    * CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.
    */
    'caBundle': string;
    /**
    * GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
    */
    'groupPriorityMinimum': number;
    /**
    * Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
    */
    'service': IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference;
    /**
    * VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it's inside of a group, the number can be small, probably in the 10s.
    */
    'versionPriority': number;

    /**
    * Group is the API group name this server hosts
    */
    'group'?: string;
    /**
    * InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
    */
    'insecureSkipTLSVerify'?: boolean;
    /**
    * Version is the API version this server hosts.  For example, \"v1\"
    */
    'version'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "caBundle",
            "baseName": "caBundle",
            "type": "string"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "groupPriorityMinimum",
            "baseName": "groupPriorityMinimum",
            "type": "number"
        },
        {
            "name": "insecureSkipTLSVerify",
            "baseName": "insecureSkipTLSVerify",
            "type": "boolean"
        },
        {
            "name": "service",
            "baseName": "service",
            "type": "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "versionPriority",
            "baseName": "versionPriority",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.attributeTypeMap;
    }
}

/**
* APIServiceStatus contains derived information about an API server
*/
export class IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus {

    /**
    * Current service state of apiService.
    */
    'conditions'?: Array<IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition>"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus.attributeTypeMap;
    }
}

/**
* ServiceReference holds a reference to Service.legacy.k8s.io
*/
export class IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference {

    /**
    * Name is the name of the service
    */
    'name'?: string;
    /**
    * Namespace is the namespace of the service
    */
    'namespace'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Affinity {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Affinity.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1AttachedVolume {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1AttachedVolume.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1AzureDiskVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1AzureDiskVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1AzureFileVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1AzureFileVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Binding {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Binding.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Capabilities {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Capabilities.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1CephFSVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1CephFSVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1CinderVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1CinderVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ComponentCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ComponentCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ComponentStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ComponentStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ComponentStatusList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ComponentStatusList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ConfigMap {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ConfigMap.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ConfigMapEnvSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ConfigMapEnvSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ConfigMapKeySelector {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ConfigMapKeySelector.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ConfigMapList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ConfigMapList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ConfigMapProjection {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ConfigMapProjection.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ConfigMapVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ConfigMapVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Container {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Container.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ContainerImage {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ContainerImage.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ContainerPort {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ContainerPort.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ContainerState {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ContainerState.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ContainerStateRunning {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ContainerStateRunning.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ContainerStateTerminated {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ContainerStateTerminated.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ContainerStateWaiting {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ContainerStateWaiting.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ContainerStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ContainerStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1DaemonEndpoint {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1DaemonEndpoint.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1DownwardAPIProjection {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1DownwardAPIProjection.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1DownwardAPIVolumeFile {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1DownwardAPIVolumeFile.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EmptyDirVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EmptyDirVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EndpointAddress {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EndpointAddress.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EndpointPort {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EndpointPort.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EndpointSubset {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EndpointSubset.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Endpoints {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Endpoints.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EndpointsList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EndpointsList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EnvFromSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EnvFromSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EnvVar {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EnvVar.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EnvVarSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EnvVarSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Event {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Event.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EventList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EventList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1EventSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1EventSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ExecAction {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ExecAction.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1FCVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1FCVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1FlexVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1FlexVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1FlockerVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1FlockerVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1GitRepoVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1GitRepoVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1GlusterfsVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1GlusterfsVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1HTTPGetAction {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1HTTPGetAction.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1HTTPHeader {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1HTTPHeader.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Handler {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Handler.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1HostAlias {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1HostAlias.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1HostPathVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1HostPathVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ISCSIVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ISCSIVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1KeyToPath {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1KeyToPath.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Lifecycle {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Lifecycle.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LimitRange {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LimitRange.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LimitRangeItem {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LimitRangeItem.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LimitRangeList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LimitRangeList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LimitRangeSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LimitRangeSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LoadBalancerIngress {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LoadBalancerIngress.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LoadBalancerStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LoadBalancerStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LocalObjectReference {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LocalObjectReference.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1LocalVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1LocalVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NFSVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NFSVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Namespace {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Namespace.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NamespaceList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NamespaceList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NamespaceSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NamespaceSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NamespaceStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NamespaceStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Node {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Node.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeAddress {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeAddress.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeAffinity {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeAffinity.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeDaemonEndpoints {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeDaemonEndpoints.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeSelector {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeSelector.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeSelectorRequirement {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeSelectorRequirement.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeSelectorTerm {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeSelectorTerm.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1NodeSystemInfo {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1NodeSystemInfo.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ObjectFieldSelector {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ObjectFieldSelector.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ObjectReference {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ObjectReference.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolume {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolume.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeClaim {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeClaim.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeClaimList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeClaimList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeClaimSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeClaimSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeClaimStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeClaimStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PersistentVolumeStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PersistentVolumeStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Pod {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Pod.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodAffinity {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodAffinity.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodAffinityTerm {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodAffinityTerm.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodAntiAffinity {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodAntiAffinity.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodSecurityContext {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodSecurityContext.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodTemplate {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodTemplate.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodTemplateList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodTemplateList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PodTemplateSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PodTemplateSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PortworxVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PortworxVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1PreferredSchedulingTerm {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1PreferredSchedulingTerm.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Probe {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Probe.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ProjectedVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ProjectedVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1QuobyteVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1QuobyteVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1RBDVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1RBDVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ReplicationController {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ReplicationController.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ReplicationControllerCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ReplicationControllerCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ReplicationControllerList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ReplicationControllerList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ReplicationControllerSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ReplicationControllerSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ReplicationControllerStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ReplicationControllerStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ResourceFieldSelector {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ResourceFieldSelector.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ResourceQuota {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ResourceQuota.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ResourceQuotaList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ResourceQuotaList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ResourceQuotaSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ResourceQuotaSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ResourceQuotaStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ResourceQuotaStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ResourceRequirements {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ResourceRequirements.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1SELinuxOptions {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1SELinuxOptions.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ScaleIOVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ScaleIOVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Secret {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Secret.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1SecretEnvSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1SecretEnvSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1SecretKeySelector {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1SecretKeySelector.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1SecretList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1SecretList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1SecretProjection {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1SecretProjection.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1SecretVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1SecretVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1SecurityContext {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1SecurityContext.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Service {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Service.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ServiceAccount {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ServiceAccount.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ServiceAccountList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ServiceAccountList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ServiceList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ServiceList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ServicePort {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ServicePort.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ServiceSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ServiceSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1ServiceStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1ServiceStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1StorageOSPersistentVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1StorageOSPersistentVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1StorageOSVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1StorageOSVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1TCPSocketAction {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1TCPSocketAction.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Taint {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Taint.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Toleration {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Toleration.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1Volume {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1Volume.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1VolumeMount {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1VolumeMount.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1VolumeProjection {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1VolumeProjection.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfiguration {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfiguration.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfigurationList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfigurationList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1ControllerRevision {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1ControllerRevision.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1ControllerRevisionList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1ControllerRevisionList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1Deployment {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1Deployment.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1DeploymentCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1DeploymentCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1DeploymentList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1DeploymentList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1DeploymentRollback {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1DeploymentRollback.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1DeploymentSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1DeploymentSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1DeploymentStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1DeploymentStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1DeploymentStrategy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1DeploymentStrategy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1RollbackConfig {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1RollbackConfig.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateDeployment {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateDeployment.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateStatefulSetStrategy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateStatefulSetStrategy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1Scale {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1Scale.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1ScaleSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1ScaleSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1ScaleStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1ScaleStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1StatefulSet {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1StatefulSet.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1StatefulSetList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1StatefulSetList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1StatefulSetSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1StatefulSetSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1StatefulSetStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1StatefulSetStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAppsV1beta1StatefulSetUpdateStrategy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAppsV1beta1StatefulSetUpdateStrategy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1TokenReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1TokenReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1TokenReviewSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1TokenReviewSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1TokenReviewStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1TokenReviewStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1UserInfo {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1UserInfo.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthenticationV1beta1UserInfo {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthenticationV1beta1UserInfo.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1LocalSubjectAccessReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1LocalSubjectAccessReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1NonResourceAttributes {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1NonResourceAttributes.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1ResourceAttributes {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1ResourceAttributes.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReviewSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReviewSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1LocalSubjectAccessReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1LocalSubjectAccessReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1NonResourceAttributes {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1NonResourceAttributes.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1ResourceAttributes {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1ResourceAttributes.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReviewSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReviewSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReview {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReview.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1CrossVersionObjectReference {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1CrossVersionObjectReference.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscaler {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscaler.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1Scale {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1Scale.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1ScaleSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1ScaleSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisAutoscalingV1ScaleStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisAutoscalingV1ScaleStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV1Job {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV1Job.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV1JobCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV1JobCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV1JobList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV1JobList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV1JobSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV1JobSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV1JobStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV1JobStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV2alpha1CronJob {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV2alpha1CronJob.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV2alpha1CronJobList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV2alpha1CronJobList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV2alpha1CronJobSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV2alpha1CronJobSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV2alpha1CronJobStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV2alpha1CronJobStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisBatchV2alpha1JobTemplateSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisBatchV2alpha1JobTemplateSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequest {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequest.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetUpdateStrategy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetUpdateStrategy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1Deployment {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1Deployment.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentRollback {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentRollback.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStrategy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStrategy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1FSGroupStrategyOptions {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1FSGroupStrategyOptions.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressPath {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressPath.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressRuleValue {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressRuleValue.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1HostPortRange {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1HostPortRange.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1IDRange {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1IDRange.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1Ingress {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1Ingress.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1IngressList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1IngressList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1IngressStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1IngressStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1IngressTLS {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1IngressTLS.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyIngressRule {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyIngressRule.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPort {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPort.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicySpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicySpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicyList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicyList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicySpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicySpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetCondition {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetCondition.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1RollbackConfig {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1RollbackConfig.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDaemonSet {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDaemonSet.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDeployment {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDeployment.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1RunAsUserStrategyOptions {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1RunAsUserStrategyOptions.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1SELinuxStrategyOptions {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1SELinuxStrategyOptions.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1Scale {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1Scale.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1ScaleSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1ScaleSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1ScaleStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1ScaleStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisExtensionsV1beta1SupplementalGroupsStrategyOptions {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisExtensionsV1beta1SupplementalGroupsStrategyOptions.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicy {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisNetworkingV1NetworkPolicy.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPeer {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPeer.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisPolicyV1beta1Eviction {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisPolicyV1beta1Eviction.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudget {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudget.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetStatus {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetStatus.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBindingList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBindingList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1PolicyRule {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1PolicyRule.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1Role {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1Role.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1RoleList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1RoleList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1RoleRef {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1RoleRef.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1alpha1Subject {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1alpha1Subject.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1ClusterRole {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1ClusterRole.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBinding {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBinding.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBindingList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBindingList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1PolicyRule {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1PolicyRule.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1Role {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1Role.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1RoleBinding {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1RoleBinding.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1RoleBindingList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1RoleBindingList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1RoleList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1RoleList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1RoleRef {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1RoleRef.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisRbacV1beta1Subject {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisRbacV1beta1Subject.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisSettingsV1alpha1PodPreset {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisSettingsV1alpha1PodPreset.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisStorageV1StorageClass {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisStorageV1StorageClass.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisStorageV1StorageClassList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisStorageV1StorageClassList.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisStorageV1beta1StorageClass {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisStorageV1beta1StorageClass.attributeTypeMap;
    }
}

export class IoK8sKubernetesPkgApisStorageV1beta1StorageClassList {


    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return IoK8sKubernetesPkgApisStorageV1beta1StorageClassList.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "IoK8sApiAdmissionregistrationV1alpha1Initializer": IoK8sApiAdmissionregistrationV1alpha1Initializer,
    "IoK8sApiAdmissionregistrationV1alpha1InitializerConfiguration": IoK8sApiAdmissionregistrationV1alpha1InitializerConfiguration,
    "IoK8sApiAdmissionregistrationV1alpha1InitializerConfigurationList": IoK8sApiAdmissionregistrationV1alpha1InitializerConfigurationList,
    "IoK8sApiAdmissionregistrationV1alpha1Rule": IoK8sApiAdmissionregistrationV1alpha1Rule,
    "IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration": IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration,
    "IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationList": IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationList,
    "IoK8sApiAdmissionregistrationV1beta1RuleWithOperations": IoK8sApiAdmissionregistrationV1beta1RuleWithOperations,
    "IoK8sApiAdmissionregistrationV1beta1ServiceReference": IoK8sApiAdmissionregistrationV1beta1ServiceReference,
    "IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration": IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration,
    "IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationList": IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationList,
    "IoK8sApiAdmissionregistrationV1beta1Webhook": IoK8sApiAdmissionregistrationV1beta1Webhook,
    "IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig": IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig,
    "IoK8sApiAppsV1ControllerRevision": IoK8sApiAppsV1ControllerRevision,
    "IoK8sApiAppsV1ControllerRevisionList": IoK8sApiAppsV1ControllerRevisionList,
    "IoK8sApiAppsV1DaemonSet": IoK8sApiAppsV1DaemonSet,
    "IoK8sApiAppsV1DaemonSetCondition": IoK8sApiAppsV1DaemonSetCondition,
    "IoK8sApiAppsV1DaemonSetList": IoK8sApiAppsV1DaemonSetList,
    "IoK8sApiAppsV1DaemonSetSpec": IoK8sApiAppsV1DaemonSetSpec,
    "IoK8sApiAppsV1DaemonSetStatus": IoK8sApiAppsV1DaemonSetStatus,
    "IoK8sApiAppsV1DaemonSetUpdateStrategy": IoK8sApiAppsV1DaemonSetUpdateStrategy,
    "IoK8sApiAppsV1Deployment": IoK8sApiAppsV1Deployment,
    "IoK8sApiAppsV1DeploymentCondition": IoK8sApiAppsV1DeploymentCondition,
    "IoK8sApiAppsV1DeploymentList": IoK8sApiAppsV1DeploymentList,
    "IoK8sApiAppsV1DeploymentSpec": IoK8sApiAppsV1DeploymentSpec,
    "IoK8sApiAppsV1DeploymentStatus": IoK8sApiAppsV1DeploymentStatus,
    "IoK8sApiAppsV1DeploymentStrategy": IoK8sApiAppsV1DeploymentStrategy,
    "IoK8sApiAppsV1ReplicaSet": IoK8sApiAppsV1ReplicaSet,
    "IoK8sApiAppsV1ReplicaSetCondition": IoK8sApiAppsV1ReplicaSetCondition,
    "IoK8sApiAppsV1ReplicaSetList": IoK8sApiAppsV1ReplicaSetList,
    "IoK8sApiAppsV1ReplicaSetSpec": IoK8sApiAppsV1ReplicaSetSpec,
    "IoK8sApiAppsV1ReplicaSetStatus": IoK8sApiAppsV1ReplicaSetStatus,
    "IoK8sApiAppsV1RollingUpdateDaemonSet": IoK8sApiAppsV1RollingUpdateDaemonSet,
    "IoK8sApiAppsV1RollingUpdateDeployment": IoK8sApiAppsV1RollingUpdateDeployment,
    "IoK8sApiAppsV1RollingUpdateStatefulSetStrategy": IoK8sApiAppsV1RollingUpdateStatefulSetStrategy,
    "IoK8sApiAppsV1StatefulSet": IoK8sApiAppsV1StatefulSet,
    "IoK8sApiAppsV1StatefulSetCondition": IoK8sApiAppsV1StatefulSetCondition,
    "IoK8sApiAppsV1StatefulSetList": IoK8sApiAppsV1StatefulSetList,
    "IoK8sApiAppsV1StatefulSetSpec": IoK8sApiAppsV1StatefulSetSpec,
    "IoK8sApiAppsV1StatefulSetStatus": IoK8sApiAppsV1StatefulSetStatus,
    "IoK8sApiAppsV1StatefulSetUpdateStrategy": IoK8sApiAppsV1StatefulSetUpdateStrategy,
    "IoK8sApiAppsV1beta1ControllerRevision": IoK8sApiAppsV1beta1ControllerRevision,
    "IoK8sApiAppsV1beta1ControllerRevisionList": IoK8sApiAppsV1beta1ControllerRevisionList,
    "IoK8sApiAppsV1beta1Deployment": IoK8sApiAppsV1beta1Deployment,
    "IoK8sApiAppsV1beta1DeploymentCondition": IoK8sApiAppsV1beta1DeploymentCondition,
    "IoK8sApiAppsV1beta1DeploymentList": IoK8sApiAppsV1beta1DeploymentList,
    "IoK8sApiAppsV1beta1DeploymentRollback": IoK8sApiAppsV1beta1DeploymentRollback,
    "IoK8sApiAppsV1beta1DeploymentSpec": IoK8sApiAppsV1beta1DeploymentSpec,
    "IoK8sApiAppsV1beta1DeploymentStatus": IoK8sApiAppsV1beta1DeploymentStatus,
    "IoK8sApiAppsV1beta1DeploymentStrategy": IoK8sApiAppsV1beta1DeploymentStrategy,
    "IoK8sApiAppsV1beta1RollbackConfig": IoK8sApiAppsV1beta1RollbackConfig,
    "IoK8sApiAppsV1beta1RollingUpdateDeployment": IoK8sApiAppsV1beta1RollingUpdateDeployment,
    "IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy": IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy,
    "IoK8sApiAppsV1beta1Scale": IoK8sApiAppsV1beta1Scale,
    "IoK8sApiAppsV1beta1ScaleSpec": IoK8sApiAppsV1beta1ScaleSpec,
    "IoK8sApiAppsV1beta1ScaleStatus": IoK8sApiAppsV1beta1ScaleStatus,
    "IoK8sApiAppsV1beta1StatefulSet": IoK8sApiAppsV1beta1StatefulSet,
    "IoK8sApiAppsV1beta1StatefulSetCondition": IoK8sApiAppsV1beta1StatefulSetCondition,
    "IoK8sApiAppsV1beta1StatefulSetList": IoK8sApiAppsV1beta1StatefulSetList,
    "IoK8sApiAppsV1beta1StatefulSetSpec": IoK8sApiAppsV1beta1StatefulSetSpec,
    "IoK8sApiAppsV1beta1StatefulSetStatus": IoK8sApiAppsV1beta1StatefulSetStatus,
    "IoK8sApiAppsV1beta1StatefulSetUpdateStrategy": IoK8sApiAppsV1beta1StatefulSetUpdateStrategy,
    "IoK8sApiAppsV1beta2ControllerRevision": IoK8sApiAppsV1beta2ControllerRevision,
    "IoK8sApiAppsV1beta2ControllerRevisionList": IoK8sApiAppsV1beta2ControllerRevisionList,
    "IoK8sApiAppsV1beta2DaemonSet": IoK8sApiAppsV1beta2DaemonSet,
    "IoK8sApiAppsV1beta2DaemonSetCondition": IoK8sApiAppsV1beta2DaemonSetCondition,
    "IoK8sApiAppsV1beta2DaemonSetList": IoK8sApiAppsV1beta2DaemonSetList,
    "IoK8sApiAppsV1beta2DaemonSetSpec": IoK8sApiAppsV1beta2DaemonSetSpec,
    "IoK8sApiAppsV1beta2DaemonSetStatus": IoK8sApiAppsV1beta2DaemonSetStatus,
    "IoK8sApiAppsV1beta2DaemonSetUpdateStrategy": IoK8sApiAppsV1beta2DaemonSetUpdateStrategy,
    "IoK8sApiAppsV1beta2Deployment": IoK8sApiAppsV1beta2Deployment,
    "IoK8sApiAppsV1beta2DeploymentCondition": IoK8sApiAppsV1beta2DeploymentCondition,
    "IoK8sApiAppsV1beta2DeploymentList": IoK8sApiAppsV1beta2DeploymentList,
    "IoK8sApiAppsV1beta2DeploymentSpec": IoK8sApiAppsV1beta2DeploymentSpec,
    "IoK8sApiAppsV1beta2DeploymentStatus": IoK8sApiAppsV1beta2DeploymentStatus,
    "IoK8sApiAppsV1beta2DeploymentStrategy": IoK8sApiAppsV1beta2DeploymentStrategy,
    "IoK8sApiAppsV1beta2ReplicaSet": IoK8sApiAppsV1beta2ReplicaSet,
    "IoK8sApiAppsV1beta2ReplicaSetCondition": IoK8sApiAppsV1beta2ReplicaSetCondition,
    "IoK8sApiAppsV1beta2ReplicaSetList": IoK8sApiAppsV1beta2ReplicaSetList,
    "IoK8sApiAppsV1beta2ReplicaSetSpec": IoK8sApiAppsV1beta2ReplicaSetSpec,
    "IoK8sApiAppsV1beta2ReplicaSetStatus": IoK8sApiAppsV1beta2ReplicaSetStatus,
    "IoK8sApiAppsV1beta2RollingUpdateDaemonSet": IoK8sApiAppsV1beta2RollingUpdateDaemonSet,
    "IoK8sApiAppsV1beta2RollingUpdateDeployment": IoK8sApiAppsV1beta2RollingUpdateDeployment,
    "IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy": IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy,
    "IoK8sApiAppsV1beta2Scale": IoK8sApiAppsV1beta2Scale,
    "IoK8sApiAppsV1beta2ScaleSpec": IoK8sApiAppsV1beta2ScaleSpec,
    "IoK8sApiAppsV1beta2ScaleStatus": IoK8sApiAppsV1beta2ScaleStatus,
    "IoK8sApiAppsV1beta2StatefulSet": IoK8sApiAppsV1beta2StatefulSet,
    "IoK8sApiAppsV1beta2StatefulSetCondition": IoK8sApiAppsV1beta2StatefulSetCondition,
    "IoK8sApiAppsV1beta2StatefulSetList": IoK8sApiAppsV1beta2StatefulSetList,
    "IoK8sApiAppsV1beta2StatefulSetSpec": IoK8sApiAppsV1beta2StatefulSetSpec,
    "IoK8sApiAppsV1beta2StatefulSetStatus": IoK8sApiAppsV1beta2StatefulSetStatus,
    "IoK8sApiAppsV1beta2StatefulSetUpdateStrategy": IoK8sApiAppsV1beta2StatefulSetUpdateStrategy,
    "IoK8sApiAuthenticationV1TokenReview": IoK8sApiAuthenticationV1TokenReview,
    "IoK8sApiAuthenticationV1TokenReviewSpec": IoK8sApiAuthenticationV1TokenReviewSpec,
    "IoK8sApiAuthenticationV1TokenReviewStatus": IoK8sApiAuthenticationV1TokenReviewStatus,
    "IoK8sApiAuthenticationV1UserInfo": IoK8sApiAuthenticationV1UserInfo,
    "IoK8sApiAuthenticationV1beta1TokenReview": IoK8sApiAuthenticationV1beta1TokenReview,
    "IoK8sApiAuthenticationV1beta1TokenReviewSpec": IoK8sApiAuthenticationV1beta1TokenReviewSpec,
    "IoK8sApiAuthenticationV1beta1TokenReviewStatus": IoK8sApiAuthenticationV1beta1TokenReviewStatus,
    "IoK8sApiAuthenticationV1beta1UserInfo": IoK8sApiAuthenticationV1beta1UserInfo,
    "IoK8sApiAuthorizationV1LocalSubjectAccessReview": IoK8sApiAuthorizationV1LocalSubjectAccessReview,
    "IoK8sApiAuthorizationV1NonResourceAttributes": IoK8sApiAuthorizationV1NonResourceAttributes,
    "IoK8sApiAuthorizationV1NonResourceRule": IoK8sApiAuthorizationV1NonResourceRule,
    "IoK8sApiAuthorizationV1ResourceAttributes": IoK8sApiAuthorizationV1ResourceAttributes,
    "IoK8sApiAuthorizationV1ResourceRule": IoK8sApiAuthorizationV1ResourceRule,
    "IoK8sApiAuthorizationV1SelfSubjectAccessReview": IoK8sApiAuthorizationV1SelfSubjectAccessReview,
    "IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec": IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec,
    "IoK8sApiAuthorizationV1SelfSubjectRulesReview": IoK8sApiAuthorizationV1SelfSubjectRulesReview,
    "IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec": IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec,
    "IoK8sApiAuthorizationV1SubjectAccessReview": IoK8sApiAuthorizationV1SubjectAccessReview,
    "IoK8sApiAuthorizationV1SubjectAccessReviewSpec": IoK8sApiAuthorizationV1SubjectAccessReviewSpec,
    "IoK8sApiAuthorizationV1SubjectAccessReviewStatus": IoK8sApiAuthorizationV1SubjectAccessReviewStatus,
    "IoK8sApiAuthorizationV1SubjectRulesReviewStatus": IoK8sApiAuthorizationV1SubjectRulesReviewStatus,
    "IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview": IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview,
    "IoK8sApiAuthorizationV1beta1NonResourceAttributes": IoK8sApiAuthorizationV1beta1NonResourceAttributes,
    "IoK8sApiAuthorizationV1beta1NonResourceRule": IoK8sApiAuthorizationV1beta1NonResourceRule,
    "IoK8sApiAuthorizationV1beta1ResourceAttributes": IoK8sApiAuthorizationV1beta1ResourceAttributes,
    "IoK8sApiAuthorizationV1beta1ResourceRule": IoK8sApiAuthorizationV1beta1ResourceRule,
    "IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview": IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview,
    "IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec": IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec,
    "IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview": IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview,
    "IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec": IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec,
    "IoK8sApiAuthorizationV1beta1SubjectAccessReview": IoK8sApiAuthorizationV1beta1SubjectAccessReview,
    "IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec": IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec,
    "IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus": IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus,
    "IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus": IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus,
    "IoK8sApiAutoscalingV1CrossVersionObjectReference": IoK8sApiAutoscalingV1CrossVersionObjectReference,
    "IoK8sApiAutoscalingV1HorizontalPodAutoscaler": IoK8sApiAutoscalingV1HorizontalPodAutoscaler,
    "IoK8sApiAutoscalingV1HorizontalPodAutoscalerList": IoK8sApiAutoscalingV1HorizontalPodAutoscalerList,
    "IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec": IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec,
    "IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus": IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus,
    "IoK8sApiAutoscalingV1Scale": IoK8sApiAutoscalingV1Scale,
    "IoK8sApiAutoscalingV1ScaleSpec": IoK8sApiAutoscalingV1ScaleSpec,
    "IoK8sApiAutoscalingV1ScaleStatus": IoK8sApiAutoscalingV1ScaleStatus,
    "IoK8sApiAutoscalingV2beta1CrossVersionObjectReference": IoK8sApiAutoscalingV2beta1CrossVersionObjectReference,
    "IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler": IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler,
    "IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition": IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition,
    "IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList": IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList,
    "IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec": IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec,
    "IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus": IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus,
    "IoK8sApiAutoscalingV2beta1MetricSpec": IoK8sApiAutoscalingV2beta1MetricSpec,
    "IoK8sApiAutoscalingV2beta1MetricStatus": IoK8sApiAutoscalingV2beta1MetricStatus,
    "IoK8sApiAutoscalingV2beta1ObjectMetricSource": IoK8sApiAutoscalingV2beta1ObjectMetricSource,
    "IoK8sApiAutoscalingV2beta1ObjectMetricStatus": IoK8sApiAutoscalingV2beta1ObjectMetricStatus,
    "IoK8sApiAutoscalingV2beta1PodsMetricSource": IoK8sApiAutoscalingV2beta1PodsMetricSource,
    "IoK8sApiAutoscalingV2beta1PodsMetricStatus": IoK8sApiAutoscalingV2beta1PodsMetricStatus,
    "IoK8sApiAutoscalingV2beta1ResourceMetricSource": IoK8sApiAutoscalingV2beta1ResourceMetricSource,
    "IoK8sApiAutoscalingV2beta1ResourceMetricStatus": IoK8sApiAutoscalingV2beta1ResourceMetricStatus,
    "IoK8sApiBatchV1Job": IoK8sApiBatchV1Job,
    "IoK8sApiBatchV1JobCondition": IoK8sApiBatchV1JobCondition,
    "IoK8sApiBatchV1JobList": IoK8sApiBatchV1JobList,
    "IoK8sApiBatchV1JobSpec": IoK8sApiBatchV1JobSpec,
    "IoK8sApiBatchV1JobStatus": IoK8sApiBatchV1JobStatus,
    "IoK8sApiBatchV1beta1CronJob": IoK8sApiBatchV1beta1CronJob,
    "IoK8sApiBatchV1beta1CronJobList": IoK8sApiBatchV1beta1CronJobList,
    "IoK8sApiBatchV1beta1CronJobSpec": IoK8sApiBatchV1beta1CronJobSpec,
    "IoK8sApiBatchV1beta1CronJobStatus": IoK8sApiBatchV1beta1CronJobStatus,
    "IoK8sApiBatchV1beta1JobTemplateSpec": IoK8sApiBatchV1beta1JobTemplateSpec,
    "IoK8sApiBatchV2alpha1CronJob": IoK8sApiBatchV2alpha1CronJob,
    "IoK8sApiBatchV2alpha1CronJobList": IoK8sApiBatchV2alpha1CronJobList,
    "IoK8sApiBatchV2alpha1CronJobSpec": IoK8sApiBatchV2alpha1CronJobSpec,
    "IoK8sApiBatchV2alpha1CronJobStatus": IoK8sApiBatchV2alpha1CronJobStatus,
    "IoK8sApiBatchV2alpha1JobTemplateSpec": IoK8sApiBatchV2alpha1JobTemplateSpec,
    "IoK8sApiCertificatesV1beta1CertificateSigningRequest": IoK8sApiCertificatesV1beta1CertificateSigningRequest,
    "IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition": IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition,
    "IoK8sApiCertificatesV1beta1CertificateSigningRequestList": IoK8sApiCertificatesV1beta1CertificateSigningRequestList,
    "IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec": IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec,
    "IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus": IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus,
    "IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource": IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource,
    "IoK8sApiCoreV1Affinity": IoK8sApiCoreV1Affinity,
    "IoK8sApiCoreV1AttachedVolume": IoK8sApiCoreV1AttachedVolume,
    "IoK8sApiCoreV1AzureDiskVolumeSource": IoK8sApiCoreV1AzureDiskVolumeSource,
    "IoK8sApiCoreV1AzureFilePersistentVolumeSource": IoK8sApiCoreV1AzureFilePersistentVolumeSource,
    "IoK8sApiCoreV1AzureFileVolumeSource": IoK8sApiCoreV1AzureFileVolumeSource,
    "IoK8sApiCoreV1Binding": IoK8sApiCoreV1Binding,
    "IoK8sApiCoreV1CSIPersistentVolumeSource": IoK8sApiCoreV1CSIPersistentVolumeSource,
    "IoK8sApiCoreV1Capabilities": IoK8sApiCoreV1Capabilities,
    "IoK8sApiCoreV1CephFSPersistentVolumeSource": IoK8sApiCoreV1CephFSPersistentVolumeSource,
    "IoK8sApiCoreV1CephFSVolumeSource": IoK8sApiCoreV1CephFSVolumeSource,
    "IoK8sApiCoreV1CinderVolumeSource": IoK8sApiCoreV1CinderVolumeSource,
    "IoK8sApiCoreV1ClientIPConfig": IoK8sApiCoreV1ClientIPConfig,
    "IoK8sApiCoreV1ComponentCondition": IoK8sApiCoreV1ComponentCondition,
    "IoK8sApiCoreV1ComponentStatus": IoK8sApiCoreV1ComponentStatus,
    "IoK8sApiCoreV1ComponentStatusList": IoK8sApiCoreV1ComponentStatusList,
    "IoK8sApiCoreV1ConfigMap": IoK8sApiCoreV1ConfigMap,
    "IoK8sApiCoreV1ConfigMapEnvSource": IoK8sApiCoreV1ConfigMapEnvSource,
    "IoK8sApiCoreV1ConfigMapKeySelector": IoK8sApiCoreV1ConfigMapKeySelector,
    "IoK8sApiCoreV1ConfigMapList": IoK8sApiCoreV1ConfigMapList,
    "IoK8sApiCoreV1ConfigMapProjection": IoK8sApiCoreV1ConfigMapProjection,
    "IoK8sApiCoreV1ConfigMapVolumeSource": IoK8sApiCoreV1ConfigMapVolumeSource,
    "IoK8sApiCoreV1Container": IoK8sApiCoreV1Container,
    "IoK8sApiCoreV1ContainerImage": IoK8sApiCoreV1ContainerImage,
    "IoK8sApiCoreV1ContainerPort": IoK8sApiCoreV1ContainerPort,
    "IoK8sApiCoreV1ContainerState": IoK8sApiCoreV1ContainerState,
    "IoK8sApiCoreV1ContainerStateRunning": IoK8sApiCoreV1ContainerStateRunning,
    "IoK8sApiCoreV1ContainerStateTerminated": IoK8sApiCoreV1ContainerStateTerminated,
    "IoK8sApiCoreV1ContainerStateWaiting": IoK8sApiCoreV1ContainerStateWaiting,
    "IoK8sApiCoreV1ContainerStatus": IoK8sApiCoreV1ContainerStatus,
    "IoK8sApiCoreV1DaemonEndpoint": IoK8sApiCoreV1DaemonEndpoint,
    "IoK8sApiCoreV1DownwardAPIProjection": IoK8sApiCoreV1DownwardAPIProjection,
    "IoK8sApiCoreV1DownwardAPIVolumeFile": IoK8sApiCoreV1DownwardAPIVolumeFile,
    "IoK8sApiCoreV1DownwardAPIVolumeSource": IoK8sApiCoreV1DownwardAPIVolumeSource,
    "IoK8sApiCoreV1EmptyDirVolumeSource": IoK8sApiCoreV1EmptyDirVolumeSource,
    "IoK8sApiCoreV1EndpointAddress": IoK8sApiCoreV1EndpointAddress,
    "IoK8sApiCoreV1EndpointPort": IoK8sApiCoreV1EndpointPort,
    "IoK8sApiCoreV1EndpointSubset": IoK8sApiCoreV1EndpointSubset,
    "IoK8sApiCoreV1Endpoints": IoK8sApiCoreV1Endpoints,
    "IoK8sApiCoreV1EndpointsList": IoK8sApiCoreV1EndpointsList,
    "IoK8sApiCoreV1EnvFromSource": IoK8sApiCoreV1EnvFromSource,
    "IoK8sApiCoreV1EnvVar": IoK8sApiCoreV1EnvVar,
    "IoK8sApiCoreV1EnvVarSource": IoK8sApiCoreV1EnvVarSource,
    "IoK8sApiCoreV1Event": IoK8sApiCoreV1Event,
    "IoK8sApiCoreV1EventList": IoK8sApiCoreV1EventList,
    "IoK8sApiCoreV1EventSeries": IoK8sApiCoreV1EventSeries,
    "IoK8sApiCoreV1EventSource": IoK8sApiCoreV1EventSource,
    "IoK8sApiCoreV1ExecAction": IoK8sApiCoreV1ExecAction,
    "IoK8sApiCoreV1FCVolumeSource": IoK8sApiCoreV1FCVolumeSource,
    "IoK8sApiCoreV1FlexVolumeSource": IoK8sApiCoreV1FlexVolumeSource,
    "IoK8sApiCoreV1FlockerVolumeSource": IoK8sApiCoreV1FlockerVolumeSource,
    "IoK8sApiCoreV1GCEPersistentDiskVolumeSource": IoK8sApiCoreV1GCEPersistentDiskVolumeSource,
    "IoK8sApiCoreV1GitRepoVolumeSource": IoK8sApiCoreV1GitRepoVolumeSource,
    "IoK8sApiCoreV1GlusterfsVolumeSource": IoK8sApiCoreV1GlusterfsVolumeSource,
    "IoK8sApiCoreV1HTTPGetAction": IoK8sApiCoreV1HTTPGetAction,
    "IoK8sApiCoreV1HTTPHeader": IoK8sApiCoreV1HTTPHeader,
    "IoK8sApiCoreV1Handler": IoK8sApiCoreV1Handler,
    "IoK8sApiCoreV1HostAlias": IoK8sApiCoreV1HostAlias,
    "IoK8sApiCoreV1HostPathVolumeSource": IoK8sApiCoreV1HostPathVolumeSource,
    "IoK8sApiCoreV1ISCSIPersistentVolumeSource": IoK8sApiCoreV1ISCSIPersistentVolumeSource,
    "IoK8sApiCoreV1ISCSIVolumeSource": IoK8sApiCoreV1ISCSIVolumeSource,
    "IoK8sApiCoreV1KeyToPath": IoK8sApiCoreV1KeyToPath,
    "IoK8sApiCoreV1Lifecycle": IoK8sApiCoreV1Lifecycle,
    "IoK8sApiCoreV1LimitRange": IoK8sApiCoreV1LimitRange,
    "IoK8sApiCoreV1LimitRangeItem": IoK8sApiCoreV1LimitRangeItem,
    "IoK8sApiCoreV1LimitRangeList": IoK8sApiCoreV1LimitRangeList,
    "IoK8sApiCoreV1LimitRangeSpec": IoK8sApiCoreV1LimitRangeSpec,
    "IoK8sApiCoreV1LoadBalancerIngress": IoK8sApiCoreV1LoadBalancerIngress,
    "IoK8sApiCoreV1LoadBalancerStatus": IoK8sApiCoreV1LoadBalancerStatus,
    "IoK8sApiCoreV1LocalObjectReference": IoK8sApiCoreV1LocalObjectReference,
    "IoK8sApiCoreV1LocalVolumeSource": IoK8sApiCoreV1LocalVolumeSource,
    "IoK8sApiCoreV1NFSVolumeSource": IoK8sApiCoreV1NFSVolumeSource,
    "IoK8sApiCoreV1Namespace": IoK8sApiCoreV1Namespace,
    "IoK8sApiCoreV1NamespaceList": IoK8sApiCoreV1NamespaceList,
    "IoK8sApiCoreV1NamespaceSpec": IoK8sApiCoreV1NamespaceSpec,
    "IoK8sApiCoreV1NamespaceStatus": IoK8sApiCoreV1NamespaceStatus,
    "IoK8sApiCoreV1Node": IoK8sApiCoreV1Node,
    "IoK8sApiCoreV1NodeAddress": IoK8sApiCoreV1NodeAddress,
    "IoK8sApiCoreV1NodeAffinity": IoK8sApiCoreV1NodeAffinity,
    "IoK8sApiCoreV1NodeCondition": IoK8sApiCoreV1NodeCondition,
    "IoK8sApiCoreV1NodeConfigSource": IoK8sApiCoreV1NodeConfigSource,
    "IoK8sApiCoreV1NodeDaemonEndpoints": IoK8sApiCoreV1NodeDaemonEndpoints,
    "IoK8sApiCoreV1NodeList": IoK8sApiCoreV1NodeList,
    "IoK8sApiCoreV1NodeSelector": IoK8sApiCoreV1NodeSelector,
    "IoK8sApiCoreV1NodeSelectorRequirement": IoK8sApiCoreV1NodeSelectorRequirement,
    "IoK8sApiCoreV1NodeSelectorTerm": IoK8sApiCoreV1NodeSelectorTerm,
    "IoK8sApiCoreV1NodeSpec": IoK8sApiCoreV1NodeSpec,
    "IoK8sApiCoreV1NodeStatus": IoK8sApiCoreV1NodeStatus,
    "IoK8sApiCoreV1NodeSystemInfo": IoK8sApiCoreV1NodeSystemInfo,
    "IoK8sApiCoreV1ObjectFieldSelector": IoK8sApiCoreV1ObjectFieldSelector,
    "IoK8sApiCoreV1ObjectReference": IoK8sApiCoreV1ObjectReference,
    "IoK8sApiCoreV1PersistentVolume": IoK8sApiCoreV1PersistentVolume,
    "IoK8sApiCoreV1PersistentVolumeClaim": IoK8sApiCoreV1PersistentVolumeClaim,
    "IoK8sApiCoreV1PersistentVolumeClaimCondition": IoK8sApiCoreV1PersistentVolumeClaimCondition,
    "IoK8sApiCoreV1PersistentVolumeClaimList": IoK8sApiCoreV1PersistentVolumeClaimList,
    "IoK8sApiCoreV1PersistentVolumeClaimSpec": IoK8sApiCoreV1PersistentVolumeClaimSpec,
    "IoK8sApiCoreV1PersistentVolumeClaimStatus": IoK8sApiCoreV1PersistentVolumeClaimStatus,
    "IoK8sApiCoreV1PersistentVolumeClaimVolumeSource": IoK8sApiCoreV1PersistentVolumeClaimVolumeSource,
    "IoK8sApiCoreV1PersistentVolumeList": IoK8sApiCoreV1PersistentVolumeList,
    "IoK8sApiCoreV1PersistentVolumeSpec": IoK8sApiCoreV1PersistentVolumeSpec,
    "IoK8sApiCoreV1PersistentVolumeStatus": IoK8sApiCoreV1PersistentVolumeStatus,
    "IoK8sApiCoreV1PhotonPersistentDiskVolumeSource": IoK8sApiCoreV1PhotonPersistentDiskVolumeSource,
    "IoK8sApiCoreV1Pod": IoK8sApiCoreV1Pod,
    "IoK8sApiCoreV1PodAffinity": IoK8sApiCoreV1PodAffinity,
    "IoK8sApiCoreV1PodAffinityTerm": IoK8sApiCoreV1PodAffinityTerm,
    "IoK8sApiCoreV1PodAntiAffinity": IoK8sApiCoreV1PodAntiAffinity,
    "IoK8sApiCoreV1PodCondition": IoK8sApiCoreV1PodCondition,
    "IoK8sApiCoreV1PodDNSConfig": IoK8sApiCoreV1PodDNSConfig,
    "IoK8sApiCoreV1PodDNSConfigOption": IoK8sApiCoreV1PodDNSConfigOption,
    "IoK8sApiCoreV1PodList": IoK8sApiCoreV1PodList,
    "IoK8sApiCoreV1PodSecurityContext": IoK8sApiCoreV1PodSecurityContext,
    "IoK8sApiCoreV1PodSpec": IoK8sApiCoreV1PodSpec,
    "IoK8sApiCoreV1PodStatus": IoK8sApiCoreV1PodStatus,
    "IoK8sApiCoreV1PodTemplate": IoK8sApiCoreV1PodTemplate,
    "IoK8sApiCoreV1PodTemplateList": IoK8sApiCoreV1PodTemplateList,
    "IoK8sApiCoreV1PodTemplateSpec": IoK8sApiCoreV1PodTemplateSpec,
    "IoK8sApiCoreV1PortworxVolumeSource": IoK8sApiCoreV1PortworxVolumeSource,
    "IoK8sApiCoreV1PreferredSchedulingTerm": IoK8sApiCoreV1PreferredSchedulingTerm,
    "IoK8sApiCoreV1Probe": IoK8sApiCoreV1Probe,
    "IoK8sApiCoreV1ProjectedVolumeSource": IoK8sApiCoreV1ProjectedVolumeSource,
    "IoK8sApiCoreV1QuobyteVolumeSource": IoK8sApiCoreV1QuobyteVolumeSource,
    "IoK8sApiCoreV1RBDPersistentVolumeSource": IoK8sApiCoreV1RBDPersistentVolumeSource,
    "IoK8sApiCoreV1RBDVolumeSource": IoK8sApiCoreV1RBDVolumeSource,
    "IoK8sApiCoreV1ReplicationController": IoK8sApiCoreV1ReplicationController,
    "IoK8sApiCoreV1ReplicationControllerCondition": IoK8sApiCoreV1ReplicationControllerCondition,
    "IoK8sApiCoreV1ReplicationControllerList": IoK8sApiCoreV1ReplicationControllerList,
    "IoK8sApiCoreV1ReplicationControllerSpec": IoK8sApiCoreV1ReplicationControllerSpec,
    "IoK8sApiCoreV1ReplicationControllerStatus": IoK8sApiCoreV1ReplicationControllerStatus,
    "IoK8sApiCoreV1ResourceFieldSelector": IoK8sApiCoreV1ResourceFieldSelector,
    "IoK8sApiCoreV1ResourceQuota": IoK8sApiCoreV1ResourceQuota,
    "IoK8sApiCoreV1ResourceQuotaList": IoK8sApiCoreV1ResourceQuotaList,
    "IoK8sApiCoreV1ResourceQuotaSpec": IoK8sApiCoreV1ResourceQuotaSpec,
    "IoK8sApiCoreV1ResourceQuotaStatus": IoK8sApiCoreV1ResourceQuotaStatus,
    "IoK8sApiCoreV1ResourceRequirements": IoK8sApiCoreV1ResourceRequirements,
    "IoK8sApiCoreV1SELinuxOptions": IoK8sApiCoreV1SELinuxOptions,
    "IoK8sApiCoreV1ScaleIOPersistentVolumeSource": IoK8sApiCoreV1ScaleIOPersistentVolumeSource,
    "IoK8sApiCoreV1ScaleIOVolumeSource": IoK8sApiCoreV1ScaleIOVolumeSource,
    "IoK8sApiCoreV1Secret": IoK8sApiCoreV1Secret,
    "IoK8sApiCoreV1SecretEnvSource": IoK8sApiCoreV1SecretEnvSource,
    "IoK8sApiCoreV1SecretKeySelector": IoK8sApiCoreV1SecretKeySelector,
    "IoK8sApiCoreV1SecretList": IoK8sApiCoreV1SecretList,
    "IoK8sApiCoreV1SecretProjection": IoK8sApiCoreV1SecretProjection,
    "IoK8sApiCoreV1SecretReference": IoK8sApiCoreV1SecretReference,
    "IoK8sApiCoreV1SecretVolumeSource": IoK8sApiCoreV1SecretVolumeSource,
    "IoK8sApiCoreV1SecurityContext": IoK8sApiCoreV1SecurityContext,
    "IoK8sApiCoreV1Service": IoK8sApiCoreV1Service,
    "IoK8sApiCoreV1ServiceAccount": IoK8sApiCoreV1ServiceAccount,
    "IoK8sApiCoreV1ServiceAccountList": IoK8sApiCoreV1ServiceAccountList,
    "IoK8sApiCoreV1ServiceList": IoK8sApiCoreV1ServiceList,
    "IoK8sApiCoreV1ServicePort": IoK8sApiCoreV1ServicePort,
    "IoK8sApiCoreV1ServiceSpec": IoK8sApiCoreV1ServiceSpec,
    "IoK8sApiCoreV1ServiceStatus": IoK8sApiCoreV1ServiceStatus,
    "IoK8sApiCoreV1SessionAffinityConfig": IoK8sApiCoreV1SessionAffinityConfig,
    "IoK8sApiCoreV1StorageOSPersistentVolumeSource": IoK8sApiCoreV1StorageOSPersistentVolumeSource,
    "IoK8sApiCoreV1StorageOSVolumeSource": IoK8sApiCoreV1StorageOSVolumeSource,
    "IoK8sApiCoreV1TCPSocketAction": IoK8sApiCoreV1TCPSocketAction,
    "IoK8sApiCoreV1Taint": IoK8sApiCoreV1Taint,
    "IoK8sApiCoreV1Toleration": IoK8sApiCoreV1Toleration,
    "IoK8sApiCoreV1Volume": IoK8sApiCoreV1Volume,
    "IoK8sApiCoreV1VolumeDevice": IoK8sApiCoreV1VolumeDevice,
    "IoK8sApiCoreV1VolumeMount": IoK8sApiCoreV1VolumeMount,
    "IoK8sApiCoreV1VolumeProjection": IoK8sApiCoreV1VolumeProjection,
    "IoK8sApiCoreV1VsphereVirtualDiskVolumeSource": IoK8sApiCoreV1VsphereVirtualDiskVolumeSource,
    "IoK8sApiCoreV1WeightedPodAffinityTerm": IoK8sApiCoreV1WeightedPodAffinityTerm,
    "IoK8sApiEventsV1beta1Event": IoK8sApiEventsV1beta1Event,
    "IoK8sApiEventsV1beta1EventList": IoK8sApiEventsV1beta1EventList,
    "IoK8sApiEventsV1beta1EventSeries": IoK8sApiEventsV1beta1EventSeries,
    "IoK8sApiExtensionsV1beta1AllowedFlexVolume": IoK8sApiExtensionsV1beta1AllowedFlexVolume,
    "IoK8sApiExtensionsV1beta1AllowedHostPath": IoK8sApiExtensionsV1beta1AllowedHostPath,
    "IoK8sApiExtensionsV1beta1DaemonSet": IoK8sApiExtensionsV1beta1DaemonSet,
    "IoK8sApiExtensionsV1beta1DaemonSetCondition": IoK8sApiExtensionsV1beta1DaemonSetCondition,
    "IoK8sApiExtensionsV1beta1DaemonSetList": IoK8sApiExtensionsV1beta1DaemonSetList,
    "IoK8sApiExtensionsV1beta1DaemonSetSpec": IoK8sApiExtensionsV1beta1DaemonSetSpec,
    "IoK8sApiExtensionsV1beta1DaemonSetStatus": IoK8sApiExtensionsV1beta1DaemonSetStatus,
    "IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy": IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy,
    "IoK8sApiExtensionsV1beta1Deployment": IoK8sApiExtensionsV1beta1Deployment,
    "IoK8sApiExtensionsV1beta1DeploymentCondition": IoK8sApiExtensionsV1beta1DeploymentCondition,
    "IoK8sApiExtensionsV1beta1DeploymentList": IoK8sApiExtensionsV1beta1DeploymentList,
    "IoK8sApiExtensionsV1beta1DeploymentRollback": IoK8sApiExtensionsV1beta1DeploymentRollback,
    "IoK8sApiExtensionsV1beta1DeploymentSpec": IoK8sApiExtensionsV1beta1DeploymentSpec,
    "IoK8sApiExtensionsV1beta1DeploymentStatus": IoK8sApiExtensionsV1beta1DeploymentStatus,
    "IoK8sApiExtensionsV1beta1DeploymentStrategy": IoK8sApiExtensionsV1beta1DeploymentStrategy,
    "IoK8sApiExtensionsV1beta1FSGroupStrategyOptions": IoK8sApiExtensionsV1beta1FSGroupStrategyOptions,
    "IoK8sApiExtensionsV1beta1HTTPIngressPath": IoK8sApiExtensionsV1beta1HTTPIngressPath,
    "IoK8sApiExtensionsV1beta1HTTPIngressRuleValue": IoK8sApiExtensionsV1beta1HTTPIngressRuleValue,
    "IoK8sApiExtensionsV1beta1HostPortRange": IoK8sApiExtensionsV1beta1HostPortRange,
    "IoK8sApiExtensionsV1beta1IDRange": IoK8sApiExtensionsV1beta1IDRange,
    "IoK8sApiExtensionsV1beta1IPBlock": IoK8sApiExtensionsV1beta1IPBlock,
    "IoK8sApiExtensionsV1beta1Ingress": IoK8sApiExtensionsV1beta1Ingress,
    "IoK8sApiExtensionsV1beta1IngressBackend": IoK8sApiExtensionsV1beta1IngressBackend,
    "IoK8sApiExtensionsV1beta1IngressList": IoK8sApiExtensionsV1beta1IngressList,
    "IoK8sApiExtensionsV1beta1IngressRule": IoK8sApiExtensionsV1beta1IngressRule,
    "IoK8sApiExtensionsV1beta1IngressSpec": IoK8sApiExtensionsV1beta1IngressSpec,
    "IoK8sApiExtensionsV1beta1IngressStatus": IoK8sApiExtensionsV1beta1IngressStatus,
    "IoK8sApiExtensionsV1beta1IngressTLS": IoK8sApiExtensionsV1beta1IngressTLS,
    "IoK8sApiExtensionsV1beta1NetworkPolicy": IoK8sApiExtensionsV1beta1NetworkPolicy,
    "IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule": IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule,
    "IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule": IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule,
    "IoK8sApiExtensionsV1beta1NetworkPolicyList": IoK8sApiExtensionsV1beta1NetworkPolicyList,
    "IoK8sApiExtensionsV1beta1NetworkPolicyPeer": IoK8sApiExtensionsV1beta1NetworkPolicyPeer,
    "IoK8sApiExtensionsV1beta1NetworkPolicyPort": IoK8sApiExtensionsV1beta1NetworkPolicyPort,
    "IoK8sApiExtensionsV1beta1NetworkPolicySpec": IoK8sApiExtensionsV1beta1NetworkPolicySpec,
    "IoK8sApiExtensionsV1beta1PodSecurityPolicy": IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    "IoK8sApiExtensionsV1beta1PodSecurityPolicyList": IoK8sApiExtensionsV1beta1PodSecurityPolicyList,
    "IoK8sApiExtensionsV1beta1PodSecurityPolicySpec": IoK8sApiExtensionsV1beta1PodSecurityPolicySpec,
    "IoK8sApiExtensionsV1beta1ReplicaSet": IoK8sApiExtensionsV1beta1ReplicaSet,
    "IoK8sApiExtensionsV1beta1ReplicaSetCondition": IoK8sApiExtensionsV1beta1ReplicaSetCondition,
    "IoK8sApiExtensionsV1beta1ReplicaSetList": IoK8sApiExtensionsV1beta1ReplicaSetList,
    "IoK8sApiExtensionsV1beta1ReplicaSetSpec": IoK8sApiExtensionsV1beta1ReplicaSetSpec,
    "IoK8sApiExtensionsV1beta1ReplicaSetStatus": IoK8sApiExtensionsV1beta1ReplicaSetStatus,
    "IoK8sApiExtensionsV1beta1RollbackConfig": IoK8sApiExtensionsV1beta1RollbackConfig,
    "IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet": IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet,
    "IoK8sApiExtensionsV1beta1RollingUpdateDeployment": IoK8sApiExtensionsV1beta1RollingUpdateDeployment,
    "IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions": IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions,
    "IoK8sApiExtensionsV1beta1SELinuxStrategyOptions": IoK8sApiExtensionsV1beta1SELinuxStrategyOptions,
    "IoK8sApiExtensionsV1beta1Scale": IoK8sApiExtensionsV1beta1Scale,
    "IoK8sApiExtensionsV1beta1ScaleSpec": IoK8sApiExtensionsV1beta1ScaleSpec,
    "IoK8sApiExtensionsV1beta1ScaleStatus": IoK8sApiExtensionsV1beta1ScaleStatus,
    "IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions": IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions,
    "IoK8sApiNetworkingV1IPBlock": IoK8sApiNetworkingV1IPBlock,
    "IoK8sApiNetworkingV1NetworkPolicy": IoK8sApiNetworkingV1NetworkPolicy,
    "IoK8sApiNetworkingV1NetworkPolicyEgressRule": IoK8sApiNetworkingV1NetworkPolicyEgressRule,
    "IoK8sApiNetworkingV1NetworkPolicyIngressRule": IoK8sApiNetworkingV1NetworkPolicyIngressRule,
    "IoK8sApiNetworkingV1NetworkPolicyList": IoK8sApiNetworkingV1NetworkPolicyList,
    "IoK8sApiNetworkingV1NetworkPolicyPeer": IoK8sApiNetworkingV1NetworkPolicyPeer,
    "IoK8sApiNetworkingV1NetworkPolicyPort": IoK8sApiNetworkingV1NetworkPolicyPort,
    "IoK8sApiNetworkingV1NetworkPolicySpec": IoK8sApiNetworkingV1NetworkPolicySpec,
    "IoK8sApiPolicyV1beta1Eviction": IoK8sApiPolicyV1beta1Eviction,
    "IoK8sApiPolicyV1beta1PodDisruptionBudget": IoK8sApiPolicyV1beta1PodDisruptionBudget,
    "IoK8sApiPolicyV1beta1PodDisruptionBudgetList": IoK8sApiPolicyV1beta1PodDisruptionBudgetList,
    "IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec": IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec,
    "IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus": IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus,
    "IoK8sApiRbacV1AggregationRule": IoK8sApiRbacV1AggregationRule,
    "IoK8sApiRbacV1ClusterRole": IoK8sApiRbacV1ClusterRole,
    "IoK8sApiRbacV1ClusterRoleBinding": IoK8sApiRbacV1ClusterRoleBinding,
    "IoK8sApiRbacV1ClusterRoleBindingList": IoK8sApiRbacV1ClusterRoleBindingList,
    "IoK8sApiRbacV1ClusterRoleList": IoK8sApiRbacV1ClusterRoleList,
    "IoK8sApiRbacV1PolicyRule": IoK8sApiRbacV1PolicyRule,
    "IoK8sApiRbacV1Role": IoK8sApiRbacV1Role,
    "IoK8sApiRbacV1RoleBinding": IoK8sApiRbacV1RoleBinding,
    "IoK8sApiRbacV1RoleBindingList": IoK8sApiRbacV1RoleBindingList,
    "IoK8sApiRbacV1RoleList": IoK8sApiRbacV1RoleList,
    "IoK8sApiRbacV1RoleRef": IoK8sApiRbacV1RoleRef,
    "IoK8sApiRbacV1Subject": IoK8sApiRbacV1Subject,
    "IoK8sApiRbacV1alpha1AggregationRule": IoK8sApiRbacV1alpha1AggregationRule,
    "IoK8sApiRbacV1alpha1ClusterRole": IoK8sApiRbacV1alpha1ClusterRole,
    "IoK8sApiRbacV1alpha1ClusterRoleBinding": IoK8sApiRbacV1alpha1ClusterRoleBinding,
    "IoK8sApiRbacV1alpha1ClusterRoleBindingList": IoK8sApiRbacV1alpha1ClusterRoleBindingList,
    "IoK8sApiRbacV1alpha1ClusterRoleList": IoK8sApiRbacV1alpha1ClusterRoleList,
    "IoK8sApiRbacV1alpha1PolicyRule": IoK8sApiRbacV1alpha1PolicyRule,
    "IoK8sApiRbacV1alpha1Role": IoK8sApiRbacV1alpha1Role,
    "IoK8sApiRbacV1alpha1RoleBinding": IoK8sApiRbacV1alpha1RoleBinding,
    "IoK8sApiRbacV1alpha1RoleBindingList": IoK8sApiRbacV1alpha1RoleBindingList,
    "IoK8sApiRbacV1alpha1RoleList": IoK8sApiRbacV1alpha1RoleList,
    "IoK8sApiRbacV1alpha1RoleRef": IoK8sApiRbacV1alpha1RoleRef,
    "IoK8sApiRbacV1alpha1Subject": IoK8sApiRbacV1alpha1Subject,
    "IoK8sApiRbacV1beta1AggregationRule": IoK8sApiRbacV1beta1AggregationRule,
    "IoK8sApiRbacV1beta1ClusterRole": IoK8sApiRbacV1beta1ClusterRole,
    "IoK8sApiRbacV1beta1ClusterRoleBinding": IoK8sApiRbacV1beta1ClusterRoleBinding,
    "IoK8sApiRbacV1beta1ClusterRoleBindingList": IoK8sApiRbacV1beta1ClusterRoleBindingList,
    "IoK8sApiRbacV1beta1ClusterRoleList": IoK8sApiRbacV1beta1ClusterRoleList,
    "IoK8sApiRbacV1beta1PolicyRule": IoK8sApiRbacV1beta1PolicyRule,
    "IoK8sApiRbacV1beta1Role": IoK8sApiRbacV1beta1Role,
    "IoK8sApiRbacV1beta1RoleBinding": IoK8sApiRbacV1beta1RoleBinding,
    "IoK8sApiRbacV1beta1RoleBindingList": IoK8sApiRbacV1beta1RoleBindingList,
    "IoK8sApiRbacV1beta1RoleList": IoK8sApiRbacV1beta1RoleList,
    "IoK8sApiRbacV1beta1RoleRef": IoK8sApiRbacV1beta1RoleRef,
    "IoK8sApiRbacV1beta1Subject": IoK8sApiRbacV1beta1Subject,
    "IoK8sApiSchedulingV1alpha1PriorityClass": IoK8sApiSchedulingV1alpha1PriorityClass,
    "IoK8sApiSchedulingV1alpha1PriorityClassList": IoK8sApiSchedulingV1alpha1PriorityClassList,
    "IoK8sApiSettingsV1alpha1PodPreset": IoK8sApiSettingsV1alpha1PodPreset,
    "IoK8sApiSettingsV1alpha1PodPresetList": IoK8sApiSettingsV1alpha1PodPresetList,
    "IoK8sApiSettingsV1alpha1PodPresetSpec": IoK8sApiSettingsV1alpha1PodPresetSpec,
    "IoK8sApiStorageV1StorageClass": IoK8sApiStorageV1StorageClass,
    "IoK8sApiStorageV1StorageClassList": IoK8sApiStorageV1StorageClassList,
    "IoK8sApiStorageV1alpha1VolumeAttachment": IoK8sApiStorageV1alpha1VolumeAttachment,
    "IoK8sApiStorageV1alpha1VolumeAttachmentList": IoK8sApiStorageV1alpha1VolumeAttachmentList,
    "IoK8sApiStorageV1alpha1VolumeAttachmentSource": IoK8sApiStorageV1alpha1VolumeAttachmentSource,
    "IoK8sApiStorageV1alpha1VolumeAttachmentSpec": IoK8sApiStorageV1alpha1VolumeAttachmentSpec,
    "IoK8sApiStorageV1alpha1VolumeAttachmentStatus": IoK8sApiStorageV1alpha1VolumeAttachmentStatus,
    "IoK8sApiStorageV1alpha1VolumeError": IoK8sApiStorageV1alpha1VolumeError,
    "IoK8sApiStorageV1beta1StorageClass": IoK8sApiStorageV1beta1StorageClass,
    "IoK8sApiStorageV1beta1StorageClassList": IoK8sApiStorageV1beta1StorageClassList,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool,
    "IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray,
    "IoK8sApimachineryPkgApiResourceQuantity": IoK8sApimachineryPkgApiResourceQuantity,
    "IoK8sApimachineryPkgApisMetaV1APIGroup": IoK8sApimachineryPkgApisMetaV1APIGroup,
    "IoK8sApimachineryPkgApisMetaV1APIGroupList": IoK8sApimachineryPkgApisMetaV1APIGroupList,
    "IoK8sApimachineryPkgApisMetaV1APIResource": IoK8sApimachineryPkgApisMetaV1APIResource,
    "IoK8sApimachineryPkgApisMetaV1APIResourceList": IoK8sApimachineryPkgApisMetaV1APIResourceList,
    "IoK8sApimachineryPkgApisMetaV1APIVersions": IoK8sApimachineryPkgApisMetaV1APIVersions,
    "IoK8sApimachineryPkgApisMetaV1DeleteOptions": IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    "IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery": IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery,
    "IoK8sApimachineryPkgApisMetaV1Initializer": IoK8sApimachineryPkgApisMetaV1Initializer,
    "IoK8sApimachineryPkgApisMetaV1Initializers": IoK8sApimachineryPkgApisMetaV1Initializers,
    "IoK8sApimachineryPkgApisMetaV1LabelSelector": IoK8sApimachineryPkgApisMetaV1LabelSelector,
    "IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement": IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement,
    "IoK8sApimachineryPkgApisMetaV1ListMeta": IoK8sApimachineryPkgApisMetaV1ListMeta,
    "IoK8sApimachineryPkgApisMetaV1MicroTime": IoK8sApimachineryPkgApisMetaV1MicroTime,
    "IoK8sApimachineryPkgApisMetaV1ObjectMeta": IoK8sApimachineryPkgApisMetaV1ObjectMeta,
    "IoK8sApimachineryPkgApisMetaV1OwnerReference": IoK8sApimachineryPkgApisMetaV1OwnerReference,
    "IoK8sApimachineryPkgApisMetaV1Patch": IoK8sApimachineryPkgApisMetaV1Patch,
    "IoK8sApimachineryPkgApisMetaV1Preconditions": IoK8sApimachineryPkgApisMetaV1Preconditions,
    "IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR": IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR,
    "IoK8sApimachineryPkgApisMetaV1Status": IoK8sApimachineryPkgApisMetaV1Status,
    "IoK8sApimachineryPkgApisMetaV1StatusCause": IoK8sApimachineryPkgApisMetaV1StatusCause,
    "IoK8sApimachineryPkgApisMetaV1StatusDetails": IoK8sApimachineryPkgApisMetaV1StatusDetails,
    "IoK8sApimachineryPkgApisMetaV1Time": IoK8sApimachineryPkgApisMetaV1Time,
    "IoK8sApimachineryPkgApisMetaV1WatchEvent": IoK8sApimachineryPkgApisMetaV1WatchEvent,
    "IoK8sApimachineryPkgRuntimeRawExtension": IoK8sApimachineryPkgRuntimeRawExtension,
    "IoK8sApimachineryPkgUtilIntstrIntOrString": IoK8sApimachineryPkgUtilIntstrIntOrString,
    "IoK8sApimachineryPkgVersionInfo": IoK8sApimachineryPkgVersionInfo,
    "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService": IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService,
    "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition": IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition,
    "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceList": IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceList,
    "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec": IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec,
    "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus": IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus,
    "IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference": IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference,
    "IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource": IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource,
    "IoK8sKubernetesPkgApiV1Affinity": IoK8sKubernetesPkgApiV1Affinity,
    "IoK8sKubernetesPkgApiV1AttachedVolume": IoK8sKubernetesPkgApiV1AttachedVolume,
    "IoK8sKubernetesPkgApiV1AzureDiskVolumeSource": IoK8sKubernetesPkgApiV1AzureDiskVolumeSource,
    "IoK8sKubernetesPkgApiV1AzureFileVolumeSource": IoK8sKubernetesPkgApiV1AzureFileVolumeSource,
    "IoK8sKubernetesPkgApiV1Binding": IoK8sKubernetesPkgApiV1Binding,
    "IoK8sKubernetesPkgApiV1Capabilities": IoK8sKubernetesPkgApiV1Capabilities,
    "IoK8sKubernetesPkgApiV1CephFSVolumeSource": IoK8sKubernetesPkgApiV1CephFSVolumeSource,
    "IoK8sKubernetesPkgApiV1CinderVolumeSource": IoK8sKubernetesPkgApiV1CinderVolumeSource,
    "IoK8sKubernetesPkgApiV1ComponentCondition": IoK8sKubernetesPkgApiV1ComponentCondition,
    "IoK8sKubernetesPkgApiV1ComponentStatus": IoK8sKubernetesPkgApiV1ComponentStatus,
    "IoK8sKubernetesPkgApiV1ComponentStatusList": IoK8sKubernetesPkgApiV1ComponentStatusList,
    "IoK8sKubernetesPkgApiV1ConfigMap": IoK8sKubernetesPkgApiV1ConfigMap,
    "IoK8sKubernetesPkgApiV1ConfigMapEnvSource": IoK8sKubernetesPkgApiV1ConfigMapEnvSource,
    "IoK8sKubernetesPkgApiV1ConfigMapKeySelector": IoK8sKubernetesPkgApiV1ConfigMapKeySelector,
    "IoK8sKubernetesPkgApiV1ConfigMapList": IoK8sKubernetesPkgApiV1ConfigMapList,
    "IoK8sKubernetesPkgApiV1ConfigMapProjection": IoK8sKubernetesPkgApiV1ConfigMapProjection,
    "IoK8sKubernetesPkgApiV1ConfigMapVolumeSource": IoK8sKubernetesPkgApiV1ConfigMapVolumeSource,
    "IoK8sKubernetesPkgApiV1Container": IoK8sKubernetesPkgApiV1Container,
    "IoK8sKubernetesPkgApiV1ContainerImage": IoK8sKubernetesPkgApiV1ContainerImage,
    "IoK8sKubernetesPkgApiV1ContainerPort": IoK8sKubernetesPkgApiV1ContainerPort,
    "IoK8sKubernetesPkgApiV1ContainerState": IoK8sKubernetesPkgApiV1ContainerState,
    "IoK8sKubernetesPkgApiV1ContainerStateRunning": IoK8sKubernetesPkgApiV1ContainerStateRunning,
    "IoK8sKubernetesPkgApiV1ContainerStateTerminated": IoK8sKubernetesPkgApiV1ContainerStateTerminated,
    "IoK8sKubernetesPkgApiV1ContainerStateWaiting": IoK8sKubernetesPkgApiV1ContainerStateWaiting,
    "IoK8sKubernetesPkgApiV1ContainerStatus": IoK8sKubernetesPkgApiV1ContainerStatus,
    "IoK8sKubernetesPkgApiV1DaemonEndpoint": IoK8sKubernetesPkgApiV1DaemonEndpoint,
    "IoK8sKubernetesPkgApiV1DownwardAPIProjection": IoK8sKubernetesPkgApiV1DownwardAPIProjection,
    "IoK8sKubernetesPkgApiV1DownwardAPIVolumeFile": IoK8sKubernetesPkgApiV1DownwardAPIVolumeFile,
    "IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource": IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource,
    "IoK8sKubernetesPkgApiV1EmptyDirVolumeSource": IoK8sKubernetesPkgApiV1EmptyDirVolumeSource,
    "IoK8sKubernetesPkgApiV1EndpointAddress": IoK8sKubernetesPkgApiV1EndpointAddress,
    "IoK8sKubernetesPkgApiV1EndpointPort": IoK8sKubernetesPkgApiV1EndpointPort,
    "IoK8sKubernetesPkgApiV1EndpointSubset": IoK8sKubernetesPkgApiV1EndpointSubset,
    "IoK8sKubernetesPkgApiV1Endpoints": IoK8sKubernetesPkgApiV1Endpoints,
    "IoK8sKubernetesPkgApiV1EndpointsList": IoK8sKubernetesPkgApiV1EndpointsList,
    "IoK8sKubernetesPkgApiV1EnvFromSource": IoK8sKubernetesPkgApiV1EnvFromSource,
    "IoK8sKubernetesPkgApiV1EnvVar": IoK8sKubernetesPkgApiV1EnvVar,
    "IoK8sKubernetesPkgApiV1EnvVarSource": IoK8sKubernetesPkgApiV1EnvVarSource,
    "IoK8sKubernetesPkgApiV1Event": IoK8sKubernetesPkgApiV1Event,
    "IoK8sKubernetesPkgApiV1EventList": IoK8sKubernetesPkgApiV1EventList,
    "IoK8sKubernetesPkgApiV1EventSource": IoK8sKubernetesPkgApiV1EventSource,
    "IoK8sKubernetesPkgApiV1ExecAction": IoK8sKubernetesPkgApiV1ExecAction,
    "IoK8sKubernetesPkgApiV1FCVolumeSource": IoK8sKubernetesPkgApiV1FCVolumeSource,
    "IoK8sKubernetesPkgApiV1FlexVolumeSource": IoK8sKubernetesPkgApiV1FlexVolumeSource,
    "IoK8sKubernetesPkgApiV1FlockerVolumeSource": IoK8sKubernetesPkgApiV1FlockerVolumeSource,
    "IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource": IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource,
    "IoK8sKubernetesPkgApiV1GitRepoVolumeSource": IoK8sKubernetesPkgApiV1GitRepoVolumeSource,
    "IoK8sKubernetesPkgApiV1GlusterfsVolumeSource": IoK8sKubernetesPkgApiV1GlusterfsVolumeSource,
    "IoK8sKubernetesPkgApiV1HTTPGetAction": IoK8sKubernetesPkgApiV1HTTPGetAction,
    "IoK8sKubernetesPkgApiV1HTTPHeader": IoK8sKubernetesPkgApiV1HTTPHeader,
    "IoK8sKubernetesPkgApiV1Handler": IoK8sKubernetesPkgApiV1Handler,
    "IoK8sKubernetesPkgApiV1HostAlias": IoK8sKubernetesPkgApiV1HostAlias,
    "IoK8sKubernetesPkgApiV1HostPathVolumeSource": IoK8sKubernetesPkgApiV1HostPathVolumeSource,
    "IoK8sKubernetesPkgApiV1ISCSIVolumeSource": IoK8sKubernetesPkgApiV1ISCSIVolumeSource,
    "IoK8sKubernetesPkgApiV1KeyToPath": IoK8sKubernetesPkgApiV1KeyToPath,
    "IoK8sKubernetesPkgApiV1Lifecycle": IoK8sKubernetesPkgApiV1Lifecycle,
    "IoK8sKubernetesPkgApiV1LimitRange": IoK8sKubernetesPkgApiV1LimitRange,
    "IoK8sKubernetesPkgApiV1LimitRangeItem": IoK8sKubernetesPkgApiV1LimitRangeItem,
    "IoK8sKubernetesPkgApiV1LimitRangeList": IoK8sKubernetesPkgApiV1LimitRangeList,
    "IoK8sKubernetesPkgApiV1LimitRangeSpec": IoK8sKubernetesPkgApiV1LimitRangeSpec,
    "IoK8sKubernetesPkgApiV1LoadBalancerIngress": IoK8sKubernetesPkgApiV1LoadBalancerIngress,
    "IoK8sKubernetesPkgApiV1LoadBalancerStatus": IoK8sKubernetesPkgApiV1LoadBalancerStatus,
    "IoK8sKubernetesPkgApiV1LocalObjectReference": IoK8sKubernetesPkgApiV1LocalObjectReference,
    "IoK8sKubernetesPkgApiV1LocalVolumeSource": IoK8sKubernetesPkgApiV1LocalVolumeSource,
    "IoK8sKubernetesPkgApiV1NFSVolumeSource": IoK8sKubernetesPkgApiV1NFSVolumeSource,
    "IoK8sKubernetesPkgApiV1Namespace": IoK8sKubernetesPkgApiV1Namespace,
    "IoK8sKubernetesPkgApiV1NamespaceList": IoK8sKubernetesPkgApiV1NamespaceList,
    "IoK8sKubernetesPkgApiV1NamespaceSpec": IoK8sKubernetesPkgApiV1NamespaceSpec,
    "IoK8sKubernetesPkgApiV1NamespaceStatus": IoK8sKubernetesPkgApiV1NamespaceStatus,
    "IoK8sKubernetesPkgApiV1Node": IoK8sKubernetesPkgApiV1Node,
    "IoK8sKubernetesPkgApiV1NodeAddress": IoK8sKubernetesPkgApiV1NodeAddress,
    "IoK8sKubernetesPkgApiV1NodeAffinity": IoK8sKubernetesPkgApiV1NodeAffinity,
    "IoK8sKubernetesPkgApiV1NodeCondition": IoK8sKubernetesPkgApiV1NodeCondition,
    "IoK8sKubernetesPkgApiV1NodeDaemonEndpoints": IoK8sKubernetesPkgApiV1NodeDaemonEndpoints,
    "IoK8sKubernetesPkgApiV1NodeList": IoK8sKubernetesPkgApiV1NodeList,
    "IoK8sKubernetesPkgApiV1NodeSelector": IoK8sKubernetesPkgApiV1NodeSelector,
    "IoK8sKubernetesPkgApiV1NodeSelectorRequirement": IoK8sKubernetesPkgApiV1NodeSelectorRequirement,
    "IoK8sKubernetesPkgApiV1NodeSelectorTerm": IoK8sKubernetesPkgApiV1NodeSelectorTerm,
    "IoK8sKubernetesPkgApiV1NodeSpec": IoK8sKubernetesPkgApiV1NodeSpec,
    "IoK8sKubernetesPkgApiV1NodeStatus": IoK8sKubernetesPkgApiV1NodeStatus,
    "IoK8sKubernetesPkgApiV1NodeSystemInfo": IoK8sKubernetesPkgApiV1NodeSystemInfo,
    "IoK8sKubernetesPkgApiV1ObjectFieldSelector": IoK8sKubernetesPkgApiV1ObjectFieldSelector,
    "IoK8sKubernetesPkgApiV1ObjectReference": IoK8sKubernetesPkgApiV1ObjectReference,
    "IoK8sKubernetesPkgApiV1PersistentVolume": IoK8sKubernetesPkgApiV1PersistentVolume,
    "IoK8sKubernetesPkgApiV1PersistentVolumeClaim": IoK8sKubernetesPkgApiV1PersistentVolumeClaim,
    "IoK8sKubernetesPkgApiV1PersistentVolumeClaimList": IoK8sKubernetesPkgApiV1PersistentVolumeClaimList,
    "IoK8sKubernetesPkgApiV1PersistentVolumeClaimSpec": IoK8sKubernetesPkgApiV1PersistentVolumeClaimSpec,
    "IoK8sKubernetesPkgApiV1PersistentVolumeClaimStatus": IoK8sKubernetesPkgApiV1PersistentVolumeClaimStatus,
    "IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource": IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource,
    "IoK8sKubernetesPkgApiV1PersistentVolumeList": IoK8sKubernetesPkgApiV1PersistentVolumeList,
    "IoK8sKubernetesPkgApiV1PersistentVolumeSpec": IoK8sKubernetesPkgApiV1PersistentVolumeSpec,
    "IoK8sKubernetesPkgApiV1PersistentVolumeStatus": IoK8sKubernetesPkgApiV1PersistentVolumeStatus,
    "IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource": IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource,
    "IoK8sKubernetesPkgApiV1Pod": IoK8sKubernetesPkgApiV1Pod,
    "IoK8sKubernetesPkgApiV1PodAffinity": IoK8sKubernetesPkgApiV1PodAffinity,
    "IoK8sKubernetesPkgApiV1PodAffinityTerm": IoK8sKubernetesPkgApiV1PodAffinityTerm,
    "IoK8sKubernetesPkgApiV1PodAntiAffinity": IoK8sKubernetesPkgApiV1PodAntiAffinity,
    "IoK8sKubernetesPkgApiV1PodCondition": IoK8sKubernetesPkgApiV1PodCondition,
    "IoK8sKubernetesPkgApiV1PodList": IoK8sKubernetesPkgApiV1PodList,
    "IoK8sKubernetesPkgApiV1PodSecurityContext": IoK8sKubernetesPkgApiV1PodSecurityContext,
    "IoK8sKubernetesPkgApiV1PodSpec": IoK8sKubernetesPkgApiV1PodSpec,
    "IoK8sKubernetesPkgApiV1PodStatus": IoK8sKubernetesPkgApiV1PodStatus,
    "IoK8sKubernetesPkgApiV1PodTemplate": IoK8sKubernetesPkgApiV1PodTemplate,
    "IoK8sKubernetesPkgApiV1PodTemplateList": IoK8sKubernetesPkgApiV1PodTemplateList,
    "IoK8sKubernetesPkgApiV1PodTemplateSpec": IoK8sKubernetesPkgApiV1PodTemplateSpec,
    "IoK8sKubernetesPkgApiV1PortworxVolumeSource": IoK8sKubernetesPkgApiV1PortworxVolumeSource,
    "IoK8sKubernetesPkgApiV1PreferredSchedulingTerm": IoK8sKubernetesPkgApiV1PreferredSchedulingTerm,
    "IoK8sKubernetesPkgApiV1Probe": IoK8sKubernetesPkgApiV1Probe,
    "IoK8sKubernetesPkgApiV1ProjectedVolumeSource": IoK8sKubernetesPkgApiV1ProjectedVolumeSource,
    "IoK8sKubernetesPkgApiV1QuobyteVolumeSource": IoK8sKubernetesPkgApiV1QuobyteVolumeSource,
    "IoK8sKubernetesPkgApiV1RBDVolumeSource": IoK8sKubernetesPkgApiV1RBDVolumeSource,
    "IoK8sKubernetesPkgApiV1ReplicationController": IoK8sKubernetesPkgApiV1ReplicationController,
    "IoK8sKubernetesPkgApiV1ReplicationControllerCondition": IoK8sKubernetesPkgApiV1ReplicationControllerCondition,
    "IoK8sKubernetesPkgApiV1ReplicationControllerList": IoK8sKubernetesPkgApiV1ReplicationControllerList,
    "IoK8sKubernetesPkgApiV1ReplicationControllerSpec": IoK8sKubernetesPkgApiV1ReplicationControllerSpec,
    "IoK8sKubernetesPkgApiV1ReplicationControllerStatus": IoK8sKubernetesPkgApiV1ReplicationControllerStatus,
    "IoK8sKubernetesPkgApiV1ResourceFieldSelector": IoK8sKubernetesPkgApiV1ResourceFieldSelector,
    "IoK8sKubernetesPkgApiV1ResourceQuota": IoK8sKubernetesPkgApiV1ResourceQuota,
    "IoK8sKubernetesPkgApiV1ResourceQuotaList": IoK8sKubernetesPkgApiV1ResourceQuotaList,
    "IoK8sKubernetesPkgApiV1ResourceQuotaSpec": IoK8sKubernetesPkgApiV1ResourceQuotaSpec,
    "IoK8sKubernetesPkgApiV1ResourceQuotaStatus": IoK8sKubernetesPkgApiV1ResourceQuotaStatus,
    "IoK8sKubernetesPkgApiV1ResourceRequirements": IoK8sKubernetesPkgApiV1ResourceRequirements,
    "IoK8sKubernetesPkgApiV1SELinuxOptions": IoK8sKubernetesPkgApiV1SELinuxOptions,
    "IoK8sKubernetesPkgApiV1ScaleIOVolumeSource": IoK8sKubernetesPkgApiV1ScaleIOVolumeSource,
    "IoK8sKubernetesPkgApiV1Secret": IoK8sKubernetesPkgApiV1Secret,
    "IoK8sKubernetesPkgApiV1SecretEnvSource": IoK8sKubernetesPkgApiV1SecretEnvSource,
    "IoK8sKubernetesPkgApiV1SecretKeySelector": IoK8sKubernetesPkgApiV1SecretKeySelector,
    "IoK8sKubernetesPkgApiV1SecretList": IoK8sKubernetesPkgApiV1SecretList,
    "IoK8sKubernetesPkgApiV1SecretProjection": IoK8sKubernetesPkgApiV1SecretProjection,
    "IoK8sKubernetesPkgApiV1SecretVolumeSource": IoK8sKubernetesPkgApiV1SecretVolumeSource,
    "IoK8sKubernetesPkgApiV1SecurityContext": IoK8sKubernetesPkgApiV1SecurityContext,
    "IoK8sKubernetesPkgApiV1Service": IoK8sKubernetesPkgApiV1Service,
    "IoK8sKubernetesPkgApiV1ServiceAccount": IoK8sKubernetesPkgApiV1ServiceAccount,
    "IoK8sKubernetesPkgApiV1ServiceAccountList": IoK8sKubernetesPkgApiV1ServiceAccountList,
    "IoK8sKubernetesPkgApiV1ServiceList": IoK8sKubernetesPkgApiV1ServiceList,
    "IoK8sKubernetesPkgApiV1ServicePort": IoK8sKubernetesPkgApiV1ServicePort,
    "IoK8sKubernetesPkgApiV1ServiceSpec": IoK8sKubernetesPkgApiV1ServiceSpec,
    "IoK8sKubernetesPkgApiV1ServiceStatus": IoK8sKubernetesPkgApiV1ServiceStatus,
    "IoK8sKubernetesPkgApiV1StorageOSPersistentVolumeSource": IoK8sKubernetesPkgApiV1StorageOSPersistentVolumeSource,
    "IoK8sKubernetesPkgApiV1StorageOSVolumeSource": IoK8sKubernetesPkgApiV1StorageOSVolumeSource,
    "IoK8sKubernetesPkgApiV1TCPSocketAction": IoK8sKubernetesPkgApiV1TCPSocketAction,
    "IoK8sKubernetesPkgApiV1Taint": IoK8sKubernetesPkgApiV1Taint,
    "IoK8sKubernetesPkgApiV1Toleration": IoK8sKubernetesPkgApiV1Toleration,
    "IoK8sKubernetesPkgApiV1Volume": IoK8sKubernetesPkgApiV1Volume,
    "IoK8sKubernetesPkgApiV1VolumeMount": IoK8sKubernetesPkgApiV1VolumeMount,
    "IoK8sKubernetesPkgApiV1VolumeProjection": IoK8sKubernetesPkgApiV1VolumeProjection,
    "IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource": IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource,
    "IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm": IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm,
    "IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer": IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer,
    "IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfiguration": IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfiguration,
    "IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfigurationList": IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1InitializerConfigurationList,
    "IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule": IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule,
    "IoK8sKubernetesPkgApisAppsV1beta1ControllerRevision": IoK8sKubernetesPkgApisAppsV1beta1ControllerRevision,
    "IoK8sKubernetesPkgApisAppsV1beta1ControllerRevisionList": IoK8sKubernetesPkgApisAppsV1beta1ControllerRevisionList,
    "IoK8sKubernetesPkgApisAppsV1beta1Deployment": IoK8sKubernetesPkgApisAppsV1beta1Deployment,
    "IoK8sKubernetesPkgApisAppsV1beta1DeploymentCondition": IoK8sKubernetesPkgApisAppsV1beta1DeploymentCondition,
    "IoK8sKubernetesPkgApisAppsV1beta1DeploymentList": IoK8sKubernetesPkgApisAppsV1beta1DeploymentList,
    "IoK8sKubernetesPkgApisAppsV1beta1DeploymentRollback": IoK8sKubernetesPkgApisAppsV1beta1DeploymentRollback,
    "IoK8sKubernetesPkgApisAppsV1beta1DeploymentSpec": IoK8sKubernetesPkgApisAppsV1beta1DeploymentSpec,
    "IoK8sKubernetesPkgApisAppsV1beta1DeploymentStatus": IoK8sKubernetesPkgApisAppsV1beta1DeploymentStatus,
    "IoK8sKubernetesPkgApisAppsV1beta1DeploymentStrategy": IoK8sKubernetesPkgApisAppsV1beta1DeploymentStrategy,
    "IoK8sKubernetesPkgApisAppsV1beta1RollbackConfig": IoK8sKubernetesPkgApisAppsV1beta1RollbackConfig,
    "IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateDeployment": IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateDeployment,
    "IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateStatefulSetStrategy": IoK8sKubernetesPkgApisAppsV1beta1RollingUpdateStatefulSetStrategy,
    "IoK8sKubernetesPkgApisAppsV1beta1Scale": IoK8sKubernetesPkgApisAppsV1beta1Scale,
    "IoK8sKubernetesPkgApisAppsV1beta1ScaleSpec": IoK8sKubernetesPkgApisAppsV1beta1ScaleSpec,
    "IoK8sKubernetesPkgApisAppsV1beta1ScaleStatus": IoK8sKubernetesPkgApisAppsV1beta1ScaleStatus,
    "IoK8sKubernetesPkgApisAppsV1beta1StatefulSet": IoK8sKubernetesPkgApisAppsV1beta1StatefulSet,
    "IoK8sKubernetesPkgApisAppsV1beta1StatefulSetList": IoK8sKubernetesPkgApisAppsV1beta1StatefulSetList,
    "IoK8sKubernetesPkgApisAppsV1beta1StatefulSetSpec": IoK8sKubernetesPkgApisAppsV1beta1StatefulSetSpec,
    "IoK8sKubernetesPkgApisAppsV1beta1StatefulSetStatus": IoK8sKubernetesPkgApisAppsV1beta1StatefulSetStatus,
    "IoK8sKubernetesPkgApisAppsV1beta1StatefulSetUpdateStrategy": IoK8sKubernetesPkgApisAppsV1beta1StatefulSetUpdateStrategy,
    "IoK8sKubernetesPkgApisAuthenticationV1TokenReview": IoK8sKubernetesPkgApisAuthenticationV1TokenReview,
    "IoK8sKubernetesPkgApisAuthenticationV1TokenReviewSpec": IoK8sKubernetesPkgApisAuthenticationV1TokenReviewSpec,
    "IoK8sKubernetesPkgApisAuthenticationV1TokenReviewStatus": IoK8sKubernetesPkgApisAuthenticationV1TokenReviewStatus,
    "IoK8sKubernetesPkgApisAuthenticationV1UserInfo": IoK8sKubernetesPkgApisAuthenticationV1UserInfo,
    "IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReview": IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReview,
    "IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewSpec": IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewSpec,
    "IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewStatus": IoK8sKubernetesPkgApisAuthenticationV1beta1TokenReviewStatus,
    "IoK8sKubernetesPkgApisAuthenticationV1beta1UserInfo": IoK8sKubernetesPkgApisAuthenticationV1beta1UserInfo,
    "IoK8sKubernetesPkgApisAuthorizationV1LocalSubjectAccessReview": IoK8sKubernetesPkgApisAuthorizationV1LocalSubjectAccessReview,
    "IoK8sKubernetesPkgApisAuthorizationV1NonResourceAttributes": IoK8sKubernetesPkgApisAuthorizationV1NonResourceAttributes,
    "IoK8sKubernetesPkgApisAuthorizationV1ResourceAttributes": IoK8sKubernetesPkgApisAuthorizationV1ResourceAttributes,
    "IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReview": IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReview,
    "IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReviewSpec": IoK8sKubernetesPkgApisAuthorizationV1SelfSubjectAccessReviewSpec,
    "IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReview": IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReview,
    "IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewSpec": IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewSpec,
    "IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewStatus": IoK8sKubernetesPkgApisAuthorizationV1SubjectAccessReviewStatus,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1LocalSubjectAccessReview": IoK8sKubernetesPkgApisAuthorizationV1beta1LocalSubjectAccessReview,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1NonResourceAttributes": IoK8sKubernetesPkgApisAuthorizationV1beta1NonResourceAttributes,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1ResourceAttributes": IoK8sKubernetesPkgApisAuthorizationV1beta1ResourceAttributes,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReview": IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReview,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReviewSpec": IoK8sKubernetesPkgApisAuthorizationV1beta1SelfSubjectAccessReviewSpec,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReview": IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReview,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewSpec": IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewSpec,
    "IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewStatus": IoK8sKubernetesPkgApisAuthorizationV1beta1SubjectAccessReviewStatus,
    "IoK8sKubernetesPkgApisAutoscalingV1CrossVersionObjectReference": IoK8sKubernetesPkgApisAutoscalingV1CrossVersionObjectReference,
    "IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscaler": IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscaler,
    "IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerList": IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerList,
    "IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerSpec": IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerSpec,
    "IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus": IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus,
    "IoK8sKubernetesPkgApisAutoscalingV1Scale": IoK8sKubernetesPkgApisAutoscalingV1Scale,
    "IoK8sKubernetesPkgApisAutoscalingV1ScaleSpec": IoK8sKubernetesPkgApisAutoscalingV1ScaleSpec,
    "IoK8sKubernetesPkgApisAutoscalingV1ScaleStatus": IoK8sKubernetesPkgApisAutoscalingV1ScaleStatus,
    "IoK8sKubernetesPkgApisBatchV1Job": IoK8sKubernetesPkgApisBatchV1Job,
    "IoK8sKubernetesPkgApisBatchV1JobCondition": IoK8sKubernetesPkgApisBatchV1JobCondition,
    "IoK8sKubernetesPkgApisBatchV1JobList": IoK8sKubernetesPkgApisBatchV1JobList,
    "IoK8sKubernetesPkgApisBatchV1JobSpec": IoK8sKubernetesPkgApisBatchV1JobSpec,
    "IoK8sKubernetesPkgApisBatchV1JobStatus": IoK8sKubernetesPkgApisBatchV1JobStatus,
    "IoK8sKubernetesPkgApisBatchV2alpha1CronJob": IoK8sKubernetesPkgApisBatchV2alpha1CronJob,
    "IoK8sKubernetesPkgApisBatchV2alpha1CronJobList": IoK8sKubernetesPkgApisBatchV2alpha1CronJobList,
    "IoK8sKubernetesPkgApisBatchV2alpha1CronJobSpec": IoK8sKubernetesPkgApisBatchV2alpha1CronJobSpec,
    "IoK8sKubernetesPkgApisBatchV2alpha1CronJobStatus": IoK8sKubernetesPkgApisBatchV2alpha1CronJobStatus,
    "IoK8sKubernetesPkgApisBatchV2alpha1JobTemplateSpec": IoK8sKubernetesPkgApisBatchV2alpha1JobTemplateSpec,
    "IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequest": IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequest,
    "IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestCondition": IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestCondition,
    "IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestList": IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestList,
    "IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec": IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec,
    "IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestStatus": IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestStatus,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet": IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetList": IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetList,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetSpec": IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetSpec,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetStatus": IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetStatus,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetUpdateStrategy": IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetUpdateStrategy,
    "IoK8sKubernetesPkgApisExtensionsV1beta1Deployment": IoK8sKubernetesPkgApisExtensionsV1beta1Deployment,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentCondition": IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentCondition,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentList": IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentList,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentRollback": IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentRollback,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentSpec": IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentSpec,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStatus": IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStatus,
    "IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStrategy": IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentStrategy,
    "IoK8sKubernetesPkgApisExtensionsV1beta1FSGroupStrategyOptions": IoK8sKubernetesPkgApisExtensionsV1beta1FSGroupStrategyOptions,
    "IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressPath": IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressPath,
    "IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressRuleValue": IoK8sKubernetesPkgApisExtensionsV1beta1HTTPIngressRuleValue,
    "IoK8sKubernetesPkgApisExtensionsV1beta1HostPortRange": IoK8sKubernetesPkgApisExtensionsV1beta1HostPortRange,
    "IoK8sKubernetesPkgApisExtensionsV1beta1IDRange": IoK8sKubernetesPkgApisExtensionsV1beta1IDRange,
    "IoK8sKubernetesPkgApisExtensionsV1beta1Ingress": IoK8sKubernetesPkgApisExtensionsV1beta1Ingress,
    "IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend": IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend,
    "IoK8sKubernetesPkgApisExtensionsV1beta1IngressList": IoK8sKubernetesPkgApisExtensionsV1beta1IngressList,
    "IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule": IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule,
    "IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec": IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec,
    "IoK8sKubernetesPkgApisExtensionsV1beta1IngressStatus": IoK8sKubernetesPkgApisExtensionsV1beta1IngressStatus,
    "IoK8sKubernetesPkgApisExtensionsV1beta1IngressTLS": IoK8sKubernetesPkgApisExtensionsV1beta1IngressTLS,
    "IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy": IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy,
    "IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyIngressRule": IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyIngressRule,
    "IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyList": IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyList,
    "IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer": IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer,
    "IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPort": IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPort,
    "IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicySpec": IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicySpec,
    "IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicy": IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicy,
    "IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicyList": IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicyList,
    "IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicySpec": IoK8sKubernetesPkgApisExtensionsV1beta1PodSecurityPolicySpec,
    "IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet": IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet,
    "IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetCondition": IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetCondition,
    "IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetList": IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetList,
    "IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetSpec": IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetSpec,
    "IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetStatus": IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetStatus,
    "IoK8sKubernetesPkgApisExtensionsV1beta1RollbackConfig": IoK8sKubernetesPkgApisExtensionsV1beta1RollbackConfig,
    "IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDaemonSet": IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDaemonSet,
    "IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDeployment": IoK8sKubernetesPkgApisExtensionsV1beta1RollingUpdateDeployment,
    "IoK8sKubernetesPkgApisExtensionsV1beta1RunAsUserStrategyOptions": IoK8sKubernetesPkgApisExtensionsV1beta1RunAsUserStrategyOptions,
    "IoK8sKubernetesPkgApisExtensionsV1beta1SELinuxStrategyOptions": IoK8sKubernetesPkgApisExtensionsV1beta1SELinuxStrategyOptions,
    "IoK8sKubernetesPkgApisExtensionsV1beta1Scale": IoK8sKubernetesPkgApisExtensionsV1beta1Scale,
    "IoK8sKubernetesPkgApisExtensionsV1beta1ScaleSpec": IoK8sKubernetesPkgApisExtensionsV1beta1ScaleSpec,
    "IoK8sKubernetesPkgApisExtensionsV1beta1ScaleStatus": IoK8sKubernetesPkgApisExtensionsV1beta1ScaleStatus,
    "IoK8sKubernetesPkgApisExtensionsV1beta1SupplementalGroupsStrategyOptions": IoK8sKubernetesPkgApisExtensionsV1beta1SupplementalGroupsStrategyOptions,
    "IoK8sKubernetesPkgApisNetworkingV1NetworkPolicy": IoK8sKubernetesPkgApisNetworkingV1NetworkPolicy,
    "IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule": IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule,
    "IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyList": IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyList,
    "IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPeer": IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPeer,
    "IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort": IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort,
    "IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec": IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec,
    "IoK8sKubernetesPkgApisPolicyV1beta1Eviction": IoK8sKubernetesPkgApisPolicyV1beta1Eviction,
    "IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudget": IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudget,
    "IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetList": IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetList,
    "IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetSpec": IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetSpec,
    "IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetStatus": IoK8sKubernetesPkgApisPolicyV1beta1PodDisruptionBudgetStatus,
    "IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole": IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole,
    "IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding": IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding,
    "IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBindingList": IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBindingList,
    "IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleList": IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleList,
    "IoK8sKubernetesPkgApisRbacV1alpha1PolicyRule": IoK8sKubernetesPkgApisRbacV1alpha1PolicyRule,
    "IoK8sKubernetesPkgApisRbacV1alpha1Role": IoK8sKubernetesPkgApisRbacV1alpha1Role,
    "IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding": IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding,
    "IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList": IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList,
    "IoK8sKubernetesPkgApisRbacV1alpha1RoleList": IoK8sKubernetesPkgApisRbacV1alpha1RoleList,
    "IoK8sKubernetesPkgApisRbacV1alpha1RoleRef": IoK8sKubernetesPkgApisRbacV1alpha1RoleRef,
    "IoK8sKubernetesPkgApisRbacV1alpha1Subject": IoK8sKubernetesPkgApisRbacV1alpha1Subject,
    "IoK8sKubernetesPkgApisRbacV1beta1ClusterRole": IoK8sKubernetesPkgApisRbacV1beta1ClusterRole,
    "IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBinding": IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBinding,
    "IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBindingList": IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleBindingList,
    "IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleList": IoK8sKubernetesPkgApisRbacV1beta1ClusterRoleList,
    "IoK8sKubernetesPkgApisRbacV1beta1PolicyRule": IoK8sKubernetesPkgApisRbacV1beta1PolicyRule,
    "IoK8sKubernetesPkgApisRbacV1beta1Role": IoK8sKubernetesPkgApisRbacV1beta1Role,
    "IoK8sKubernetesPkgApisRbacV1beta1RoleBinding": IoK8sKubernetesPkgApisRbacV1beta1RoleBinding,
    "IoK8sKubernetesPkgApisRbacV1beta1RoleBindingList": IoK8sKubernetesPkgApisRbacV1beta1RoleBindingList,
    "IoK8sKubernetesPkgApisRbacV1beta1RoleList": IoK8sKubernetesPkgApisRbacV1beta1RoleList,
    "IoK8sKubernetesPkgApisRbacV1beta1RoleRef": IoK8sKubernetesPkgApisRbacV1beta1RoleRef,
    "IoK8sKubernetesPkgApisRbacV1beta1Subject": IoK8sKubernetesPkgApisRbacV1beta1Subject,
    "IoK8sKubernetesPkgApisSettingsV1alpha1PodPreset": IoK8sKubernetesPkgApisSettingsV1alpha1PodPreset,
    "IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetList": IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetList,
    "IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec": IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec,
    "IoK8sKubernetesPkgApisStorageV1StorageClass": IoK8sKubernetesPkgApisStorageV1StorageClass,
    "IoK8sKubernetesPkgApisStorageV1StorageClassList": IoK8sKubernetesPkgApisStorageV1StorageClassList,
    "IoK8sKubernetesPkgApisStorageV1beta1StorageClass": IoK8sKubernetesPkgApisStorageV1beta1StorageClass,
    "IoK8sKubernetesPkgApisStorageV1beta1StorageClassList": IoK8sKubernetesPkgApisStorageV1beta1StorageClassList,
}
